<?xml version="1.0" encoding="UTF-8"?>
<tmx version="1.4-g">
<header creationtool="tmxextract" creationtoolversion="todo: svnversion"/>
<body>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp1]</bpt>Карта<ept id="1">&lt;/a&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp1]</bpt>Map<ept id="1">&lt;/a&gt;</ept></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Создание и удаление</seg></tuv>
	<tuv xml:lang="en"><seg>Creating and deleting</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Основные параметры</seg></tuv>
	<tuv xml:lang="en"><seg>Main parameters</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Создание карты по требованию</seg></tuv>
	<tuv xml:lang="en"><seg>Creating maps on demand</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Изменение размера карты</seg></tuv>
	<tuv xml:lang="en"><seg>Resizing the map</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Собственная карта</seg></tuv>
	<tuv xml:lang="en"><seg>Custom map</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp15]</bpt>Геообъекты<ept id="1">&lt;/a&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp15]</bpt>Geo objects<ept id="1">&lt;/a&gt;</ept></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Метка</seg></tuv>
	<tuv xml:lang="en"><seg>Placemark</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Задание собственного изображения для метки</seg></tuv>
	<tuv xml:lang="en"><seg>Setting a custom placemark image</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Ломаная</seg></tuv>
	<tuv xml:lang="en"><seg>Polyline</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Прямоугольник</seg></tuv>
	<tuv xml:lang="en"><seg>Rectangle</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Многоугольник</seg></tuv>
	<tuv xml:lang="en"><seg>Polygon</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Круг</seg></tuv>
	<tuv xml:lang="en"><seg>Circle</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Стрелка на карте</seg></tuv>
	<tuv xml:lang="en"><seg>Arrow on the map</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Добавление геообъектов в коллекцию</seg></tuv>
	<tuv xml:lang="en"><seg>Adding geo objects to a collection</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Редактор ломаной</seg></tuv>
	<tuv xml:lang="en"><seg>Polyline editor</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Редактор многоугольника</seg></tuv>
	<tuv xml:lang="en"><seg>Polygon editor</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Вывод списка объектов карты</seg></tuv>
	<tuv xml:lang="en"><seg>Outputting a list of map objects</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>События геообъекта</seg></tuv>
	<tuv xml:lang="en"><seg>Geo object events</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Изменение параметров метки</seg></tuv>
	<tuv xml:lang="en"><seg>Changing placemark parameters</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Смена значка метки при наведении</seg></tuv>
	<tuv xml:lang="en"><seg>Changing a placemark icon when hovering over it</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Задание фигуры активной области HTML макету метки</seg></tuv>
	<tuv xml:lang="en"><seg>Setting the hotspot shape for a placemark's HTML layout</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp48]</bpt>Балун и хинт<ept id="1">&lt;/a&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp48]</bpt>Balloon and hint<ept id="1">&lt;/a&gt;</ept></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Балун и хинт</seg></tuv>
	<tuv xml:lang="en"><seg>Balloon and hint</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Балун, выходящий за пределы карты</seg></tuv>
	<tuv xml:lang="en"><seg>Balloon that goes off the map</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Динамическая загрузка содержимого балуна</seg></tuv>
	<tuv xml:lang="en"><seg>Dynamically loading balloon content</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Метка и балун-панель</seg></tuv>
	<tuv xml:lang="en"><seg>Placemark and balloon panel</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Макет хинта метки</seg></tuv>
	<tuv xml:lang="en"><seg>Layout of the placemark hint</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Макет балуна метки</seg></tuv>
	<tuv xml:lang="en"><seg>Layout of the placemark balloon</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Пользовательский макет балуна с поддержкой автопозиционирования</seg></tuv>
	<tuv xml:lang="en"><seg>Custom layout for an autopositioned balloon</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp65]</bpt>Элементы управления<ept id="1">&lt;/a&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp65]</bpt>Controls<ept id="1">&lt;/a&gt;</ept></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Стандартный набор элементов управления</seg></tuv>
	<tuv xml:lang="en"><seg>Standard set of controls</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Добавление отдельных элементов управления</seg></tuv>
	<tuv xml:lang="en"><seg>Adding individual controls</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Добавление кнопки на карту</seg></tuv>
	<tuv xml:lang="en"><seg>Adding buttons to the map</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Произвольный макет кнопки</seg></tuv>
	<tuv xml:lang="en"><seg>Custom button layout</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Произвольный макет элемента изменения масштаба</seg></tuv>
	<tuv xml:lang="en"><seg>Custom zoom control layout</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Произвольный макет выпадающего списка</seg></tuv>
	<tuv xml:lang="en"><seg>Custom drop-down list layout</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Собственный элемент управления</seg></tuv>
	<tuv xml:lang="en"><seg>Custom control</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp82]</bpt>Активные области<ept id="1">&lt;/a&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp82]</bpt>Hotspots<ept id="1">&lt;/a&gt;</ept></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Слой активных областей</seg></tuv>
	<tuv xml:lang="en"><seg>Hotspot layer</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp87]</bpt>Регионы<ept id="1">&lt;/a&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp87]</bpt>Regions<ept id="1">&lt;/a&gt;</ept></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Пример работы модуля "Регионы"</seg></tuv>
	<tuv xml:lang="en"><seg>Example of the "Regions" module</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp92]</bpt>Кластеризация<ept id="1">&lt;/a&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp92]</bpt>Clustering<ept id="1">&lt;/a&gt;</ept></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Создание кластеризатора</seg></tuv>
	<tuv xml:lang="en"><seg>Creating the clusterer</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Создание кластеризатора с произвольными иконками</seg></tuv>
	<tuv xml:lang="en"><seg>Creating the clusterer with custom icons</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Изменение цвета кластеров и меток при наведении</seg></tuv>
	<tuv xml:lang="en"><seg> Changing the color of clusters and placemarks when hovering</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Открытие балуна кластера с выбранным объектом</seg></tuv>
	<tuv xml:lang="en"><seg>Opening the cluster balloon with the selected object</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Изменение размера ячейки кластеризатора</seg></tuv>
	<tuv xml:lang="en"><seg>Changing the clusterer cell size</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>li id="cluster_balloon_ajax"&gt;Динамическая загрузка содержимого балуна кластера&lt;/li</seg></tuv>
	<tuv xml:lang="en"><seg>li id="cluster_balloon_ajax"&gt;Dynamically loading content of a cluster balloon&lt;/li</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Макета балуна кластера "Две колонки"</seg></tuv>
	<tuv xml:lang="en"><seg>"Two-column" layout for the cluster balloon</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Макет балуна кластера "Аккордеон"</seg></tuv>
	<tuv xml:lang="en"><seg>"Accordion" layout for the cluster balloon</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Макета балуна кластера "Карусель"</seg></tuv>
	<tuv xml:lang="en"><seg>"Carousel" layout for the cluster balloon</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Собственный макет балуна кластера</seg></tuv>
	<tuv xml:lang="en"><seg>Custom layout for the cluster balloon</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp115]</bpt>GeoQuery<ept id="1">&lt;/a&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp115]</bpt>GeoQuery<ept id="1">&lt;/a&gt;</ept></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Попадание точек в окружность</seg></tuv>
	<tuv xml:lang="en"><seg>Points falling within a circle</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Поиск ближайшего объекта</seg></tuv>
	<tuv xml:lang="en"><seg>Searching for the nearest object</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Добавление на карту объектов, попадающих в область видимости</seg></tuv>
	<tuv xml:lang="en"><seg>Adding the objects that fall within the viewport to the map</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Пересечение маршрута с многоугольником на примере МКАД</seg></tuv>
	<tuv xml:lang="en"><seg>Route intersecting with a polygon, using the example of the Moscow Ring Road</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Фильтрация объектов на карте по различным признакам</seg></tuv>
	<tuv xml:lang="en"><seg>Filtering objects on the map using various attributes</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Позиционирование карты для показа результатов геокодирования и их кластеризация</seg></tuv>
	<tuv xml:lang="en"><seg>Positioning the map to display geocoding results and clustering</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Загрузка данных с помощью JQuery и добавление их на карту</seg></tuv>
	<tuv xml:lang="en"><seg>Uploading data using JQuery and adding it to the map</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp132]</bpt>Поведения и события<ept id="1">&lt;/a&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp132]</bpt>Behaviors and events<ept id="1">&lt;/a&gt;</ept></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Поведения карты</seg></tuv>
	<tuv xml:lang="en"><seg>Map behaviors</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Подписка на события dom-элемента</seg></tuv>
	<tuv xml:lang="en"><seg>Subscribing to dom element events</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Свойства события. Координаты щелчка</seg></tuv>
	<tuv xml:lang="en"><seg>Event properties. Click coordinates</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Использование драггера</seg></tuv>
	<tuv xml:lang="en"><seg>Using the dragger</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp143]</bpt>Поиск по карте<ept id="1">&lt;/a&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp143]</bpt>Search on the map<ept id="1">&lt;/a&gt;</ept></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Прямое геокодирование</seg></tuv>
	<tuv xml:lang="en"><seg>Forward geocoding</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Обратное геокодирование</seg></tuv>
	<tuv xml:lang="en"><seg>Reverse geocoding</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Определение адреса клика на карте с помощью обратного геокодирования</seg></tuv>
	<tuv xml:lang="en"><seg>Determining the address of a click on the map using reverse geocoding</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Множественное геокодирование</seg></tuv>
	<tuv xml:lang="en"><seg>Multiple geocoding</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Поиск по своим объектам</seg></tuv>
	<tuv xml:lang="en"><seg>Searching across your own objects</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Собственное отображение результатов поиска</seg></tuv>
	<tuv xml:lang="en"><seg>Custom display of search results</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp159]</bpt>Пробки<ept id="1">&lt;/a&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp159]</bpt>Traffic<ept id="1">&lt;/a&gt;</ept></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Элемент управления "Пробки"</seg></tuv>
	<tuv xml:lang="en"><seg>"Traffic" control</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Слой пробок на карте без добавления кнопки</seg></tuv>
	<tuv xml:lang="en"><seg>Traffic layer on the map without buttons added</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp166]</bpt>Местоположение пользователя<ept id="1">&lt;/a&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp166]</bpt>User location<ept id="1">&lt;/a&gt;</ept></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Определение местоположения пользователя</seg></tuv>
	<tuv xml:lang="en"><seg>Detecting user location</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Добавление кнопки "Геолокация"</seg></tuv>
	<tuv xml:lang="en"><seg>Adding the "Geolocation" button</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Создание карты с местоположением пользователя</seg></tuv>
	<tuv xml:lang="en"><seg>Creating a map with the user's location</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp175]</bpt>Маршрутизация<ept id="1">&lt;/a&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp175]</bpt>Routing<ept id="1">&lt;/a&gt;</ept></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Построение маршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Constructing a route</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Редактирование маршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Editing a route</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Расчёт стоимости маршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Calculating route cost</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Построение мультимаршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Constructing a multiroute</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Построение мультимаршрута на общественном транспорте</seg></tuv>
	<tuv xml:lang="en"><seg>Constructing a multiroute on public transport</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Построение мультимаршрута с учетом пробок</seg></tuv>
	<tuv xml:lang="en"><seg>Constructing a multiroute considering traffic</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Редактирование мультимаршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Editing a multiroute</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Задание собственного отображения мультимаршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Defining a custom multiroute display</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Задание собственного изображения иконок меток мультимаршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Setting a custom placemark icon image for a multiroute</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Задание собственного макета балуна мультимаршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Setting a custom balloon layout for a multiroute</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp198]</bpt>GeoXML<ept id="1">&lt;/a&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp198]</bpt>GeoXML<ept id="1">&lt;/a&gt;</ept></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Отображение YMapsML и KML</seg></tuv>
	<tuv xml:lang="en"><seg>Displaying YMapsML and KML</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp203]</bpt>ObjectManager<ept id="1">&lt;/a&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp203]</bpt>ObjectManager<ept id="1">&lt;/a&gt;</ept></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Добавление объектов на карту через ObjectManager</seg></tuv>
	<tuv xml:lang="en"><seg>Adding objects to the map using ObjectManager</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Обработка событий на объектах в ObjectManager</seg></tuv>
	<tuv xml:lang="en"><seg>Handling events on objects in ObjectManager</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Открытие балуна на метке в ObjectManager</seg></tuv>
	<tuv xml:lang="en"><seg>Opening a balloon on a placemark in ObjectManager</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Загрузка данных для балуна метки по требованию</seg></tuv>
	<tuv xml:lang="en"><seg>Loading data for a placemark balloon on demand</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp214]</bpt>Модульная система<ept id="1">&lt;/a&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp214]</bpt>Modular system<ept id="1">&lt;/a&gt;</ept></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Загрузка определенных модулей при инициализации</seg></tuv>
	<tuv xml:lang="en"><seg>Loading certain modules during initialization</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Загрузка модуля по требованию</seg></tuv>
	<tuv xml:lang="en"><seg>Loading a module on demand</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Создание своего модуля</seg></tuv>
	<tuv xml:lang="en"><seg>Creating your own module</seg></tuv></tu>








<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Макеты объектов можно создавать с помощью фабрики <ph id="1">[#$dp7]</ph>,
        используя текcтовые шаблоны.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        Object layouts can be created using the factory <ph id="1">[#$dp7]</ph>,
        and using text templates.
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В данном примере создается пользовательский макет балуна <bpt id="1">[#$dp10]</bpt>геообъекта<ept id="1">&lt;/sa&gt;</ept>.
        Макет задается геообъекту через опции.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        This example creates a custom balloon layout for a <bpt id="1">[#$dp10]</bpt>geo object<ept id="1">&lt;/sa&gt;</ept>.
        The layout is assigned to the geo object via options.
    </seg></tuv></tu>









<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>
</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>
    Для создания собственной карты необходимо прежде всего задать систему координат,
    на которую будет проецироваться карта.
    В API встроена поддержка двух систем координат: декартовой и географической,
    которые реализуются классами
    <ph id="1">[#$dp9]</ph> и <ph id="2">[#$dp10]</ph> соответственно. Кроме того есть возможность создания пользовательской координатной системы.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    To create a custom map, first you must specify the coordinate system that the map will be projected on. The API supports two coordinate systems: Cartesian and geographic, which are implemented by the <ph id="1">[#$dp9]</ph> and <ph id="2">[#$dp10]</ph> classes, respectively. In addition, it is possible to create a custom coordinate system.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    Также для создания пользовательской карты нужно сформировать собственный слой
    и добавить его в хранилище слоев карты.
    Для создания слоя используется класс <ph id="1">[#$dp13]</ph>.
    При добавлении слоя в хранилище слоев указывается не экземпляр класса Layer,
    а его конструктор.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In addition, you need to make your own layer and add it to the map layer storage. To create a layer, use the <ph id="1">[#$dp13]</ph> class. When adding a layer to the layer storage, do not indicate an instance of the Layer class, but its constructor.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Класс-модель
</seg></tuv>
	<tuv xml:lang="en"><seg>Class model
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>@contructor
</seg></tuv>
	<tuv xml:lang="en"><seg>@contructor
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Используем ymaps.Monitor для наблюдения за изменениями опций модели.
</seg></tuv>
	<tuv xml:lang="en"><seg>Use ymaps.Monitor to monitor changes in the model options.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Хак для смены языка при смене страны.
</seg></tuv>
	<tuv xml:lang="en"><seg>Hack for switching the language when switching countries.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Отключение мониторинга опций модели.
</seg></tuv>
	<tuv xml:lang="en"><seg>Disabling monitoring of model options.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Загружаем данные.
</seg></tuv>
	<tuv xml:lang="en"><seg>Uploading data.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Обработчик загрузки данных.
</seg></tuv>
	<tuv xml:lang="en"><seg>The handler for loading data.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object} data</ph> Данные региона.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object} data</ph> Region data.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Опции модели по-умолчанию.
</seg></tuv>
	<tuv xml:lang="en"><seg>Default model options.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{Object}</ph> Опции модели.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{Object}</ph> Model options.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Created with JetBrains PhpStorm.
User: ogorbacheva
Date: 08.07.13
Time: 13:29
To change this template use File | Settings | File Templates.
</seg></tuv>
	<tuv xml:lang="en"><seg>Created with JetBrains PhpStorm.
User: ogorbacheva
Date: 08.07.13
Time: 13:29
To change this template use File | Settings | File Templates.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Класс-отображение заголовка.
</seg></tuv>
	<tuv xml:lang="en"><seg>Title display class</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{jQuery} container</ph> Родителький элемент контрола.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{jQuery} container</ph> The parent element of the control.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Отображение данных в DOM-дереве.
</seg></tuv>
	<tuv xml:lang="en"><seg>Displaying data in the DOM tree.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} data</ph> Данные регионов.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} data</ph> Data for regions.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.TitleView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.TitleView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Удаление данных из DOM-дерева.
</seg></tuv>
	<tuv xml:lang="en"><seg>Deleting data from the DOM tree.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.TitleView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.TitleView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Добавление обработчиков событий.
</seg></tuv>
	<tuv xml:lang="en"><seg>Adding event handlers.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Удаление обработчиков событий.
</seg></tuv>
	<tuv xml:lang="en"><seg>Deleting event handlers.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Обработчик клика на заголовке.
</seg></tuv>
	<tuv xml:lang="en"><seg>Handler for clicks on the header.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{jQuery.Event} e</ph> Объект-событие.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{jQuery.Event} e</ph> Event object.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Сервис <bpt id="1">[#$dp8]</bpt>Регионы<ept id="1">&lt;/a&gt;</ept> позволяет добавлять на карту сразу целые области. Для загрузки региональных областей используется функция <ph id="2">[#$dp9]</ph>.</seg></tuv>
	<tuv xml:lang="en"><seg> The <bpt id="1">[#$dp8]</bpt>Regions<ept id="1">&lt;/a&gt;</ept> service lets you add entire regions to the map at once. Use the <ph id="2">[#$dp9]</ph> function for uploading regional areas.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Данные о региональном делении стран подгружаются из OSM. Полученные данные преобразуются в коллекцию GeoObjectCollection, которую можно разместить на карте. </seg></tuv>
	<tuv xml:lang="en"><seg> Data on the regional division of countries are loaded from OSM. The received data is converted into a GeoObjectCollection that can be placed on the map. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Класс-отображение списка регионов.
</seg></tuv>
	<tuv xml:lang="en"><seg>Display class for the list of regions.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{jQuery} container</ph> Родительский элемент списка.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{jQuery} container</ph> The parent element of the control.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Отображение данных в DOM-дереве.
</seg></tuv>
	<tuv xml:lang="en"><seg>Displaying data in the DOM tree.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} data</ph> Данные регионов.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} data</ph> Data for regions.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.ListView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.ListView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Удаление данных из DOM-дерева.
</seg></tuv>
	<tuv xml:lang="en"><seg>Deleting data from the DOM tree.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.ListView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.ListView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Сортировка DOM-элементов списка в алфавитном порядке.
</seg></tuv>
	<tuv xml:lang="en"><seg>Sorting the list of DOM elements in alphabetical order.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Добавление обработчиков событий.
</seg></tuv>
	<tuv xml:lang="en"><seg>Adding event handlers.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Удаление обработчиков событий.
</seg></tuv>
	<tuv xml:lang="en"><seg>Deleting event handlers.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Обработчик клика на элементе списка.
</seg></tuv>
	<tuv xml:lang="en"><seg>Handler for clicks on a list item.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{jQuery.Event} e</ph> Объект-событие.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{jQuery.Event} e</ph> Event object.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Выделить элемент списка.
</seg></tuv>
	<tuv xml:lang="en"><seg>Select a list item.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Number} index</ph> Порядковый номер элемента в списке.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Number} index</ph> The number of the item in the list.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.ListView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.ListView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Снять выделение элемента списка.
</seg></tuv>
	<tuv xml:lang="en"><seg>Deselect an item in the list.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.ListView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.ListView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Скроллим список к выбранному элементу.
</seg></tuv>
	<tuv xml:lang="en"><seg>Scrolling the list to the selected item.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Number} index</ph> Порядковый номер элемента в списке.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Number} index</ph> The number of the item in the list.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.ListView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.ListView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Поиск (фильтрация) выбранного элемента в списке по индексу.
</seg></tuv>
	<tuv xml:lang="en"><seg>Finding (filtering) the selected item in the list by index.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Number} index</ph> Порядковый номер элемента в списке.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Number} index</ph> The number of the item in the list.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.ListView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.ListView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Итератор по элементам геоколлекции.
</seg></tuv>
	<tuv xml:lang="en"><seg>An iterator for geocollection items.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.Polygon} region</ph> Геообъект региона.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.Polygon} region</ph> Region geo object.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Number} index</ph> Порядковый номер элемента в геоколлекции.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Number} index</ph> The number of the item in the geocollection.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Класс-отображение регионов на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>Display class for regions on the map.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.Map} map</ph> Карта.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.Map} map</ph> Map.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>@constuctor
</seg></tuv>
	<tuv xml:lang="en"><seg>@constructor
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Добавление обработчиков событий.
</seg></tuv>
	<tuv xml:lang="en"><seg>Adding event handlers.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Удаление обработчиков событий.
</seg></tuv>
	<tuv xml:lang="en"><seg>Deleting event handlers.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Обработчик клика на области региона.
</seg></tuv>
	<tuv xml:lang="en"><seg>Handler for clicks on the region area.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} e</ph> Менеджер данных.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} e</ph> Data Manager.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Отображение данных на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>Displaying data on the map.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} data</ph> Менеджер данных.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} data</ph> Data Manager.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.MapView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.MapView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Удаление данных с карты.
</seg></tuv>
	<tuv xml:lang="en"><seg>Deleting data from the map.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.MapView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.MapView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Выделяем активный регион.
</seg></tuv>
	<tuv xml:lang="en"><seg>Selecting the active region.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Number} index</ph> Индекс региона в коллекции.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Number} index</ph> The index of the region in the collection.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.MapView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.MapView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Снимаем выделение активного региона.
</seg></tuv>
	<tuv xml:lang="en"><seg>Removing the selection of the active region.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.MapView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.MapView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Выставляем карте область видимости на определенный регион.
</seg></tuv>
	<tuv xml:lang="en"><seg>Setting the map viewport on a certain region.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Number} index</ph> Порядковый номер региона в геоколлекции.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Number} index</ph> The number of the region in the geocollection.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.MapView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.MapView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Выставляем карте область видимости по всем регионам.
</seg></tuv>
	<tuv xml:lang="en"><seg>Setting the map viewport for all regions.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.MapView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.MapView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Цвет областей региона.
</seg></tuv>
	<tuv xml:lang="en"><seg>The color of the region.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Цвет выделенной области.
</seg></tuv>
	<tuv xml:lang="en"><seg>The color of the selected area.
</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    Для отображения нужного региона выберите страну, язык и уровень детализации соответственно.<ph id="1">&lt;br&gt;</ph><ph id="2">&lt;br&gt;</ph>
    <it id="3" pos="open">&lt;select id="country"&gt;</it>
        </seg></tuv>
	<tuv xml:lang="en"><seg>
    To display the desired region, select the appropriate country, language, and level of detail.<ph id="1">&lt;br&gt;</ph><ph id="2">&lt;br&gt;</ph>
    <it id="3" pos="open">&lt;select id="country"&gt;</it>
        </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>-</seg></tuv>
	<tuv xml:lang="en"><seg>-</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    <it id="2" pos="close">&lt;/select&gt;</it>
    <it id="1" pos="open">&lt;select id="lang"&gt;</it>
        </seg></tuv>
	<tuv xml:lang="en"><seg>
    <it id="2" pos="close">&lt;/select&gt;</it>
    <it id="1" pos="open">&lt;select id="lang"&gt;</it>
        </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>-</seg></tuv>
	<tuv xml:lang="en"><seg>-</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>0</seg></tuv>
	<tuv xml:lang="en"><seg>0</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    <it id="2" pos="close">&lt;/select&gt;</it>
    <it id="1" pos="open">&lt;select id="level"&gt;</it>
        </seg></tuv>
	<tuv xml:lang="en"><seg>
    <it id="2" pos="close">&lt;/select&gt;</it>
    <it id="1" pos="open">&lt;select id="level"&gt;</it>
        </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>1</seg></tuv>
	<tuv xml:lang="en"><seg>1</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>2</seg></tuv>
	<tuv xml:lang="en"><seg>2</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>3</seg></tuv>
	<tuv xml:lang="en"><seg>3</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>remove</seg></tuv>
	<tuv xml:lang="en"><seg>remove</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    <it id="2" pos="close">&lt;/select&gt;</it>
    <ph id="1">&lt;input id="remove" type="button" [#$tu17]&gt;</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <it id="2" pos="close">&lt;/select&gt;</it>
    <ph id="1">&lt;input id="remove" type="button" [#$tu17]&gt;</ph>
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Класс-отображения контролов настроек.
</seg></tuv>
	<tuv xml:lang="en"><seg>Display class for settings controls.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{jQuery} container</ph> Родительский элемент контролов настроек.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{jQuery} container</ph> The parent of the settings controls.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Отображение контролов настроек в DOM-дереве.
</seg></tuv>
	<tuv xml:lang="en"><seg>Displaying settings controls in the DOM tree.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} data</ph> Менеджер данных.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} data</ph> Data Manager.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.OptsView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.OptsView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Удаление контролов настроек из DOM-дерева.
</seg></tuv>
	<tuv xml:lang="en"><seg>Removing the settings controls from the DOM tree.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.OptsView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.OptsView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Добавление обработчиков событий.
</seg></tuv>
	<tuv xml:lang="en"><seg>Adding event handlers.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Удаление обработчиков событий.
</seg></tuv>
	<tuv xml:lang="en"><seg>Deleting event handlers.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Обработчик клика на конроле настроек.
</seg></tuv>
	<tuv xml:lang="en"><seg>Click handler on a settings control.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{jQuery.Event} e</ph> Объект-событие.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{jQuery.Event} e</ph> Event object.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Выделить элемент списка контрола.
</seg></tuv>
	<tuv xml:lang="en"><seg>Select item in the control list.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{jQuery} item</ph> Элемент списка контрола.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{jQuery} item</ph> Control list item.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.OptsView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.OptsView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Снять выделение элемента списка контрола.
</seg></tuv>
	<tuv xml:lang="en"><seg>Deselect item in the control list.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{jQuery} container</ph> Родительский элемент.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{jQuery} container</ph> Parent element.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.OptsView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.OptsView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Заголовки контролов.
</seg></tuv>
	<tuv xml:lang="en"><seg>Titles of controls.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Класс-контрол выбора региона
</seg></tuv>
	<tuv xml:lang="en"><seg>Region selection control class</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.Map} map</ph> Карта.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.Map} map</ph> Map.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{jQuery} listContainer</ph> Контейнер списка областей.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{jQuery} listContainer</ph> Container for the list of areas.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{jQuery} optContainer</ph> Контейнер для настроек.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{jQuery} optContainer</ph> Container for settings.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{jQuery} titleContainer</ph> Контейнер заголовка.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{jQuery} titleContainer</ph> Container for the title.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Добавление обработчиков событий.
</seg></tuv>
	<tuv xml:lang="en"><seg>Adding event handlers.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Удаление обработчиков событий.
</seg></tuv>
	<tuv xml:lang="en"><seg>Deleting event handlers.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Обработчик события загрузки данных о регионах.
</seg></tuv>
	<tuv xml:lang="en"><seg>The event handler for loading regional data.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} data</ph> Менеджер данных.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} data</ph> Data Manager.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Обработчик выбора региона на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>Handler for selecting a region on the map.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} e</ph> Менеджер данных.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} e</ph> Data Manager.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Обработчик выбора региона в списке.
</seg></tuv>
	<tuv xml:lang="en"><seg>Handler for selecting a region in the list.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{jQuery.Event} e</ph> Объект-событие.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{jQuery.Event} e</ph> Event object.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Обработчик смены настроек.
</seg></tuv>
	<tuv xml:lang="en"><seg>Handler for changing settings.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{jQuery.Event} e</ph> Объект-событие.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{jQuery.Event} e</ph> Event object.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Класс-отображение данных на карте ввиде маски.
</seg></tuv>
	<tuv xml:lang="en"><seg>Class for displaying data on the map as a mask.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.Map} map</ph> Карта.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.Map} map</ph> Map.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Отображение данных на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>Displaying data on the map.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} data</ph> Менеджер данных.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} data</ph> Data Manager.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.MapMaskView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.MapMaskView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Удаление данных с карты.
</seg></tuv>
	<tuv xml:lang="en"><seg>Deleting data from the map.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.MapMaskView}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{RegionSelector.MapMaskView}</ph> Returns a reference to itself.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Добавление обработчиков событий.
</seg></tuv>
	<tuv xml:lang="en"><seg>Adding event handlers.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Удаление обработчиков событий.
</seg></tuv>
	<tuv xml:lang="en"><seg>Deleting event handlers.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Обработчик события изменения пискельной геометрии.
</seg></tuv>
	<tuv xml:lang="en"><seg>Event handler for changes to pixel geometry.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} e</ph> Менеджер данных.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.data.Manager} e</ph> Data Manager.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Обработчик события окончания плавного движения карты.
</seg></tuv>
	<tuv xml:lang="en"><seg>Event handler for the end of smooth map movement.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Создание геометрии типа "Polygon".
</seg></tuv>
	<tuv xml:lang="en"><seg>Creating a "Polygon" type geometry.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Number[][]} coordinates</ph> Координаты вершин ломаных, определяющих внешнюю и внутренние границы многоугольника.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Number[][]} coordinates</ph> The coordinates of the polyline vertices defining the external and internal boundaries of the polygon.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Создание оверлея.
</seg></tuv>
	<tuv xml:lang="en"><seg>Creating an overlay.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.geometry.pixel.Polygon} geometry</ph> Пиксельная геометрия полигона.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.geometry.pixel.Polygon} geometry</ph> Polygon pixel geometry.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Опции по-умолчанию.
</seg></tuv>
	<tuv xml:lang="en"><seg>Default options.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{Object}</ph> Опции.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{Object}</ph> Options.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Класс оверлея маски.
</seg></tuv>
	<tuv xml:lang="en"><seg>Overlay mask class.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.geometry.pixel.Polygon} geometry</ph> Пиксельная геометкрия полигона.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.geometry.pixel.Polygon} geometry</ph> Polygon pixel geometry.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object} data</ph> Данные.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object} data</ph> Data.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object} options</ph> Опции.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object} options</ph> Options.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Перекрываем публичный метод.
</seg></tuv>
	<tuv xml:lang="en"><seg>Overriding the public method.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.geometry.pixel.Polygon} geometry</ph> Пиксельная геометрия полигона.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{ymaps.geometry.pixel.Polygon} geometry</ph> Polygon pixel geometry.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Создание пиксельной геометрии.
</seg></tuv>
	<tuv xml:lang="en"><seg>Creating the pixel geometry.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{ymaps.geometry.pixel.Polygon}</ph> Пиксельная геометрия полигона.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{ymaps.geometry.pixel.Polygon}</ph> Polygon pixel geometry.
</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> Свойства.
</seg></tuv>
	<tuv xml:lang="en"><seg> Properties.
</seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg> Ширина линии.
</seg></tuv>
	<tuv xml:lang="en"><seg> Line width.
</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> Цвет обводки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Stroke color.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Прозрачность обводки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Stroke transparency.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Ширина линии.
</seg></tuv>
	<tuv xml:lang="en"><seg> Line width.
</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>



























<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>





<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>Примеры. Прямое геокодирование</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Forward geocoding</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>






<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>
</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>






<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Правила отображения маршрутов задаются в опциях маршрутизатора.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        Rules for displaying routes are set in the router options.
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для задания опций составных частей мультимаршрута доступны следующие префиксы:

        </seg></tuv>
	<tuv xml:lang="en"><seg>
        The following prefixes are available for setting options for sections of a multiroute:

        </seg></tuv></tu>








<tu>
	<tuv xml:lang="ru"><seg>
    В данном примере на карту добавляется два маршрута с разными опциями отображения. Как можно задать
    два разных отображения для маршрутов, имеющих общую модель, см. в <bpt id="1">[#$dp27]</bpt>справочнике<ept id="1">&lt;/sa&gt;</ept>.

</seg></tuv>
	<tuv xml:lang="en"><seg>
    In this example, two routes are added to the map with different display options. To set two different displays for routes that share the same model, see the <bpt id="1">[#$dp27]</bpt>Reference guide<ept id="1">&lt;/sa&gt;</ept>.

</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Создание мультимаршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg>Creating a multiroute.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object} model</ph> Модель маршрута. Задается объектом с полями: referencePoints и params.
referencePoints - описание опорных точек мультимаршрута (обязательное поле);
params - параметры мультимаршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object} model</ph> Route model. Set as an object with the fields referencePoints and params. referencePoints is a description of the reference points of the multiroute (mandatory field); params is the parameters of the multiroute.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object}</ph> [options] Опции маршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object}</ph> [options] Route options.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Точки с указанными индексами будут трактоваться как транзитные.
</seg></tuv>
	<tuv xml:lang="en"><seg> The points with the specified indexes will be treated as thru points.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Радиус транзитных точек на маршруте.
</seg></tuv>
	<tuv xml:lang="en"><seg> The radius of the transit points on the route.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Радиус точечных маркеров в путевых точках.
</seg></tuv>
	<tuv xml:lang="en"><seg> The radius of the point markers at waypoints.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Примеры. Задание собственного отображения маршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Setting a custom route display</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>,
        <ph id="6">[#$dp7]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>,
        <ph id="6">[#$dp7]</ph>
    </seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Создаем собственный макет с информацией о выбранном геообъекте.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a custom layout with information about the selected geo object.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Флаг "raw" означает, что данные вставляют "как есть" без экранирования html.
</seg></tuv>
	<tuv xml:lang="en"><seg> The "raw" flag means that data is inserted "as is" without escaping HTML.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Устанавливаем режим открытия балуна. 
 В данном примере балун никогда не будет открываться в режиме панели.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the mode for opening the balloon. In this example, the balloon will never open in the panel mode.
</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Устанавливаем собственный макет.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting a custom layout.
</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Заполняем кластер геообъектами со случайными позициями.
</seg></tuv>
	<tuv xml:lang="en"><seg> Populating the cluster with geo objects with random positions.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Устаналиваем данные, которые будут отображаться в балуне.
</seg></tuv>
	<tuv xml:lang="en"><seg> Defining the data that will be displayed in the balloon.
</seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для объединения близко расположенных меток в группу (кластер) используется <bpt id="1">[#$dp9]</bpt>кластеризатор<ept id="1">&lt;/a&gt;</ept>.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        The <bpt id="1">[#$dp9]</bpt>clusterer<ept id="1">&lt;/a&gt;</ept> is used for combining closely positioned placemarks in a group (cluster).
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Кластеризатор реализуется классом <ph id="1">[#$dp12]</ph>. В качестве параметров конструктору можно передать опции кластеризатора: стиль отображения значка кластера, размер его ячейки и т. д. Список доступных опций можно посмотреть в соответствующем <bpt id="2">[#$dp13]</bpt>разделе<ept id="2">&lt;/sa&gt;</ept> справочника.</seg></tuv>
	<tuv xml:lang="en"><seg>
        The clusterer is implemented by the <ph id="1">[#$dp12]</ph> class. You can pass clusterer options to the constructor as parameters: the display style for the cluster icon, the cell size, and so on. For the list of available options, see the relevant <bpt id="2">[#$dp13]</bpt>section<ept id="2">&lt;/sa&gt;</ept> of the Reference Guide.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для добавления геообъектов в кластеризатор используется метод <bpt id="1">[#$dp16]</bpt>add<ept id="1">&lt;/sa&gt;</ept>. В качестве параметра может быть передан как отдельный геообъект, так и массив геообъектов.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        To add geo objects to the clusterer, use the <bpt id="1">[#$dp16]</bpt>add<ept id="1">&lt;/sa&gt;</ept> method. Either a separate geo object or an array of geo objects can be passed as the parameter.
    </seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>
        <ph id="4">[#$dp5]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>
        <ph id="4">[#$dp5]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Содержимое балуна может подгружаться динамически. Для этого в callback-функции AJAX-запроса нужно всего лишь
        переопределить свойство геообъекта, отвечающее за содержимое балуна.
        Балун автоматически обновит своё содержимое и размеры.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        The contents of the balloon can be loaded dynamically. In the callback function of the AJAX request, you need to override the property of the geo object responsible for the balloon content. The balloon will automatically update its content and size.
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В качестве примера AJAX-запроса использован механизм <bpt id="1">[#$dp9]</bpt>геокодирования<ept id="1">&lt;/a&gt;</ept> в API.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        As an example of an AJAX request, we use the <bpt id="1">[#$dp9]</bpt>geocoding<ept id="1">&lt;/a&gt;</ept> mechanism in the API.
    </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>






<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>
</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>
    Объекты, добавленные в ObjectManager, располагаются в коллекции ObjectManager.objects. Кластеры, образованные из
    добавленных меток, добавляются в коллекцию ObjectManager.clusters.
    Визуальное отображение меток создается по требованию асинхронно. Визуальным отображением меток и кластеров
    являются объекты, реализующие интерфейс <ph id="1">[#$dp10]</ph>. В частности, <ph id="2">[#$dp11]</ph>.
    Оверлеи помещаются в коллекции ObjectManager.objects.overlays и ObjectManager.clusters.overlays соответственно.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Objects added in ObjectManager are in the ObjectManager.objects collection. The clusters formed from the added placemarks are added to the ObjectManager.clusters collection. The visual display of placemarks is created asynchronously on request. Placemarks and clusters are visually displayed as objects that implement the <ph id="1">[#$dp10]</ph> interface. In particular, <ph id="2">[#$dp11]</ph>. Overlays are placed in the ObjectManager.objects.overlays and ObjectManager.clusters.overlays collections, respectively.
</seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Чтобы метки начали кластеризоваться, выставляем опцию.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting an option to make placemarks start clusterizing.
</seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>





<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> Copyright 2009-2012 by contributors, MIT License
 vim: ts=4 sts=4 sw=4 expandtab
</seg></tuv>
	<tuv xml:lang="en"><seg> Copyright 2009-2012 by contributors, MIT License vim: ts=4 sts=4 sw=4 expandtab
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Module systems magic dance
</seg></tuv>
	<tuv xml:lang="en"><seg> Module systems magic dance
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> RequireJS
</seg></tuv>
	<tuv xml:lang="en"><seg> RequireJS
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> YUI3
</seg></tuv>
	<tuv xml:lang="en"><seg> YUI3
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> CommonJS and &lt;script&gt; </seg></tuv>
	<tuv xml:lang="en"><seg> CommonJS and &lt;script&gt; </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Brings an environment as close to ECMAScript 5 compliance
as is possible with the facilities of erstwhile engines.

</seg></tuv>
	<tuv xml:lang="en"><seg>Brings an environment as close to ECMAScript 5 compliance as is possible with the facilities of erstwhile engines.

</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Annotated ES5: http://es5.github.com/ (specific links below)
ES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
Required reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/
</seg></tuv>
	<tuv xml:lang="en"><seg>Annotated ES5: http://es5.github.com/ (specific links below) ES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf Required reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> // Function
 ========
 
 </seg></tuv>
	<tuv xml:lang="en"><seg> // Function
 ========
 
 </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>ES-5 15.3.4.5
 http://es5.github.com/#x15.3.4.5
</seg></tuv>
	<tuv xml:lang="en"><seg>ES-5 15.3.4.5
 http://es5.github.com/#x15.3.4.5
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Let Target be the this value.
</seg></tuv>
	<tuv xml:lang="en"><seg>Let Target be this value.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>If IsCallable(Target) is false, throw a TypeError exception.
</seg></tuv>
	<tuv xml:lang="en"><seg>If IsCallable(Target) is false, throw a TypeError exception.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Let A be a new (possibly empty) internal list of all of the
   argument values provided after thisArg (arg1, arg2 etc), in order.
 XXX slicedArgs will stand in for "A" if used
</seg></tuv>
	<tuv xml:lang="en"><seg>Let A be a new (possibly empty) internal list of all of the
   argument values provided after thisArg (arg1, arg2 etc), in order.
 XXX slicedArgs will stand in for "A" if used
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Let F be a new native ECMAScript object.
</seg></tuv>
	<tuv xml:lang="en"><seg>Let F be a new native ECMAScript object.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Set the [[Prototype]] internal property of F to the standard
   built-in Function prototype object as specified in 15.3.3.1.
</seg></tuv>
	<tuv xml:lang="en"><seg>Set the [[Prototype]] internal property of F to the standard
   built-in Function prototype object as specified in 15.3.3.1.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Set the [[Call]] internal property of F as described in
   15.3.4.5.1.
</seg></tuv>
	<tuv xml:lang="en"><seg>Set the [[Call]] internal property of F as described in
   15.3.4.5.1.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Set the [[Construct]] internal property of F as described in
   15.3.4.5.2.
</seg></tuv>
	<tuv xml:lang="en"><seg>Set the [[Construct]] internal property of F as described in
   15.3.4.5.2.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Set the [[HasInstance]] internal property of F as described in
   15.3.4.5.3.
</seg></tuv>
	<tuv xml:lang="en"><seg>Set the [[HasInstance]] internal property of F as described in
   15.3.4.5.3.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> 15.3.4.5.2 [[Construct]]
 When the [[Construct]] internal method of a function object,
 F that was created using the bind function is called with a
 list of arguments ExtraArgs, the following steps are taken:
</seg></tuv>
	<tuv xml:lang="en"><seg> 15.3.4.5.2 [[Construct]]
 When the [[Construct]] internal method of a function object,
 F that was created using the bind function is called with a
 list of arguments ExtraArgs, the following steps are taken:
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Let target be the value of F's [[TargetFunction]]
   internal property.
</seg></tuv>
	<tuv xml:lang="en"><seg>Let target be the value of F's [[TargetFunction]]
   internal property.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>If target has no [[Construct]] internal method, a
   TypeError exception is thrown.
</seg></tuv>
	<tuv xml:lang="en"><seg>If target has no [[Construct]] internal method, a TypeError exception is thrown.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Let boundArgs be the value of F's [[BoundArgs]] internal
   property.
</seg></tuv>
	<tuv xml:lang="en"><seg>Let boundArgs be the value of F's [[BoundArgs]] internal property.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Let args be a new list containing the same values as the
   list boundArgs in the same order followed by the same
   values as the list ExtraArgs in the same order.
</seg></tuv>
	<tuv xml:lang="en"><seg>Let args be a new list containing the same values as the list boundArgs in the same order followed by the same values as the list ExtraArgs in the same order.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Return the result of calling the [[Construct]] internal
   method of target providing args as the arguments.
</seg></tuv>
	<tuv xml:lang="en"><seg>Return the result of calling the [[Construct]] internal method of target providing args as the arguments.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> 15.3.4.5.1 [[Call]]
 When the [[Call]] internal method of a function object, F,
 which was created using the bind function is called with a
 this value and a list of arguments ExtraArgs, the following
 steps are taken:
</seg></tuv>
	<tuv xml:lang="en"><seg> 15.3.4.5.1 [[Call]] When the [[Call]] internal method of a function object, F, which was created using the bind function is called with a this value and a list of arguments ExtraArgs, the following steps are taken:</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Let boundArgs be the value of F's [[BoundArgs]] internal
   property.
</seg></tuv>
	<tuv xml:lang="en"><seg>Let boundArgs be the value of F's [[BoundArgs]] internal property.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Let boundThis be the value of F's [[BoundThis]] internal
   property.
</seg></tuv>
	<tuv xml:lang="en"><seg>Let boundThis be the value of F's [[BoundThis]] internal property.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Let target be the value of F's [[TargetFunction]] internal
   property.
</seg></tuv>
	<tuv xml:lang="en"><seg>Let target be the value of F's [[TargetFunction]] internal property.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Let args be a new list containing the same values as the
   list boundArgs in the same order followed by the same
   values as the list ExtraArgs in the same order.
</seg></tuv>
	<tuv xml:lang="en"><seg>Let args be a new list containing the same values as the list boundArgs in the same order followed by the same values as the list ExtraArgs in the same order.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Return the result of calling the [[Call]] internal method
   of target providing boundThis as the this value and
   providing args as the arguments.
</seg></tuv>
	<tuv xml:lang="en"><seg>Return the result of calling the [[Call]] internal method of target providing boundThis as the this value and providing args as the arguments.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> equiv: target.call(this, ...boundArgs, ...args)
</seg></tuv>
	<tuv xml:lang="en"><seg> equiv: target.call(this, ...boundArgs, ...args)</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Clean up dangling references.
</seg></tuv>
	<tuv xml:lang="en"><seg> Clean up dangling references.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> XXX bound.length is never writable, so don't even try
             // 15. If the [[Class]] internal property of Target is "Function", then
     a. Let L be the length property of Target minus the length of A.
     b. Set the length own property of F to either 0 or L, whichever is
       larger.
</seg></tuv>
	<tuv xml:lang="en"><seg> XXX bound.length is never writable, so don't even try
             // 15. If the [[Class]] internal property of Target is "Function", then
     a. Let L be the length property of Target minus the length of A.
     b. Set the length own property of F to either 0 or L, whichever is
       larger.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Else set the length own property of F to 0.
</seg></tuv>
	<tuv xml:lang="en"><seg>Else set the length own property of F to 0.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Set the attributes of the length own property of F to the values
   specified in 15.3.5.1.
</seg></tuv>
	<tuv xml:lang="en"><seg>Set the attributes of the length own property of F to the values specified in 15.3.5.1.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> TODO
</seg></tuv>
	<tuv xml:lang="en"><seg> TODO</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Set the [[Extensible]] internal property of F to true.
</seg></tuv>
	<tuv xml:lang="en"><seg>Set the [[Extensible]] internal property of F to true.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> TODO
</seg></tuv>
	<tuv xml:lang="en"><seg> TODO</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
</seg></tuv>
	<tuv xml:lang="en"><seg>Let thrower be the [[ThrowTypeError]] function Object (13.2.3).</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Call the [[DefineOwnProperty]] internal method of F with
   arguments "caller", PropertyDescriptor <ph id="1">{[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false}</ph>, and
   false.
</seg></tuv>
	<tuv xml:lang="en"><seg>Call the [[DefineOwnProperty]] internal method of F with arguments "caller", PropertyDescriptor <ph id="1">{[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false}</ph>, and false.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Call the [[DefineOwnProperty]] internal method of F with
   arguments "arguments", PropertyDescriptor <ph id="1">{[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false}</ph>,
   and false.
</seg></tuv>
	<tuv xml:lang="en"><seg>Call the [[DefineOwnProperty]] internal method of F with
   arguments "arguments", PropertyDescriptor <ph id="1">{[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false}</ph>,
   and false.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> TODO
 NOTE Function objects created using Function.prototype.bind do not
 have a prototype property or the [[Code]], [[FormalParameters]], and
 [[Scope]] internal properties.
 XXX can't delete prototype in pure-js.
</seg></tuv>
	<tuv xml:lang="en"><seg> TODO
 NOTE Function objects created using Function.prototype.bind do not
 have a prototype property or the [[Code]], [[FormalParameters]], and
 [[Scope]] internal properties.
 XXX can't delete prototype in pure-js.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Return F.
</seg></tuv>
	<tuv xml:lang="en"><seg>Return F.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Shortcut to an often accessed properties, in order to avoid multiple
 dereference that costs universally.
 _Please note: Shortcuts are defined after `Function.prototype.bind` as we
 us it in defining shortcuts.
</seg></tuv>
	<tuv xml:lang="en"><seg> Shortcut to an often accessed properties, in order to avoid multiple
 dereference that costs universally.
 _Please note: Shortcuts are defined after `Function.prototype.bind` as we
 us it in defining shortcuts.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Having a toString local variable name breaks in Opera so use _toString.
</seg></tuv>
	<tuv xml:lang="en"><seg> Having a toString local variable name breaks in Opera so use _toString.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> If JS engine supports accessors creating shortcuts.
</seg></tuv>
	<tuv xml:lang="en"><seg> If JS engine supports accessors creating shortcuts.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> // Array
 =====
 
 </seg></tuv>
	<tuv xml:lang="en"><seg> // Array===== </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>ES5 15.4.4.12
 http://es5.github.com/#x15.4.4.12
 Default value for second param
 [bugfix, ielt9, old browsers]
 IE &lt; 9 bug: [1,2].splice(0).join("") == "" but should be "12"
</seg></tuv>
	<tuv xml:lang="en"><seg>ES5 15.4.4.12 http://es5.github.com/#x15.4.4.12 Default value for second param [bugfix, ielt9, old browsers] IE &lt; 9 bug: [1,2].splice(0).join("") == "" but should be "12"</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> else <ph id="1">{ IE8 bug }</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg> else <ph id="1">{ IE8 bug }</ph></seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Array.prototype.splice implementation
</seg></tuv>
	<tuv xml:lang="en"><seg> Array.prototype.splice implementation</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> delete all items from this array and replace it to 'left part' + _Array_slice_.call(arguments, 2) + 'right part'
</seg></tuv>
	<tuv xml:lang="en"><seg> delete all items from this array and replace it to 'left part' + _Array_slice_.call(arguments, 2) + 'right part'</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 15.4.4.12
 http://es5.github.com/#x15.4.4.13
 Return len+argCount.
 [bugfix, ielt8]
 IE &lt; 8 bug: [].unshift(0) == undefined but should be "1"
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 15.4.4.12 http://es5.github.com/#x15.4.4.13 Return len+argCount. [bugfix, ielt8] IE &lt; 8 bug: [].unshift(0) == undefined but should be "1"</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 15.4.3.2
 http://es5.github.com/#x15.4.3.2
 https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 15.4.3.2 http://es5.github.com/#x15.4.3.2 https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> The IsCallable() check in the Array functions
 has been replaced with a strict check on the
 internal class of the object to trap cases where
 the provided function was actually a regular
 expression literal, which in V8 and
 JavaScriptCore is a typeof "function".  Only in
 V8 are regular expression literals permitted as
 reduce parameters, so it is desirable in the
 general case for the shim to match the more
 strict and common behavior of rejecting regular
 expressions.
</seg></tuv>
	<tuv xml:lang="en"><seg> The IsCallable() check in the Array functions
 has been replaced with a strict check on the
 internal class of the object to trap cases where
 the provided function was actually a regular
 expression literal, which in V8 and
 JavaScriptCore is a typeof "function".  Only in
 V8 are regular expression literals permitted as
 reduce parameters, so it is desirable in the
 general case for the shim to match the more
 strict and common behavior of rejecting regular
 expressions.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 15.4.4.18
 http://es5.github.com/#x15.4.4.18
 https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 15.4.4.18 http://es5.github.com/#x15.4.4.18 https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Check failure of by-index access of string characters (IE &lt; 9)
 and failure of `0 in boxedString` (Rhino)
</seg></tuv>
	<tuv xml:lang="en"><seg> Check failure of by-index access of string characters (IE &lt; 9) and failure of `0 in boxedString` (Rhino)</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> If no callback function or if callback is not a callable function
</seg></tuv>
	<tuv xml:lang="en"><seg> If no callback function or if callback is not a callable function</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Invoke the callback function with call, passing arguments:
 context, property value, property key, thisArg object
 context
</seg></tuv>
	<tuv xml:lang="en"><seg> Invoke the callback function with call, passing arguments: context, property, value, property, key, thisArg object context</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 15.4.4.19
 http://es5.github.com/#x15.4.4.19
 https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 15.4.4.19 http://es5.github.com/#x15.4.4.19 https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> If no callback function or if callback is not a callable function
</seg></tuv>
	<tuv xml:lang="en"><seg> If no callback function or if callback is not a callable function</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 15.4.4.20
 http://es5.github.com/#x15.4.4.20
 https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 15.4.4.20 http://es5.github.com/#x15.4.4.20 https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> If no callback function or if callback is not a callable function
</seg></tuv>
	<tuv xml:lang="en"><seg> If no callback function or if callback is not a callable function</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 15.4.4.16
 http://es5.github.com/#x15.4.4.16
 https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 15.4.4.16 http://es5.github.com/#x15.4.4.16 https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> If no callback function or if callback is not a callable function
</seg></tuv>
	<tuv xml:lang="en"><seg> If no callback function or if callback is not a callable function</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 15.4.4.17
 http://es5.github.com/#x15.4.4.17
 https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 15.4.4.17 http://es5.github.com/#x15.4.4.17 https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> If no callback function or if callback is not a callable function
</seg></tuv>
	<tuv xml:lang="en"><seg> If no callback function or if callback is not a callable function</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 15.4.4.21
 http://es5.github.com/#x15.4.4.21
 https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 15.4.4.21 http://es5.github.com/#x15.4.4.21 https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> If no callback function or if callback is not a callable function
</seg></tuv>
	<tuv xml:lang="en"><seg> If no callback function or if callback is not a callable function</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> no value to return if no initial value and an empty array
</seg></tuv>
	<tuv xml:lang="en"><seg> no value to return if no initial value and an empty array</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> if array contains no values, no initial value to return
</seg></tuv>
	<tuv xml:lang="en"><seg> if array contains no values, no initial value to return</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 15.4.4.22
 http://es5.github.com/#x15.4.4.22
 https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 15.4.4.22 http://es5.github.com/#x15.4.4.22 https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> If no callback function or if callback is not a callable function
</seg></tuv>
	<tuv xml:lang="en"><seg> If no callback function or if callback is not a callable function</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> no value to return if no initial value, empty array
</seg></tuv>
	<tuv xml:lang="en"><seg> no value to return if no initial value, empty array</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> if array contains no values, no initial value to return
</seg></tuv>
	<tuv xml:lang="en"><seg> if array contains no values, no initial value to return</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 15.4.4.14
 http://es5.github.com/#x15.4.4.14
 https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 15.4.4.14 http://es5.github.com/#x15.4.4.14 https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> handle negative indices
</seg></tuv>
	<tuv xml:lang="en"><seg> handle negative indices</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 15.4.4.15
 http://es5.github.com/#x15.4.4.15
 https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 15.4.4.15 http://es5.github.com/#x15.4.4.15 https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> handle negative indices
</seg></tuv>
	<tuv xml:lang="en"><seg> handle negative indices</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> // Object
 ======
 
 </seg></tuv>
	<tuv xml:lang="en"><seg> // Object====== </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>ES5 15.2.3.14
 http://es5.github.com/#x15.2.3.14
</seg></tuv>
	<tuv xml:lang="en"><seg>ES5 15.2.3.14 http://es5.github.com/#x15.2.3.14</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
</seg></tuv>
	<tuv xml:lang="en"><seg> http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> // Date
 ====
 
 </seg></tuv>
	<tuv xml:lang="en"><seg> // Date==== </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>ES5 15.9.5.43
 http://es5.github.com/#x15.9.5.43
 This function returns a String value represent the instance in time
 represented by this Date object. The format of the String is the Date Time
 string format defined in 15.9.1.15. All fields are present in the String.
 The time zone is always UTC, denoted by the suffix Z. If the time value of
 this object is not a finite Number a RangeError exception is thrown.
</seg></tuv>
	<tuv xml:lang="en"><seg>ES5 15.9.5.43
 http://es5.github.com/#x15.9.5.43
 This function returns a String value represent the instance in time
 represented by this Date object. The format of the String is the Date Time
 string format defined in 15.9.1.15. All fields are present in the String.
 The time zone is always UTC, denoted by the suffix Z. If the time value of
 this object is not a finite Number a RangeError exception is thrown.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> see https://github.com/kriskowal/es5-shim/issues/111
</seg></tuv>
	<tuv xml:lang="en"><seg> see https://github.com/kriskowal/es5-shim/issues/111</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> the date time string format is specified in 15.9.1.15.
</seg></tuv>
	<tuv xml:lang="en"><seg> the date time string format is specified in 15.9.1.15.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> pad months, days, hours, minutes, and seconds to have two
 digits.
</seg></tuv>
	<tuv xml:lang="en"><seg> pad months, days, hours, minutes, and seconds to have two digits.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> pad milliseconds to have three digits.
</seg></tuv>
	<tuv xml:lang="en"><seg> pad milliseconds to have three digits.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 15.9.5.44
 http://es5.github.com/#x15.9.5.44
 This function provides a String representation of a Date object for use by
 JSON.stringify (15.12.3).
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 15.9.5.44 http://es5.github.com/#x15.9.5.44 This function provides a String representation of a Date object for use by JSON.stringify (15.12.3).</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> When the toJSON method is called with argument key, the following
 steps are taken:
</seg></tuv>
	<tuv xml:lang="en"><seg> When the toJSON method is called with argument key, the following steps are taken:</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Let O be the result of calling ToObject, giving it the this
 value as its argument.
</seg></tuv>
	<tuv xml:lang="en"><seg>Let O be the result of calling ToObject, giving it the this value as its argument.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Let tv be toPrimitive(O, hint Number).
</seg></tuv>
	<tuv xml:lang="en"><seg>Let tv be toPrimitive(O, hint Number).</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>If tv is a Number and is not finite, return null.
</seg></tuv>
	<tuv xml:lang="en"><seg>If tv is a Number and is not finite, return null.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Let toISO be the result of calling the [[Get]] internal method of
 O with argument "toISOString".
</seg></tuv>
	<tuv xml:lang="en"><seg>Let toISO be the result of calling the [[Get]] internal method of O with argument "toISOString".</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>If IsCallable(toISO) is false, throw a TypeError exception.
</seg></tuv>
	<tuv xml:lang="en"><seg>If IsCallable(toISO) is false, throw a TypeError exception.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Return the result of calling the [[Call]] internal method of
  toISO with O as the this value and an empty argument list.
</seg></tuv>
	<tuv xml:lang="en"><seg>Return the result of calling the [[Call]] internal method of toISO with O as the this value and an empty argument list.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> NOTE 1 The argument is ignored.
</seg></tuv>
	<tuv xml:lang="en"><seg> NOTE 1 The argument is ignored.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> NOTE 2 The toJSON function is intentionally generic; it does not
 require that its this value be a Date object. Therefore, it can be
 transferred to other kinds of objects for use as a method. However,
 it does require that any such object have a toISOString method. An
 object is free to use the argument key to filter its
 stringification.
</seg></tuv>
	<tuv xml:lang="en"><seg> NOTE 2 The toJSON function is intentionally generic; it does not
 require that its this value be a Date object. Therefore, it can be
 transferred to other kinds of objects for use as a method. However,
 it does require that any such object have a toISOString method. An
 object is free to use the argument key to filter its
 stringification.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 15.9.4.2
 http://es5.github.com/#x15.9.4.2
 based on work shared by Daniel Friesen (dantman)
 http://gist.github.com/303249
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 15.9.4.2 http://es5.github.com/#x15.9.4.2 based on work shared by Daniel Friesen (dantman) http://gist.github.com/303249</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> XXX global assignment won't work in embeddings that use
 an alternate object for the context.
</seg></tuv>
	<tuv xml:lang="en"><seg> XXX global assignment won't work in embeddings that use an alternate object for the context.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Date.length === 7
</seg></tuv>
	<tuv xml:lang="en"><seg> Date.length === 7</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> We explicitly pass it through parse:
</seg></tuv>
	<tuv xml:lang="en"><seg> We explicitly pass it through the parse:</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> We have to manually make calls depending on argument
 length here
</seg></tuv>
	<tuv xml:lang="en"><seg> We have to manually make calls depending on length argument here</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Prevent mixups with unfixed Date object
</seg></tuv>
	<tuv xml:lang="en"><seg> Prevent mixups with unfixed Date object</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> 15.9.1.15 Date Time String Format.
</seg></tuv>
	<tuv xml:lang="en"><seg> 15.9.1.15 Date Time String Format.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> 6-digit extended year
</seg></tuv>
	<tuv xml:lang="en"><seg> 6-digit year extended</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Copy any custom methods a 3rd party library may have added
</seg></tuv>
	<tuv xml:lang="en"><seg> Copy any custom methods a 3rd party library may have added</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Copy "native" methods explicitly; they may be non-enumerable
</seg></tuv>
	<tuv xml:lang="en"><seg> Copy "native" methods explicitly; they may be non-enumerable</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Upgrade Date.parse to handle simplified ISO 8601 strings
</seg></tuv>
	<tuv xml:lang="en"><seg> Upgrade Date.parse to handle simplified ISO 8601 strings</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> parse months, days, hours, minutes, seconds, and milliseconds
 provide default values if necessary
 parse the UTC offset component
</seg></tuv>
	<tuv xml:lang="en"><seg> parse months, days, hours, minutes, seconds, and milliseconds provide default values if necessary parse the UTC offset component</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> When time zone is missed, local offset should be used
 (ES 5.1 bug)
 see https://bugs.ecmascript.org/show_bug.cgi?id=112
</seg></tuv>
	<tuv xml:lang="en"><seg> When time zone is missed, local offset should be used (ES 5.1 bug) see https://bugs.ecmascript.org/show_bug.cgi?id=112</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 15.9.4.4
 http://es5.github.com/#x15.9.4.4
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 15.9.4.4 http://es5.github.com/#x15.9.4.4</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> // Number
 ======
 
 </seg></tuv>
	<tuv xml:lang="en"><seg> // Number====== </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>ES5.1 15.7.4.5
 http://es5.github.com/#x15.7.4.5
</seg></tuv>
	<tuv xml:lang="en"><seg>ES5.1 15.7.4.5 http://es5.github.com/#x15.7.4.5</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Hide these variables and functions
</seg></tuv>
	<tuv xml:lang="en"><seg> Hide these variables and functions</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Test for NaN and round fractionDigits down
</seg></tuv>
	<tuv xml:lang="en"><seg> Test for NaN and round down fractionDigits</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Test for NaN
</seg></tuv>
	<tuv xml:lang="en"><seg> Test for NaN</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> If it is too big or small, return the string value of the number
</seg></tuv>
	<tuv xml:lang="en"><seg> If it is too big or small, return the string value of the number</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> 1e-21 &lt; x &lt; 1e21
 -70 &lt; log2(x) &lt; 70
</seg></tuv>
	<tuv xml:lang="en"><seg> 1e-21 &lt; x &lt; 1e21 -70 &lt; log2(x) &lt; 70</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> -18 &lt; e &lt; 122
 x = z / 2 ^ e
</seg></tuv>
	<tuv xml:lang="en"><seg> -18 &lt; e &lt; 122 x = z / 2 ^ e</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> // String
 ======
 
</seg></tuv>
	<tuv xml:lang="en"><seg> // String======</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 15.5.4.14
 http://es5.github.com/#x15.5.4.14
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 15.5.4.14 http://es5.github.com/#x15.5.4.14</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
 Many browsers do not split properly with regular expressions or they
 do not perform the split correctly under obscure conditions.
 See http://blog.stevenlevithan.com/archives/cross-browser-split
 I've tested in many browsers and this seems to cover the deviant ones:
    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
       [undefined, "t", undefined, "e", ...]
    ''.split(/.?/) should be [], not [""]
    '.'.split(/()()/) should be ["."], not ["", "", "."]
</seg></tuv>
	<tuv xml:lang="en"><seg> [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
 Many browsers do not split properly with regular expressions or they
 do not perform the split correctly under obscure conditions.
 See http://blog.stevenlevithan.com/archives/cross-browser-split
 I've tested in many browsers and this seems to cover the deviant ones:
    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
       [undefined, "t", undefined, "e", ...]
    ''.split(/.?/) should be [], not [""]
    '.'.split(/()()/) should be ["."], not ["", "", "."]
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> If `separator` is not a regex, use native split
</seg></tuv>
	<tuv xml:lang="en"><seg> If `separator` is not a regex, use native split</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Make `global` and avoid `lastIndex` issues by working with a copy
</seg></tuv>
	<tuv xml:lang="en"><seg> Make `global` and avoid `lastIndex` issues by working with a copy</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Doesn't need flags gy, but they don't hurt
</seg></tuv>
	<tuv xml:lang="en"><seg> Doesn't need flags gy, but they don't hurt</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> `separator.lastIndex` is not reliable cross-browser
</seg></tuv>
	<tuv xml:lang="en"><seg> `separator.lastIndex` is not reliable cross-browser</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Fix browsers whose `exec` methods don't consistently return `undefined` for
 nonparticipating capturing groups
</seg></tuv>
	<tuv xml:lang="en"><seg> Fix browsers whose `exec` methods don't consistently return `undefined` for nonparticipating capturing groups</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> [bugfix, chrome]
 If separator is undefined, then the result array contains just one String,
 which is the this value (converted to a String). If limit is not undefined,
 then the output array is truncated so that it contains no more than limit
 elements.
 "0".split(undefined, 0) -&gt; []
</seg></tuv>
	<tuv xml:lang="en"><seg> [bugfix, chrome]
 If separator is undefined, then the result array contains just one String,
 which is the this value (converted to a String). If limit is not undefined,
 then the output array is truncated so that it contains no more than limit
 elements.
 "0".split(undefined, 0) -&gt; []
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ECMA-262, 3rd B.2.3
 Note an ECMAScript standart, although ECMAScript 3rd Edition has a
 non-normative section suggesting uniform semantics and it should be
 normalized across all browsers
 [bugfix, IE lt 9] IE &lt; 9 substr() with negative value not working in IE
</seg></tuv>
	<tuv xml:lang="en"><seg> ECMA-262, 3rd B. 2.3 Note an ECMAScript standard, although ECMAScript 3rd Edition has a non-normative section suggesting uniform semantics and it should be normalized across all browsers [bugfix, lt IE 9] IE &lt; 9 substr() with negative value not working in IE</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Get the substring of a string
</seg></tuv>
	<tuv xml:lang="en"><seg>Get the substring of a string</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param    </ph><ph id="2">{integer} start</ph>   where to start the substring
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param    </ph><ph id="2">{integer} start</ph> where to start the substring</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param    </ph><ph id="2">{integer} length</ph>  how many characters to return
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param    </ph><ph id="2">{integer} length</ph>  how many characters to return
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@return</ph> <ph id="2">{string}</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@return</ph> <ph id="2">{string}</ph>
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 15.5.4.20
 http://es5.github.com/#x15.5.4.20
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 15.5.4.20 http://es5.github.com/#x15.5.4.20</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> http://blog.stevenlevithan.com/archives/faster-trim-javascript
 http://perfectionkills.com/whitespace-deviations/
</seg></tuv>
	<tuv xml:lang="en"><seg> http://blog.stevenlevithan.com/archives/faster-trim-javascript http://perfectionkills.com/whitespace-deviations/</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> // Util
 ======
 
 </seg></tuv>
	<tuv xml:lang="en"><seg> // Util====== </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>ES5 9.4
 http://es5.github.com/#x9.4
 http://jsperf.com/to-integer
</seg></tuv>
	<tuv xml:lang="en"><seg>ES5 9.4 http://es5.github.com/#x9.4 http://jsperf.com/to-integer</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> ES5 9.9
 http://es5.github.com/#x9.9
</seg></tuv>
	<tuv xml:lang="en"><seg> ES5 9.9 http://es5.github.com/#x9.9</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>










<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg>Создание мультимаршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg>Creating a multiroute.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object} model</ph> Модель мультимаршрута. Задается объектом с полями:
referencePoints - описание опорных точек мультимаршрута (обязательное поле);
params - параметры маршрутизации.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object} model</ph> The model of a multiroute. It is defined by an object with fields: referencePoints - a description of the multiroute reference points (mandatory field); params - routing parameters.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object}</ph> [options] Опции маршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object}</ph> [options] Route options.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Функция устанавливает параметры маршрутизации.
</seg></tuv>
	<tuv xml:lang="en"><seg>The function sets the routing parameters.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Тип маршрутизации - на общественном транспорте.
</seg></tuv>
	<tuv xml:lang="en"><seg> Type of routing - on public transport.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Тип маршрутизации - на автомобиле.
</seg></tuv>
	<tuv xml:lang="en"><seg> Type of routing - by car.
</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для того чтобы построить маршрут на общественном транспорте, необходимо передать в параметрах маршрутизации
        поле routingMode: 'masstransit'. По умолчанию при создании мультимаршрута данное поле принимает значение 'auto' (на автомобиле).
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        In order to build a route on public transport, you need to pass the routingMode: 'masstransit' field in the route parameters. By default, when creating a multiroute, this field is set to 'auto' (by car).
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Подробнее о параметрах и опциях мультимаршрутизатора описано в примере <bpt id="1">[#$dp8]</bpt>Построение мультимаршрута<ept id="1">&lt;/a&gt;</ept>.</seg></tuv>
	<tuv xml:lang="en"><seg>For more information about multiroute parameters and options, see the example <bpt id="1">[#$dp8]</bpt>Planning a multiroute<ept id="1">&lt;/a&gt;</ept>.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>








<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Провайдер ищет по полю text стандартным методом String.ptototype.indexOf.
</seg></tuv>
	<tuv xml:lang="en"><seg> The provider searches the "text" field using the standard method String.ptototype.indexOf.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Сколько результатов нужно пропустить.
</seg></tuv>
	<tuv xml:lang="en"><seg> How many results to skip.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Количество возвращаемых результатов.
</seg></tuv>
	<tuv xml:lang="en"><seg> The number of results to return.</seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> При формировании ответа можно учитывать offset и limit.
</seg></tuv>
	<tuv xml:lang="en"><seg> When forming the response, "offset" and "limit" can be taken into account.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Добавляем точки в результирующую коллекцию.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding points to the resulting collection.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Геообъекты поисковой выдачи.
</seg></tuv>
	<tuv xml:lang="en"><seg> Geo objects in search results.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Метаинформация ответа.
</seg></tuv>
	<tuv xml:lang="en"><seg> Response metainformation.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Строка обработанного запроса.
</seg></tuv>
	<tuv xml:lang="en"><seg> String with the processed request.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Количество найденных результатов.
</seg></tuv>
	<tuv xml:lang="en"><seg> The number of found results.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Количество возвращенных результатов.
</seg></tuv>
	<tuv xml:lang="en"><seg> The number of returned results.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Количество пропущенных результатов.
</seg></tuv>
	<tuv xml:lang="en"><seg> The number of skipped results.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Возвращаем объект-обещание.
</seg></tuv>
	<tuv xml:lang="en"><seg> Returning a promise object.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Добавляем коллекцию меток на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding a collection of placemarks to the map.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Заполняем коллекцию данными.
</seg></tuv>
	<tuv xml:lang="en"><seg> Populating the collection with data.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Заменяем стандартный провайдер данных (геокодер) нашим собственным.
</seg></tuv>
	<tuv xml:lang="en"><seg> Replacing the standard data provider (geocoder) with our own.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Не будем показывать еще одну метку при выборе результата поиска,
 т.к. метки коллекции myCollection уже добавлены на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> We won't show another placemark when selecting a search result, because the placemarks in the myCollection collection have already been added to the map.</seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>








<tu>
	<tuv xml:lang="ru"><seg> По полю skip определяем, что это не дозагрузка данных.
 По getRusultsCount определяем, что есть хотя бы 1 результат.
</seg></tuv>
	<tuv xml:lang="en"><seg> The "skip" field indicates that this is not data uploading. The "getRusultsCount" field shows that there is at least 1 result.</seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg> Создаем карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating the map.</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> Содержимое хинта.
</seg></tuv>
	<tuv xml:lang="en"><seg> The contents of the hint.</seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> Цвет обводки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Stroke color.
</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    Часто возникает задача проложить маршрут между заданными точками, а затем проанализировать, в какие области или города попадают сегменты этого маршрута.
    В данном примере по заранее подготовленным данным создается многоугольник, описывающий МКАД.
    После получения маршрута делается проверка на попадание его сегментов в этот многоугольник с помощью метода
    <bpt id="1">[#$dp9]</bpt>searchInside<ept id="1">&lt;/sa&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>It is often necessary to draw a route between specified points, and then analyze in what areas or cities the segments of this route fall on.
 In this example, prepared data is used for creating a polygon defining the MKAD. After the route is received, a check is performed for whether its segments fall within this polygon using the method <bpt id="1">[#$dp9]</bpt>searchInside<ept id="1">&lt;/sa&gt;</ept>.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    С помощью объекта <ph id="1">[#$dp12]</ph> можно задавать опции или данные
    сразу группе геообъектов. Здесь показано, как сегменты маршрута, лежащие внутри и снаружи кольцевой автодороги,
    раскрашиваются в разные цвета.
</seg></tuv>
	<tuv xml:lang="en"><seg>Using the <ph id="1">[#$dp12]</ph> object, you can set options or data for a group of geo objects at once. As shown here, the route segments that lie inside and outside the ring road are drawn in different colors.</seg></tuv></tu>













<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>
</seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>












<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Фильтр по цветам <ph id="1">&lt;br&gt;</ph>
        <ph id="2">&lt;input type="checkbox" id="red" checked="true"&gt;</ph>Красные<it id="7" pos="close">&lt;/input&gt;</it><ph id="3">&lt;br&gt;</ph>
        <ph id="4">&lt;input type="checkbox" id="green" checked="true"&gt;</ph>Зеленые<it id="8" pos="close">&lt;/input&gt;</it><ph id="5">&lt;br&gt;</ph>
        <ph id="6">&lt;input type="checkbox" id="yellow" checked="true"&gt;</ph>Желтые<it id="9" pos="close">&lt;/input&gt;</it>
    </seg></tuv>
	<tuv xml:lang="en"><seg>Filter by color <ph id="1">&lt;br&gt;</ph>
<ph id="2">&lt;input type="checkbox" id="red" checked="true"&gt;</ph>Red<it id="7" pos="close">&lt;/input&gt;</it><ph id="3">&lt;br&gt;</ph>
<ph id="4">&lt;input type="checkbox" id="green" checked="true"&gt;</ph>Green<it id="8" pos="close">&lt;/input&gt;</it><ph id="5">&lt;br&gt;</ph>
<ph id="6">&lt;input type="checkbox" id="yellow" checked="true"&gt;</ph>Yellow<it id="9" pos="close">&lt;/input&gt;</it>
 </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Фильтр по геометриям <ph id="1">&lt;br&gt;</ph>
        <ph id="2">&lt;input type="checkbox" id="point" checked="true"&gt;</ph>Точки<it id="7" pos="close">&lt;/input&gt;</it><ph id="3">&lt;br&gt;</ph>
        <ph id="4">&lt;input type="checkbox" id="polygon" checked="true"&gt;</ph>Многоугольники<it id="8" pos="close">&lt;/input&gt;</it><ph id="5">&lt;br&gt;</ph>
        <ph id="6">&lt;input type="checkbox" id="circle" checked="true"&gt;</ph>Круги<it id="9" pos="close">&lt;/input&gt;</it>
    </seg></tuv>
	<tuv xml:lang="en"><seg>Filter by geometry <ph id="1">&lt;br&gt;</ph>
<ph id="2">&lt;input type="checkbox" id="point" checked="true"&gt;</ph>Points<it id="7" pos="close">&lt;/input&gt;</it><ph id="3">&lt;br&gt;</ph>
<ph id="4">&lt;input type="checkbox" id="polygon" checked="true"&gt;</ph>Polygons<it id="8" pos="close">&lt;/input&gt;</it><ph id="5">&lt;br&gt;</ph>
<ph id="6">&lt;input type="checkbox" id="circle" checked="true"&gt;</ph>Circles<it id="9" pos="close">&lt;/input&gt;</it>
 </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <bpt id="1">[#$dp7]</bpt>Макеты<ept id="1">&lt;/a&gt;</ept> объектов можно
        создавать с помощью фабрики <ph id="2">[#$dp8]</ph>,
        используя текcтовые шаблоны.
    </seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp7]</bpt>Layouts<ept id="1">&lt;/a&gt;</ept> can be created using the <ph id="2">[#$dp8]</ph> factory using text templates. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В данном примере создается пользовательский макет
        <bpt id="1">[#$dp11]</bpt>элемента управления масштабом карты<ept id="1">&lt;/sa&gt;</ept>.
        Макет элемента управления строится на основе его данных, состояния и опций.
        Макет автоматически перестраивается при изменении значений полей,
        состояния или опций, которые используются в его текстовом шаблоне.
    </seg></tuv>
	<tuv xml:lang="en"><seg>This example creates a custom layout for the <bpt id="1">[#$dp11]</bpt>map zoom control<ept id="1">&lt;/sa&gt;</ept>. 
The layout of the control is based on its data, status, and options. 
The layout is automatically rebuilt when changes are made to the values of fields, states, or options that are used in its text template. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В ответ на действия пользователя (клик мышкой по кнопке) макет может генерировать
        специальные события, описанные в его интерфейсе. Элемент управления слушает
        эти события на макете и пытается изменить свое состояние, данные или опции.
        После того, как элемент управления осуществил изменения, макет перестраивается
        на основе обновленных данных.
    </seg></tuv>
	<tuv xml:lang="en"><seg>In response to a user action (a mouse click on the button), the layout can generate special events that are defined in its interface. The control listens to these events on the layout and tries to change its state, data, or options. After the control has implemented changes, the layout is rebuilt based on the updated data. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Список событий, на которые реагирует ползунок маштаба, описан в интерфейсе
        <ph id="1">[#$dp16]</ph>.
    </seg></tuv>
	<tuv xml:lang="en"><seg>The list of events that the zoom slider responds to is provided in the <ph id="1">[#$dp16]</ph> interface. </seg></tuv></tu>









<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>, 
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>,
        <ph id="4">[#$dp5]</ph>, 
        <ph id="5">[#$dp6]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>,
        <ph id="5">[#$dp6]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <bpt id="1">[#$dp8]</bpt>Макеты<ept id="1">&lt;/a&gt;</ept>
        объектов можно создавать с помощью фабрики <ph id="2">[#$dp9]</ph>,
        используя текcтовые шаблоны.
    </seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp8]</bpt>Layouts<ept id="1">&lt;/a&gt;</ept> of objects can be created using the <ph id="2">[#$dp9]</ph> factory, using text templates. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В данном примере создается адаптивный пользовательский макет <bpt id="1">[#$dp12]</bpt>кнопки<ept id="1">&lt;/sa&gt;</ept>.
        Макет элемента управления строится на основе его данных, состояния и опций.
    </seg></tuv>
	<tuv xml:lang="en"><seg>This example creates an adaptive custom <bpt id="1">[#$dp12]</bpt>button<ept id="1">&lt;/sa&gt;</ept> layout. The layout of the control is based on its data, status, and options. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Макет автоматически перестраивается при изменении значений полей,
        состояния или опций, которые используются в его текстовом шаблоне.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The layout is automatically adjusted when changes are made to the values of fields, states, or options that are used in its text template. </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Создаем собственный макет с информацией о выбранном геообъекте.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a custom layout with information about the selected geo object.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Флаг "raw" означает, что данные вставляют "как есть" без экранирования html.
</seg></tuv>
	<tuv xml:lang="en"><seg> The "raw" flag means that data is inserted "as is" without escaping HTML.
</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Устанавливаем собственный макет.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting a custom layout.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Устанавливаем режим открытия балуна. 
 В данном примере балун никогда не будет открываться в режиме панели.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the mode for opening the balloon. In this example, the balloon will never open in the panel mode.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Устанавливаем размеры макета контента балуна (в пикселях).
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the size of the balloon content layout (in pixels).
</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Заполняем кластер геообъектами со случайными позициями.
</seg></tuv>
	<tuv xml:lang="en"><seg> Populating the cluster with geo objects with random positions.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Устаналиваем данные, которые будут отображаться в балуне.
</seg></tuv>
	<tuv xml:lang="en"><seg> Defining the data that will be displayed in the balloon.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>,
        <ph id="6">[#$dp7]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>,
        <ph id="6">[#$dp7]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
		В примере используется макет балуна кластера "cluster#balloonAccordion".<ph id="1">&lt;br/&gt;</ph>
		В макете выводится список геообъектов, а после клика по элементу происходит отображение информации о геообъекте.<ph id="2">&lt;br/&gt;</ph>
		Информация о выбранном геообъекте задается отдельным макетом 
		и может быть настроена при помощи опции 'clusterBalloonItemContentLayout'.<ph id="3">&lt;br/&gt;</ph>
		В данном примере задается собственный макет с информацией о геообъекте.<ph id="4">&lt;br/&gt;</ph>
	<ph id="5">&lt;br/&gt;</ph>
        <bpt id="6">[#$dp9]</bpt>Макеты<ept id="6">&lt;/a&gt;</ept>
        объектов можно создавать с помощью фабрики <ph id="7">[#$dp10]</ph>,
        используя текcтовые шаблоны. <ph id="8">&lt;br/&gt;</ph>
		Текстовые шаблоны формируют html-содержимое макета на основе хэша с данными,
        передаваемого в конструктор макета. <ph id="9">&lt;br/&gt;</ph>
		В данном примере поставщик данных - это геообъект.
</seg></tuv>
	<tuv xml:lang="en"><seg>The example uses the layout of the cluster balloon "cluster#balloonAccordion".<ph id="1">&lt;br/&gt;</ph>
 The layout outputs a list of geo objects, and after clicking on an item, information is displayed about the geo object.<ph id="2">&lt;br/&gt;</ph>
 Information about the selected geo object is defined as a separate layout and can be configured using the option 'clusterBalloonItemContentLayout' option.<ph id="3">&lt;br/&gt;</ph>
 This example defines a custom layout with information about the geo object.<ph id="4">&lt;br/&gt;</ph>
<ph id="5">&lt;br/&gt;</ph>
<bpt id="6">[#$dp9]</bpt>Layouts<ept id="6">&lt;/a&gt;</ept> can be created using the <ph id="7">[#$dp10]</ph> factory using text templates.<ph id="8">&lt;br/&gt;</ph>
 Text templates generate HTML content based on a hash with data that is passed to the layout constructor.<ph id="9">&lt;br/&gt;</ph> In this example, the data provider is a geo object.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu>












<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В примере показано, как создавать собственные элементы управления. Класс элемента управления
        должен реализовывать интерфейс <bpt id="1">[#$dp6]</bpt>IControl<ept id="1">&lt;/a&gt;</ept>.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The example shows how to create custom controls. The control class must implement the <bpt id="1">[#$dp6]</bpt>IControl<ept id="1">&lt;/a&gt;</ept> interface. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для ускорения разработки, можно отнаследовать класс элемента управления от класса <bpt id="1">[#$dp9]</bpt>collection.Item<ept id="1">&lt;/a&gt;</ept>.
    </seg></tuv>
	<tuv xml:lang="en"><seg>To speed development, you can inherit the control class from the <bpt id="1">[#$dp9]</bpt>collection.Item<ept id="1">&lt;/a&gt;</ept> class. </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>











<tu>
	<tuv xml:lang="ru"><seg>
        <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>, <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>,
        <bpt id="3">[#$dp4]</bpt>Placemark<ept id="3">&lt;/a&gt;</ept>, <bpt id="4">[#$dp5]</bpt>option.presetStorage<ept id="4">&lt;/a&gt;</ept>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>, <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>,
        <bpt id="3">[#$dp4]</bpt>Placemark<ept id="3">&lt;/a&gt;</ept>, <bpt id="4">[#$dp5]</bpt>option.presetStorage<ept id="4">&lt;/a&gt;</ept>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В данном примере на карту добавлена метка, при клике на которой открывается балун-панель с заданным содержимым.
    </seg></tuv>
	<tuv xml:lang="en"><seg>In this example, a placemark is added to the map that, when clicked, opens a balloon panel with the specified content. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для задания стиля метки из <bpt id="1">[#$dp9]</bpt>набора встроенных стилей<ept id="1">&lt;/a&gt;</ept> используется опция <bpt id="2">&lt;b&gt;</bpt>preset<ept id="2">&lt;/b&gt;</ept>.
        В API предустановлено пять различных стилей для меток (в скобках указаны соответствующие ключи):
        </seg></tuv>
	<tuv xml:lang="en"><seg>To set the placemark style from a <bpt id="1">[#$dp9]</bpt>set of built-in styles<ept id="1">&lt;/a&gt;</ept>, use the <bpt id="2">&lt;b&gt;</bpt>preset<ept id="2">&lt;/b&gt;</ept> option. The API has five preset styles for placemarks (the corresponding keys are shown in parentheses): </seg></tuv></tu>





<tu>
	<tuv xml:lang="ru"><seg>
        Для каждого стиля на выбор предоставлено 16 цветов. API позволяет задавать меткам также собственные цвета для всех стилей, кроме 'islands#stretchyIcon'.
        Как задавать меткам собственные цвета см. в следующем <bpt id="1">[#$dp23]</bpt>примере<ept id="1">&lt;/a&gt;</ept>.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        For each style there are 16 colors. The API allows you to also specify custom colors for placemarks for all styles, except 'islands#stretchyIcon'.
       For information on how to set custom colors for placemarks, see the following <bpt id="1">[#$dp23]</bpt>example<ept id="1">&lt;/a&gt;</ept>.
    </seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>Опции запроса
</seg></tuv>
	<tuv xml:lang="en"><seg>Request options</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>








<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>
</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    TEMPLATE DOC
</seg></tuv>
	<tuv xml:lang="en"><seg>TEMPLATE DOC</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Примеры. TEMPLATE TITLE</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. TEMPLATE TITLE</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    TEMPLATE BODY
    </seg></tuv>
	<tuv xml:lang="en"><seg>TEMPLATE BODY </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Данный пример демонстрирует, как создать карту, изначально отцентрированную по местоположению пользователя.
    </seg></tuv>
	<tuv xml:lang="en"><seg> This example demonstrates how to create a map that is initially centered on the user's location. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для определения местоположения используется метод get функции <bpt id="1">[#$dp9]</bpt>geolocation<ept id="1">&lt;/a&gt;</ept>. В его параметрах можно указать предпочтительный способ
        определения местоположения (по IP или с помощью <bpt id="2">[#$dp10]</bpt>Geolocation API<ept id="2">&lt;/a&gt;</ept>), время ожидание ответа
        и др. Подробнее см. в <bpt id="3">[#$dp11]</bpt>описании метода<ept id="3">&lt;/a&gt;</ept>.
    </seg></tuv>
	<tuv xml:lang="en"><seg>The "get" method of the <bpt id="1">[#$dp9]</bpt>geolocation<ept id="1">&lt;/a&gt;</ept> function is used for detecting the location. In the parameters, you can set the preferred method of location detection (by IP or using the <bpt id="2">[#$dp10]</bpt>Geolocation API<ept id="2">&lt;/a&gt;</ept>), the time to wait for a response, and so on. For more information, see the <bpt id="3">[#$dp11]</bpt>description of the method<ept id="3">&lt;/a&gt;</ept>. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        При вызове данного метода браузер пытается определить географическое положение пользователя. В случае
        успеха результат записывается в поле карты <bpt id="1">[#$dp14]</bpt>geoObjects<ept id="1">&lt;/a&gt;</ept>, в противном случае возникает сообщение об ошибке.
     </seg></tuv>
	<tuv xml:lang="en"><seg>When calling this method, the browser tries to determine the geographical position of the user. If successful, the result is written in the <bpt id="1">[#$dp14]</bpt>geoObjects<ept id="1">&lt;/a&gt;</ept> map field; otherwise, there is an error message. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
         В данном примере, если местоположение определить не удалось, создается карта с центром в Москве.
    </seg></tuv>
	<tuv xml:lang="en"><seg> In this example, if the location cannot be detected, a map is created with the center in Moscow. </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>






















<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В примере показано, как на основе класса линии <ph id="1">[#$dp6]</ph> создать модуль для рисования
        стрелок на карте.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The example shows how to create a module based on the <ph id="1">[#$dp6]</ph> line class for drawing arrows on the map. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В примере создаются два пользовательских модуля - один отвечает за класс объекта-стрелки, второй модуль
        включает в себя визуальное отображение стрелки - класс, реализующий интерфейс <ph id="1">[#$dp9]</ph>.
        В примере модули располагаются в одном файле. При разработке проекта рекомендуется помещать модули в отдельные файлы.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The example creates two custom modules - one is responsible for the arrow object class, and the second module includes a visual display of the arrow - a class that implements the <ph id="1">[#$dp9]</ph> interface.
 In the example, the modules are located in the same file. During project development, it is recommended to place the modules in separate files. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для объединения близко расположенных меток в группу (кластер) используется <bpt id="1">[#$dp8]</bpt>кластеризатор<ept id="1">&lt;/a&gt;</ept>.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The <bpt id="1">[#$dp8]</bpt>clusterer<ept id="1">&lt;/a&gt;</ept> is used for combining placemarks that are near each other in a group (cluster). </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Кластеризатор реализуется классом <ph id="1">[#$dp11]</ph>. В качестве параметров конструктору можно передать опции кластеризатора: стиль отображения значка кластера, размер его ячейки и т. д. Список доступных опций можно посмотреть в соответствующем <bpt id="2">[#$dp12]</bpt>разделе<ept id="2">&lt;/sa&gt;</ept> справочника.</seg></tuv>
	<tuv xml:lang="en"><seg> Clusterization is implemented by the <ph id="1">[#$dp11]</ph> class. As parameters to the constructor, you can pass clusterer options: the style for displaying the cluster icon, the size of its cell, and so on.  For the list of available options, see the relevant <bpt id="2">[#$dp12]</bpt>section<ept id="2">&lt;/sa&gt;</ept> of the reference guide.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для добавления геообъектов в кластеризатор используется метод <bpt id="1">[#$dp15]</bpt>add<ept id="1">&lt;/sa&gt;</ept>. В качестве параметра может быть передан как отдельный геообъект, так и массив геообъектов.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        To add geo objects to the clusterer, use the <bpt id="1">[#$dp15]</bpt>add<ept id="1">&lt;/sa&gt;</ept> method. Either a separate geo object or an array of geo objects can be passed as the parameter.
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В примере показано, как изменить цвет иконки или кластера при наведении.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The example shows how to change the color of the icon or cluster on mouse hover. </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>






<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>,
        <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>
        <bpt id="3">[#$dp4]</bpt>control.Manager<ept id="3">&lt;/a&gt;</ept>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>,
        <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>
        <bpt id="3">[#$dp4]</bpt>control.Manager<ept id="3">&lt;/a&gt;</ept>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Каждый элемент управления реализуется отдельным классом из пространства имен control
        (например, <bpt id="1">[#$dp6]</bpt>control.TrafficControl<ept id="1">&lt;/a&gt;</ept>). Ссылка на элементы управления содержится в поле
        <bpt id="2">[#$dp7]</bpt>controls<ept id="2">&lt;/a&gt;</ept> карты. Для добавления или удаления элемента управления используются методы add и remove соответственно.
    </seg></tuv>
	<tuv xml:lang="en"><seg>Each control is implemented by a separate class from the control namespace (e.g. <bpt id="1">[#$dp6]</bpt>control.TrafficControl<ept id="1">&lt;/a&gt;</ept>). The reference to the controls is contained in the <bpt id="2">[#$dp7]</bpt>controls<ept id="2">&lt;/a&gt;</ept> field of the map. To add or remove a control, use the "add" and "remove" methods, respectively. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В API 2.1 добавлять элементы управления на карту можно также через ее <bpt id="1">[#$dp10]</bpt>параметры<ept id="1">&lt;/a&gt;</ept>.
        Это означает, что при инициализации карты в поле controls можно указать ключ соответствующего элемента управления.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
In the API 2.1, controls can also be added to the map through its <bpt id="1">[#$dp10]</bpt>parameters<ept id="1">&lt;/a&gt;</ept>. This means that when you initialize the map, you can specify the key of the corresponding control in the "controls" field. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
         Добавлять можно как отдельные элементы управления, так и сразу их набор. В API 2.1 встроено три стандартных набора элементов управления, доступные
         по следующим ключам:
        </seg></tuv>
	<tuv xml:lang="en"><seg> You can add individual controls, or an entire set at once. The API 2.1 has three standard sets of controls available using the following keys: </seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg>
        Наборы отличаются количеством входящих в них элементов управления, а также размером соответствующих кнопок. В зависимости от размеров карты может быть добавлен тот или иной набор.
    При создании карты автоматически добавляется набор 'mediumMapDefault'. Однако, если карта достаточно больших размеров,
    то целесообразно добавить 'largeMapDefaultSet'. Если при изменении размеров карты элементы управления
    не будут помещаться на карте, API автоматически уменьшит их иконки.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The sets differ in the number of controls included in them, as well as the size of the buttons. A set can be added depending on the size of the map. When the map is created, the 'mediumMapDefault' set is added automatically. However, if the map is fairly large, it is advisable to add 'largeMapDefaultSet'. If controls will not fit on the map when it is resized, the API will automatically reduce the size of icons. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Подробнее о доступных наборах элементов управления см. в <bpt id="1">[#$dp24]</bpt>справочнике<ept id="1">&lt;/a&gt;</ept>.
    </seg></tuv>
	<tuv xml:lang="en"><seg> For more information about the available sets of controls, see the <bpt id="1">[#$dp24]</bpt>reference guide<ept id="1">&lt;/a&gt;</ept>. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Примеры. Собственное изображение иконок меток мультимаршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Custom placemark icon image for a multiroute</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Иконкам меток мультимаршрутизатора можно задавать собственные изображения.
    </seg></tuv>
	<tuv xml:lang="en"><seg> Icons for multirouter placemarks can be set to custom images. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Чтобы установить нужное изображение, задайте для метки следующие опции:
        </seg></tuv>
	<tuv xml:lang="en"><seg> To set a desired image, specify the following options for the placemark: </seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg>
        Обратите внимание, что опции должны быть указаны с префиксами. Например, если задаются опции для
        путевых точек, нужно использовать префикс wayPoint, для транзитных - viaPoint. Для стартовой и конечной точек маршрута
    используются префиксы wayPointStart и wayPointFinish соответственно.</seg></tuv>
	<tuv xml:lang="en"><seg> Please note that options must be specified with prefixes. For example, if you set the options for waypoints, you need to use the wayPoint prefix, or the viaPoint prefix for a throughpoint. For the start and end points of the route, use the prefixes wayPointStart and wayPointFinish, respectively.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Также могут быть установлены опции iconImageSize (ширина и высота изображения в пикселях), iconImageOffset (сдвиг левого верхнего угла иконки относительно точки привязки) и iconImageClipRect (координаты отображаемой области исходного изображения в пикселях).
    </seg></tuv>
	<tuv xml:lang="en"><seg> You can also set the options iconImageSize (width and height of the image in pixels), iconImageOffset (offset of the upper left corner of the icon relative to the anchor point), and iconImageClipRect (coordinates of the visible area of the original image in pixels). </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Создание мультимаршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg>Creating a multiroute.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Макет геообъекта.
</seg></tuv>
	<tuv xml:lang="en"><seg>Geo object layout.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        При добавлении большого числа меток на карту их кластеризация позволяет избежать большой потери производительности браузера при их отображении.
    </seg></tuv>
	<tuv xml:lang="en"><seg> When adding a large number of placemarks to the map, clustering them helps avoid a large loss in browser performance when displaying them. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для сравнения в данном примере на карту можно добавить метки, объединенные как в кластеры, так и в обычные коллекции.
    </seg></tuv>
	<tuv xml:lang="en"><seg> For comparison, in this example, you can add placemarks to the map both combined in clusters and in regular collections. </seg></tuv></tu>























<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>,
        <ph id="4">[#$dp5]</ph>,
        <ph id="5">[#$dp6]</ph>,
        <ph id="6">[#$dp7]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>,
        <ph id="4">[#$dp5]</ph>,
        <ph id="5">[#$dp6]</ph>,
        <ph id="6">[#$dp7]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Часто при работе с картой приходится загружать большой объем дополнительных данных (текстовая информация, картинки и пр.).
        При этом загруженная информация не всегда используется пользователем. Например, когда на карте
        отображены сотни меток, и балун каждой из них содержит большой объем текста. При работе с картой пользователь может
        не открыть ни один балун, но данные все равно будут загружены.
    </seg></tuv>
	<tuv xml:lang="en"><seg> Often when working with the map you have to download a large amount of additional data (text information, images, etc). However, this downloaded information is not always used by the user. For example, when the map display hundreds of placemarks, and each of them has a balloon containing a large amount of text. When working with the map, the user might not open any of the balloons, but the data will still be loaded. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В таких случаях в целях экономии трафика имеет смысл загружать данные не сразу, а по мере необходимости.
    </seg></tuv>
	<tuv xml:lang="en"><seg> In such cases, in order to save traffic it makes sense to not load data immediately, but wait until it is needed. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Данный пример демонстрирует динамическую загрузку содержимого балуна с помощью AJAX-запроса.
    </seg></tuv>
	<tuv xml:lang="en"><seg> This example demonstrates how to dynamically load the contents of a balloon using an AJAX request. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        При клике на значок кластера или одиночной метки производится проверка, загружено ли
        содержимое их балуна. Если для каких-либо меток текст балуна не задан, серверу отправляется POST-запрос
        с массивом идентификаторов этих меток. Сервер обрабатывает массив и на его основе
        возвращает JSON-объект, содержащий необходимые данные.
    </seg></tuv>
	<tuv xml:lang="en"><seg> When a cluster icon or a separate placemark is clicked, a check is performed for whether the balloon content is loaded. If any placemarks do not have the balloon text specified, a POST request is sent to the server with an array of identifiers of these placemarks. The server processes the array and returns a JSON object based on it containing the required data. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Обратите внимание, что серверную часть необходимо реализовать самостоятельно.
    </seg></tuv>
	<tuv xml:lang="en"><seg> Note that you need to implement the server side yourself. </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>










<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>
</seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg>
        <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>, 
        <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>
        <bpt id="3">[#$dp4]</bpt>map.action.Manager.setCorrection<ept id="3">&lt;/a&gt;</ept>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>, 
        <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>
        <bpt id="3">[#$dp4]</bpt>map.action.Manager.setCorrection<ept id="3">&lt;/a&gt;</ept>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Бывают случаи, когда необходимо ограничить видимую область карты, чтобы у пользователей не было возможности выйти за её пределы. 
    </seg></tuv>
	<tuv xml:lang="en"><seg> Sometimes it is necessary to limit the visible area of the map, so users cannot go beyond it. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для таких случаев у карты есть опция «restrictMapArea», которая может принимать в качестве входных параметров прямоугольную область, либо булево значение. В случае «true» пользователь не сможет выйти за пределы изначальной видимой области карты.
    </seg></tuv>
	<tuv xml:lang="en"><seg> For such cases, the map has the "restrictMapArea" option, which can take as input parameters a rectangular area, or a Boolean value. If "true" the user will not be able to go beyond the initial visible area of the map. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        С подробным описанием опции можно ознакомиться  
        <bpt id="1">[#$dp10]</bpt>здесь<ept id="1">&lt;/a&gt;</ept>.
    </seg></tuv>
	<tuv xml:lang="en"><seg> For a detailed description of the options, see <bpt id="1">[#$dp10]</bpt>this section<ept id="1">&lt;/a&gt;</ept>. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Если недостаточно просто ограничить область просмотра прямоугольником и необходимо решить более сложную задачу (например, запретить центру карты выходить за пределы какого-либо полигона), то с помощью <bpt id="1">[#$dp13]</bpt>map.action.Manager.setCorrection<ept id="1">&lt;/a&gt;</ept>, можно задать функцию, которая будет корректировать действия пользователя на карте.
    </seg></tuv>
	<tuv xml:lang="en"><seg> If it is not enough simply to limit the viewport to a rectangle and you have a more complex task (for example, to prevent the center of the map from going outside of a polygon), use <bpt id="1">[#$dp13]</bpt>map.action.Manager.setCorrection<ept id="1">&lt;/a&gt;</ept> to specify a function that will adjust the actions of the user on the map. </seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>





<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>
</seg></tuv></tu>







<tu>
	<tuv xml:lang="ru"><seg> Создаем карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating the map.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Описываем геометрию геообъекта.
</seg></tuv>
	<tuv xml:lang="en"><seg> Describing the geometry of the geo object.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Указываем координаты вершин ломаной.
</seg></tuv>
	<tuv xml:lang="en"><seg> Specifying the coordinates of the vertices of the polyline.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Описываем свойства геообъекта.
</seg></tuv>
	<tuv xml:lang="en"><seg> Defining properties of the geo object.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Содержимое балуна.
</seg></tuv>
	<tuv xml:lang="en"><seg> The contents of the balloon.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Цвет линии.
</seg></tuv>
	<tuv xml:lang="en"><seg> The line color.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Ширина линии.
</seg></tuv>
	<tuv xml:lang="en"><seg> Line width.
</seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> Описываем свойства геообъекта.
 Содержимое балуна.
</seg></tuv>
	<tuv xml:lang="en"><seg> Describing the properties of the geo object.
 The contents of the balloon.</seg></tuv></tu>





<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu>





<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Мультимаршрутизатор позволяет по заданным точкам строить сразу несколько маршрутов.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The multirouter allows planning multiple routes at once using the set points. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для создания мультимаршрута используется класс <ph id="1">[#$dp7]</ph>. В качестве его параметров передаются
        следующие объекты:</seg></tuv>
	<tuv xml:lang="en"><seg> To create a multiroute, use the <ph id="1">[#$dp7]</ph> class. The following objects are passed as its parameters:</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp10]</bpt>модель<ept id="1">&lt;/sa&gt;</ept> мультимаршрута. Задается в качестве объекта с полями:
           </seg></tuv>
	<tuv xml:lang="en"><seg>The multiroute <bpt id="1">[#$dp10]</bpt>model<ept id="1">&lt;/sa&gt;</ept>. It is defined as an object with fields: </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>referencePoints - массив опорных точек маршрута. Обратите внимание, что если задано больше двух опорных точек,
                   то маршрутизатор возвращает только один маршрут.</seg></tuv>
	<tuv xml:lang="en"><seg>referencePoints - an array of reference points on the route. Note that if more than two points are set, the router returns only one route.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>params - параметры маршрутизации (например, тип маршрутизации, учитывать ли трафик и др.).</seg></tuv>
	<tuv xml:lang="en"><seg>params - the routing parameters (for example, the routing type, whether to consider traffic, and so on).</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>
        Все опорные точки маршрута делятся на путевые (wayPoint) и транзитные (viaPoint). Путевые точки - это точки, в которых необходимо сделать
        остановку, а транзитные - через которые нужно проложить маршрут без остановки.
    </seg></tuv>
	<tuv xml:lang="en"><seg> All anchor points on the route are divided into waypoints (wayPoint) and throughpoints (viaPoint). Waypoints are points at which you must stop, and throughpoints are passed through on the route without stopping. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        После того как все маршруты были построены, самый короткий из них автоматически становится активным. Такой маршрут отображается
        на карте фиолетовым цветом. Серые пунктирные линии обозначают
        пересадки с одного вида транспорта на другой или переход между станциями (для маршрута на общественном транспорте).<ph id="1">&lt;br/&gt;</ph>
        Неактивные маршруты отображаются серым цветом. Для переключения
        активного маршрута достаточно кликнуть правой кнопкой мыши по нужному маршруту.
        Также переключить активный маршрут можно программно. См. <ph id="2">[#$dp22]</ph>.
    </seg></tuv>
	<tuv xml:lang="en"><seg> After all routes have been built, the shortest of them becomes active automatically. This route is shown on the map in purple. Grey dotted lines represent transfers from one type of transport to another, or transferring between stations (for a route on public transport).<ph id="1">&lt;br/&gt;</ph>
 Inactive routes are displayed in gray. To switch the active route, right-click on the desired route. The active route can also be switched programmatically. See <ph id="2">[#$dp22]</ph>. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Примеры. Построение мультимаршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Planning a multiroute</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Создание мультимаршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg>Creating a multiroute.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object} model</ph> Модель мультимаршрута. Задается объектом с полями:
referencePoints - описание опорных точек мультимаршрута (обязательное поле);
params - параметры мультимаршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object} model</ph> The model of a multiroute. It is defined by an object with fields: referencePoints - a description of the multiroute reference points (mandatory field); params - multiroute parameters.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object}</ph> [options] Опции маршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object}</ph> [options] Route options.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Максимальное количество маршрутов, которое вернет маршрутизатор.
</seg></tuv>
	<tuv xml:lang="en"><seg> The maximum number of routes that the router will return.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Массив индексов точек, которые будут трактоваться
 как транзитные.
 Обратите внимание, что для задания тразнитных точек
 в referencePoints должно быть задано не менее
 трех опорных точек.
 viaIndexes: [1]
</seg></tuv>
	<tuv xml:lang="en"><seg> An array of point indices, which will be treated as throughpoints. Note that to specify through points, referencePoints must have at least three reference points set. viaIndexes: [1]</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Автоматически устанавливать границы карты так,
 чтобы маршрут был виден целиком.
</seg></tuv>
	<tuv xml:lang="en"><seg> Automatically set the boundaries of the map so that the route is entirely visible.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp5]</ph> - класс, позволяющий добавить на карту большое количество объектов
        без необходимости создавать метки по отдельности.
    </seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">[#$dp5]</ph> - class that allows you to add a large number of objects without having to create placemarks separately. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Объекты, добавленные в ObjectManager, располагаются в коллекции ObjectManager.objects. Кластеры, образованные из
        добавленных меток, добавляются в коллекцию ObjectManager.clusters.
    </seg></tuv>
	<tuv xml:lang="en"><seg>Objects added in ObjectManager, are in the ObjectManager.objects collection. The clusters formed from the added placemarks are added to the ObjectManager.clusters collection. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        У этих коллекций есть менеджеры управления балунами и хинтами (ObjectManager.objects.balloon, ObjectManager.clusters.hint).
    </seg></tuv>
	<tuv xml:lang="en"><seg> These collections have managers that control balloons and hints (ObjectManager.objects.balloon, ObjectManager.clusters.hint). </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Примеры. Работа с балуном в ObjectManager</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Working with the balloon in ObjectManager</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
















<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для объединения близко расположенных меток в группу (кластер) используется <bpt id="1">[#$dp9]</bpt>кластеризатор<ept id="1">&lt;/a&gt;</ept>.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        The <bpt id="1">[#$dp9]</bpt>clusterer<ept id="1">&lt;/a&gt;</ept> is used for combining closely positioned placemarks in a group (cluster).
    </seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg>

    </seg></tuv>
	<tuv xml:lang="en"><seg>

    </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        API предоставляет возможность задавать меткам собственные изображения.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The API provides the ability to set custom images for placemarks. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Чтобы установить нужное изображение, задайте для метки следующие опции:
        </seg></tuv>
	<tuv xml:lang="en"><seg> To set a desired image, specify the following options for the placemark: </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
                iconLayout: "default#image";
            </seg></tuv>
	<tuv xml:lang="en"><seg>iconLayout: "default#image"; </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
                iconImageHref: {URL графического файла}.
            </seg></tuv>
	<tuv xml:lang="en"><seg>iconImageHref: {URL of the graphic file}. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Также могут быть установлены опции iconImageSize (ширина и высота изображения в пикселях), iconImageOffset (сдвиг левого верхнего угла иконки относительно
    точки привязки) и iconImageClipRect (координаты отображаемой области исходного изображения в пикселях).

    </seg></tuv>
	<tuv xml:lang="en"><seg> You can also set the options iconImageSize (width and height of the image in pixels), iconImageOffset (offset of the upper left corner of the icon relative to the anchor point), and iconImageClipRect (coordinates of the visible area of the original image in pixels). </seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>






<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>
    API позволяет определять координаты объекта по его названию и
     название объекта по его координатам
    (<bpt id="1">[#$dp7]</bpt>прямое и обратное геокодирование<ept id="1">&lt;/a&gt;</ept>).
</seg></tuv>
	<tuv xml:lang="en"><seg> The API can determine the coordinates of an object by its name and the name of an object by its coordinates (<bpt id="1">[#$dp7]</bpt>forward and reverse geocoding<ept id="1">&lt;/a&gt;</ept>).</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Оба вида геокодирования производятся с помощью функции <ph id="1">[#$dp10]</ph>. Результат, возвращаемый этой функцией, может быть сразу размещён на карте.
    </seg></tuv>
	<tuv xml:lang="en"><seg> Both types of geocoding are performed using the <ph id="1">[#$dp10]</ph> function. The result returned by this function may be placed on the map immediately. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    В данном примере используется обратное геокодирование: по заданным координатам производится поиск
    ближайших станций метро.
</seg></tuv>
	<tuv xml:lang="en"><seg> This example uses reverse geocoding: using specified coordinates, we perform a search for the nearest metro stations.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>










<tu>
	<tuv xml:lang="ru"><seg> Создаем метку.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a placemark.</seg></tuv></tu>






<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>,
        <ph id="4">[#$dp5]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>,
        <ph id="4">[#$dp5]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
       Пример демонстрирует, как создать меню для отображения коллекций геообъектов карты.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The example demonstrates how to create a menu to display collections of geo objects on the map. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
       Для построения такого меню необходимо создать два представления геообъекта: его API-представление (в виде метки на карте)
       и его DOM-представление (то есть элемент меню).
    </seg></tuv>
	<tuv xml:lang="en"><seg> To create such a menu, you must create two representations of a geo object: its API-representation (in the form of placemarks on the map) and its DOM representation (i.e. the menu item). </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
       Связать эти представления можно внутри обработчика события у DOM-представления (клик на пункте меню)
       вызовом конкретных методов в API-представлении геообъекта (добавление/удаление метки с карты).
    </seg></tuv>
	<tuv xml:lang="en"><seg> These representations can be linked inside the event handler for the DOM representation (click on menu item) by calling specific methods in the API representation of the geo object (adding/removing placemarks on the map). </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
       В этом примере меню строится на основе массива данных, который определен в файле <bpt id="1">[#$dp13]</bpt>groups.js<ept id="1">&lt;/a&gt;</ept>.
    </seg></tuv>
	<tuv xml:lang="en"><seg> In this example, the menu is based on the data array that is defined in the file <bpt id="1">[#$dp13]</bpt>groups.js<ept id="1">&lt;/a&gt;</ept>. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
       Подробнее пример обсуждается в <bpt id="1">[#$dp16]</bpt>клубе<ept id="1">&lt;/a&gt;</ept>.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The example is discussed in more detail in the <bpt id="1">[#$dp16]</bpt>club<ept id="1">&lt;/a&gt;</ept>. </seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В примере показано, как произвести загрузку данных с помощью функции <bpt id="1">[#$dp6]</bpt>JQuery.getJSON()<ept id="1">&lt;/a&gt;</ept> и отобразить
        их на карте.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The example shows how to load data using <bpt id="1">[#$dp6]</bpt>JQuery.getJSON()<ept id="1">&lt;/a&gt;</ept> and display it on the map. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Загруженные данные представлены в формате <bpt id="1">[#$dp9]</bpt>GeoJSON<ept id="1">&lt;/a&gt;</ept>. Для их добавления на карту необходимо использовать <ph id="2">[#$dp10]</ph>.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The loaded data is presented in <bpt id="1">[#$dp9]</bpt>GeoJSON<ept id="1">&lt;/a&gt;</ept> format. To add it to the map, use <ph id="2">[#$dp10]</ph>. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Обратите внимание, что координаты объектов заданы в последовательности "долгота, широта". Поскольку по умолчанию в API принят порядок
        "широта, долгота", необходимо при подключении API передать параметр coordorder со значением lotlang. Подробнее см. в разделе <bpt id="1">[#$dp13]</bpt>Подключение API<ept id="1">&lt;/a&gt;</ept>.
    </seg></tuv>
	<tuv xml:lang="en"><seg> Note that the object coordinates are specified in the order "longitude, latitude". Since the order "latitude, longitude" is used by default in the API, you must pass the "coordorder" parameter with the value "lotlang" when enabling the API. For more information, see <bpt id="1">[#$dp13]</bpt>Enabling the API<ept id="1">&lt;/a&gt;</ept>. </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>,
        <ph id="5">[#$dp6]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>,
        <ph id="5">[#$dp6]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <bpt id="1">[#$dp8]</bpt>Макеты<ept id="1">&lt;/a&gt;</ept> объектов можно
        создавать с помощью фабрики <ph id="2">[#$dp9]</ph>,
        используя текcтовые шаблоны.
    </seg></tuv>
	<tuv xml:lang="en"><seg><bpt id="1">[#$dp8]</bpt>Layouts<ept id="1">&lt;/a&gt;</ept> can be created using the <ph id="2">[#$dp9]</ph> factory, using text templates. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В данном примере создается пользовательский макет
        <bpt id="1">[#$dp12]</bpt>выпадающего списка<ept id="1">&lt;/sa&gt;</ept>.
        Макет элемента управления строится на основе его данных, состояния и опций.
        Макет автоматически перестраивается при изменении значений полей,
        состояния или опций, которые используются в его текстовом шаблоне.
    </seg></tuv>
	<tuv xml:lang="en"><seg> This example creates a custom layout for the <bpt id="1">[#$dp12]</bpt>drop-down list<ept id="1">&lt;/sa&gt;</ept>. 
The layout of the control is based on its data, status, and options. 
The layout is automatically rebuilt when changes are made to the values of fields, states, or options that are used in its text template. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Выпадающий список по умолчанию реагирует на клик по своему макету и меняет
        значение поля state.get('expanded').
    </seg></tuv>
	<tuv xml:lang="en"><seg> A drop-down list by default responds to a click on its layout and changes the value of the field state.get('expanded'). </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        События макета, на которые реагирует выпадающий список, описаны в интерфейсах
        <ph id="1">[#$dp17]</ph> и <ph id="2">[#$dp18]</ph>.
    </seg></tuv>
	<tuv xml:lang="en"><seg> Layout events that the drop-down list responds to are described in the interfaces <ph id="1">[#$dp17]</ph> and <ph id="2">[#$dp18]</ph>. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Выпадающий список является групповым элементом управления, поэтому его макет
        должен генерировать события и реализовывать методы, описанные в <ph id="1">[#$dp21]</ph>.
    </seg></tuv>
	<tuv xml:lang="en"><seg> A drop-down list is a group control, so its layout must generate events and implement the methods described in <ph id="1">[#$dp21]</ph>. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Через опции можно задавать настройки как самого выпадающего списка, так и настройки
        для его дочерних элементов. Для этого опции дочерних элементов нужно указывать
        с префиксом 'item'.
    </seg></tuv>
	<tuv xml:lang="en"><seg>Through the options you can configure the drop-down list itself, as well as settings for its child elements. To do this, child element options must be specified with the 'item' prefix. </seg></tuv></tu>















<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В примере показано, как осуществлять загрузку данных для балуна объекта по требованию.
    </seg></tuv>
	<tuv xml:lang="en"><seg> This example shows how to load data for an object's balloon on demand. </seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>,
        <ph id="6">[#$dp7]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>,
        <ph id="6">[#$dp7]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
		В примере используется макет балуна кластера "cluster#balloonCarousel".<ph id="1">&lt;br/&gt;</ph>
		Макет, в котором информация о геообъекте располагается в центре, а по бокам располагаются кнопки перехода к предыдущему и следующему геообъекту.<ph id="2">&lt;br/&gt;</ph>
		В нижней части балуна находится меню быстрой навигации.<ph id="3">&lt;br/&gt;</ph>
		Информация о выбранном геообъекте задается отдельным макетом и может быть настроена при помощи опции 'clusterBalloonItemContentLayout'.<ph id="4">&lt;br/&gt;</ph>
		В данном примере задается собственный макет с информацией о геообъекте.<ph id="5">&lt;br/&gt;</ph>
	<ph id="6">&lt;br/&gt;</ph>
        <bpt id="7">[#$dp9]</bpt>Макеты<ept id="7">&lt;/a&gt;</ept> объектов можно создавать с помощью фабрики <ph id="8">[#$dp10]</ph>, используя текcтовые шаблоны.<ph id="9">&lt;br/&gt;</ph> 
		Текстовые шаблоны формируют html-содержимое макета на основе хэша с данными, передаваемого в конструктор макета.<ph id="10">&lt;br/&gt;</ph>
		В данном примере поставщик данных - это геообъект.
</seg></tuv>
	<tuv xml:lang="en"><seg> The example uses the "cluster#balloonCarousel" layout for the cluster balloon.<ph id="1">&lt;br/&gt;</ph>
 In this layout, the information about the geo object is located in the center, and on each side are buttons to go to the previous and next geo object.<ph id="2">&lt;br/&gt;</ph>
 At the bottom of the balloon is a quick navigation menu.<ph id="3">&lt;br/&gt;</ph>
 Information about the selected geo object is defined as a separate layout and can be configured using the 'clusterBalloonItemContentLayout' option.<ph id="4">&lt;br/&gt;</ph>
 In this example, you set your own layout with information about the geo object.<ph id="5">&lt;br/&gt;</ph>
<ph id="6">&lt;br/&gt;</ph>
 Object <bpt id="7">[#$dp9]</bpt>layouts<ept id="7">&lt;/a&gt;</ept> can be created using the <ph id="8">[#$dp10]</ph> factory, using text templates.<ph id="9">&lt;br/&gt;</ph>
 Text templates generate HTML content for the layout based on the hash of the data that is passed to the layout constructor.<ph id="10">&lt;br/&gt;</ph>
 In this example, the data provider is a geo object.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Создаем собственный макет с информацией о выбранном геообъекте.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a custom layout with information about the selected geo object.
</seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg> Устанавливаем режим открытия балуна. 
 В данном примере балун никогда не будет открываться в режиме панели.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the mode for opening the balloon. In this example, the balloon will never open in the panel mode.
</seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg> Заполняем кластер геообъектами со случайными позициями.
</seg></tuv>
	<tuv xml:lang="en"><seg> Populating the cluster with geo objects with random positions.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Устаналиваем данные, которые будут отображаться в балуне.
</seg></tuv>
	<tuv xml:lang="en"><seg> Defining the data that will be displayed in the balloon.
</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>





<tu>
	<tuv xml:lang="ru"><seg> Координаты вершин внутреннего контура.
</seg></tuv>
	<tuv xml:lang="en"><seg> The coordinates of the vertices of the inner contour.</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> Цвет обводки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Stroke color.
</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Ширина обводки.
</seg></tuv>
	<tuv xml:lang="en"><seg> The stroke width.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Добавляем многоугольник на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding the polygon to the map.</seg></tuv></tu>





<tu>
	<tuv xml:lang="ru"><seg> Ширина обводки.
</seg></tuv>
	<tuv xml:lang="en"><seg> The stroke width.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Добавляем многоугольник на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding the polygon to the map.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu>





<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>, 
    <ph id="3">[#$dp4]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>, 
    <ph id="3">[#$dp4]</ph>
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
 <bpt id="1">[#$dp6]</bpt>Элемент управления<ept id="1">&lt;/a&gt;</ept> — визуальный объект,
    позволяющий пользователю управлять картой (например, перемещать карту, изменять
    её тип или коэффициент масштабирования).
</seg></tuv>
	<tuv xml:lang="en"><seg> A <bpt id="1">[#$dp6]</bpt>control<ept id="1">&lt;/a&gt;</ept> is a visual object that allows the user to manipulate the map (for example, move the map, change its type, or change the zoom).</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    Каждый элемент управления реализуется отдельным классом из пространства имен control
    (например,  <ph id="1">[#$dp9]</ph>).
</seg></tuv>
	<tuv xml:lang="en"><seg> Each control is implemented by a separate class from the control namespace (for example, <ph id="1">[#$dp9]</ph>).</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    Элемент управления "пробки" можно подключать как через ключ 'trafficControl',
    так и создавая экземпляр класса <ph id="1">[#$dp12]</ph>.
    При создании экземпляра класса можно указывать начальное состояние элемента управления.
</seg></tuv>
	<tuv xml:lang="en"><seg> The "Traffic" control can be enabled either via the 'trafficControl' key, or by creating an instance of the <ph id="1">[#$dp12]</ph> class. When creating a class instance, you can specify the initial state of the control.</seg></tuv></tu>






<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>










<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>
    </seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>,
        <ph id="4">[#$dp5]</ph>,
        <ph id="5">[#$dp6]</ph>,
        <ph id="6">[#$dp7]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>,
        <ph id="4">[#$dp5]</ph>,
        <ph id="5">[#$dp6]</ph>,
        <ph id="6">[#$dp7]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В этом примере обрабатывается событие геообъекта - щелчок правой кнопкой мыши на метке,
        и отображется контекстное меню для управления его свойствами.
    </seg></tuv>
	<tuv xml:lang="en"><seg> In this example, a geo object event is handled - when the placemark is right-clicked, the context menu is displayed for managing its properties.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Создаем карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating the map.</seg></tuv></tu>











<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>

























<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В данном примере создаются три метки со своими HTML макетами. <ph id="1">&lt;br/&gt;</ph>
        Создание своих макетов происходит при помощи фабрики макетов. <ph id="2">&lt;br/&gt;</ph>
        Всем меткам задаются разные фигуры активных областей: прямоугольник, круг и полигон. <ph id="3">&lt;br/&gt;</ph>
    <ph id="4">&lt;br/&gt;</ph>
        Метка, чтобы ловить события мышки, использует <bpt id="5">[#$dp5]</bpt>активную область<ept id="5">&lt;/a&gt;</ept>. <ph id="6">&lt;br/&gt;</ph>
        По умолчанию при задании своего HTML макета фигура активной области не задается, и её нужно задать самостоятельно.<ph id="7">&lt;br/&gt;</ph>
        Это можно сделать при помощи опции метки iconShape в виде <bpt id="8">[#$dp6]</bpt>JSON описания геометрии<ept id="8">&lt;/sa&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg> In this example, three placemarks are created with their HTML layouts. <ph id="1">&lt;br/&gt;</ph>
 Custom layouts are created using layout factories.<ph id="2">&lt;br/&gt;</ph>
 All placemarks are assigned different hotspot shapes: rectangle, circle and polygon.<ph id="3">&lt;br/&gt;</ph>
<ph id="4">&lt;br/&gt;</ph>
 In order to catch mouse events, a placemark uses the <bpt id="5">[#$dp5]</bpt>hotspot<ept id="5">&lt;/a&gt;</ept>. <ph id="6">&lt;br/&gt;</ph>
By default, when you set your HTML layout, the hotspot shape is not defined, and you need to set it yourself.<ph id="7">&lt;br/&gt;</ph>
 This can be done using the iconShape placemark option in the form of a <bpt id="8">[#$dp6]</bpt>JSON description of the geometry<ept id="8">&lt;/sa&gt;</ept>.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>
        <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>, <ph id="6">[#$dp7]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>
        <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>, <ph id="6">[#$dp7]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В данном примере при инициализации загружаются только модули карты и кнопки.<ph id="1">&lt;br/&gt;</ph>
        По клику кнопки происходит загрузка модуля метки.<ph id="2">&lt;br/&gt;</ph>
        Загрузку отдельных модулей можно производить при помощи метода <bpt id="3">[#$dp9]</bpt>require<ept id="3">&lt;/sa&gt;</ept> модульной системы.<ph id="4">&lt;br/&gt;</ph>
        Метод возвращет <bpt id="5">[#$dp10]</bpt>объект-обещание<ept id="5">&lt;/sa&gt;</ept>, который подтверждается массивом запрошенных модулей.<ph id="6">&lt;br/&gt;</ph>   
        Для удобства в примере используется метод spread, который передает в функцию данные в виде списка аргументов, а не в виде массива.<ph id="7">&lt;br/&gt;</ph>
        <ph id="8">&lt;br/&gt;</ph>
        API Яндекс.Карт состоит из большого количества взаимосвязанных модулей.<ph id="9">&lt;br/&gt;</ph>
        По умолчанию при подключении API происходит загрузка стандартного набора модулей (package.full), который включает в себя все необходимое для работы API.<ph id="10">&lt;br/&gt;</ph>
        Для сокращения объема загружаемого кода API можно подключать некоторые модули вместо стандартного набора.<ph id="11">&lt;br/&gt;</ph>
        Это можно сделать, указав необходимые модули в GET-параметре load. Модули перечисляются через запятую.<ph id="12">&lt;br/&gt;</ph>
        Если GET-параметр load не указан, то просходит загрузка package.full.<ph id="13">&lt;br/&gt;</ph>
        Подробнее о работе модулей смотрите в разделе <bpt id="14">[#$dp11]</bpt>Модули<ept id="14">&lt;/a&gt;</ept>.<ph id="15">&lt;br/&gt;</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
        In this example, only the map and button modules are loaded during initialization.<ph id="1">&lt;br/&gt;</ph>
        The placemark module is loaded when a button is clicked.<ph id="2">&lt;br/&gt;</ph>
        You can load individual modules using the <bpt id="3">[#$dp9]</bpt>require<ept id="3">&lt;/sa&gt;</ept> method in the modules system.<ph id="4">&lt;br/&gt;</ph>
        This method returns a  <bpt id="5">[#$dp10]</bpt>promise object<ept id="5">&lt;/sa&gt;</ept>, which is confirmed by the array of requested modules.<ph id="6">&lt;br/&gt;</ph>   
        For convenience, the example uses the "spread" method, which transmits data to the function in the form of a list of arguments, not as an array.<ph id="7">&lt;br/&gt;</ph>
        <ph id="8">&lt;br/&gt;</ph>
        The Yandex.Maps API consists of a large number of interconnected modules.<ph id="9">&lt;br/&gt;</ph>
        By default, when you enable the API, the standard set of modules is loaded (package.full), which includes everything that is necessary for the API.<ph id="10">&lt;br/&gt;</ph>
        To reduce the amount of API code that is loaded, you can connect certain modules instead of the standard set.<ph id="11">&lt;br/&gt;</ph>
        This can be done by specifying the necessary modules in the "load" GET parameter. The modules are separated by commas.<ph id="12">&lt;br/&gt;</ph>
        If the "load" GET parameter is not specified, package.full is loaded.<ph id="13">&lt;br/&gt;</ph>
        For more information about modules, see <bpt id="14">[#$dp11]</bpt>Modules<ept id="14">&lt;/a&gt;</ept>.<ph id="15">&lt;br/&gt;</ph>
</seg></tuv></tu>





<tu>
	<tuv xml:lang="ru"><seg>Пример загрузки только необходимых модулей</seg></tuv>
	<tuv xml:lang="en"><seg>An example of loading only necessary modules</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>









<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
Ссылка на редактор маршрута находится в поле <bpt id="1">[#$dp5]</bpt>editor<ept id="1">&lt;/a&gt;</ept> экземпляра класса router.Route, который будет передан в качестве параметра объекту <ph id="2">[#$dp6]</ph> после того, как выполнится построение маршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg> The reference to the route editor is found in the <bpt id="1">[#$dp5]</bpt>editor<ept id="1">&lt;/a&gt;</ept> field of an instance of the router.Route class, which will be passed as a parameter to the <ph id="2">[#$dp6]</ph> object after building the route.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
Включать (выключать) редактор можно только внутри функции, которая выполнится, когда от сервера придет результат.
</seg></tuv>
	<tuv xml:lang="en"><seg>
The editor can only be turned on (off) inside the function that will be executed when the result comes from the server.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
ymaps.route(...) // возвращает объект util.Promise
    .then(
        function (route) {
            route.editor.start();
            ...
        })
    )
</seg></tuv>
	<tuv xml:lang="en"><seg>ymaps.route(...) // returns an object util.Promise .then( function (route) { route.editor.start(); ... }) )</seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>
        Кластеризатор реализуется классом <ph id="1">[#$dp12]</ph>. В качестве параметров конструктору можно передать опции кластеризатора: стиль отображения значка кластера, размер его ячейки и т. д. Список доступных опций можно посмотреть в соответствующем <bpt id="2">[#$dp13]</bpt>разделе<ept id="2">&lt;/sa&gt;</ept> справочника.
        Опции для настройки меток-кластеров задаются в кластеризатор с префиксом "cluster". Список опций меток-кластеров доступен в документации <ph id="3">[#$dp14]</ph>.
    </seg></tuv>
	<tuv xml:lang="en"><seg> Clusterer is implemented by the <ph id="1">[#$dp12]</ph> class. As parameters to the constructor, you can pass clusterization options: display style for the cluster icon, the size of its cell, and so on. For a list of available options, see the corresponding <bpt id="2">[#$dp13]</bpt>section<ept id="2">&lt;/sa&gt;</ept> of the Reference Guide.
 Options for customizing the cluster placemarks are set in the clusterer using the "cluster" prefix. The list of options for cluster placemarks is available in the documentation <ph id="3">[#$dp14]</ph>. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Вы можете задать произвольное изображение для меток кластера. Для этого нужно переопределить опцию clusterIcons.
    </seg></tuv>
	<tuv xml:lang="en"><seg> You can set a custom image for cluster placemarks. To do this, override the clusterIcons option. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>

    </seg></tuv>
	<tuv xml:lang="en"><seg>

    </seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>

















<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>













<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>,
        <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>,
        <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        API Яндекс.Карт состоит из большого количества взаимосвязанных модулей.<ph id="1">&lt;br/&gt;</ph>
        По умолчанию при подключении API происходит загрузка стандартного набора модулей (package.full), который включает в себя все необходимое для работы API.<ph id="2">&lt;br/&gt;</ph>
        Для сокращения объема загружаемого кода API можно подключать некоторые модули вместо стандартного набора.<ph id="3">&lt;br/&gt;</ph>
        Это можно сделать, указав необходимые модули в GET-параметре load. Модули перечисляются через запятую. <ph id="4">&lt;br/&gt;</ph>
        Если GET-параметр load не указан, то просходит загрузка package.full.<ph id="5">&lt;br/&gt;</ph>
        Подробнее о работе модулей смотрите в разделе <bpt id="6">[#$dp8]</bpt>Модули<ept id="6">&lt;/a&gt;</ept>.<ph id="7">&lt;br/&gt;</ph>
        <ph id="8">&lt;br/&gt;</ph>
        В данном примере загружаются только модули карты, метки и балуна геообъекта.<ph id="9">&lt;br/&gt;</ph>
        <ph id="10">&lt;br/&gt;</ph>
        Балун геообъекта подключается при помощи аддона <bpt id="11">[#$dp9]</bpt>geoObject.addon.balloon<ept id="11">&lt;/sa&gt;</ept>.<ph id="12">&lt;br/&gt;</ph>
        Без подключенного аддона балуна у геообъектов не будет свойства <bpt id="13">[#$dp10]</bpt>balloon<ept id="13">&lt;/sa&gt;</ept>.<ph id="14">&lt;br/&gt;</ph>
        Все аддоны по умолчанию включены в package.full.
</seg></tuv>
	<tuv xml:lang="en"><seg> The Yandex.Maps API consists of a large number of interconnected modules.<ph id="1">&lt;br/&gt;</ph>
 By default, when you enable the API, a standard set of modules is loaded (package.full), which includes everything that is necessary for the API.<ph id="2">&lt;br/&gt;</ph>
 To reduce the amount of API code that is loaded, you can connect certain modules instead of the standard set.<ph id="3">&lt;br/&gt;</ph>
 This can be done by specifying the necessary modules in the "load" GET parameter. The modules are separated by commas.<ph id="4">&lt;br/&gt;</ph>
 If the "load" GET parameter is not specified, package.full is loaded.<ph id="5">&lt;br/&gt;</ph>
 For more information about modules, see <bpt id="6">[#$dp8]</bpt>Modules<ept id="6">&lt;/a&gt;</ept>.<ph id="7">&lt;br/&gt;</ph>
<ph id="8">&lt;br/&gt;</ph>
 In this example, to load only the modules, cards, placemarks, and a balloon geoobject.<ph id="9">&lt;br/&gt;</ph>
<ph id="10">&lt;br/&gt;</ph> 
balloon geoobject connected using addon <bpt id="11">[#$dp9]</bpt>geoObject.addon.the balloon<ept id="11">&lt;/sa&gt;</ept>.<ph id="12">&lt;br/&gt;</ph> 
Without connected addon for a balloon at the geoobjects will not be properties of the <bpt id="13">[#$dp10]</bpt>balloon<ept id="13">&lt;/sa&gt;</ept>.<ph id="14">&lt;br/&gt;</ph> All Addons are enabled by default in the package.full.</seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg>Пример загрузки только необходимых модулей</seg></tuv>
	<tuv xml:lang="en"><seg>An example of loading only necessary modules</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>,
        <ph id="4">[#$dp5]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>,
        <ph id="4">[#$dp5]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В этом примере слушаются некоторые события геообъекта, и при их наступлении обновляется содержимое текстового поля.
        Полный список событий можно изучить в документации к классу <bpt id="1">[#$dp7]</bpt>GeoObject<ept id="1">&lt;/a&gt;</ept>.
    </seg></tuv>
	<tuv xml:lang="en"><seg> In this example, certain geo object events are listened to, and when they occur, the contents of the text field are updated. For a full list of events, see the documentation for the <bpt id="1">[#$dp7]</bpt>GeoObject<ept id="1">&lt;/a&gt;</ept> class. </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>
    </seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg>
    API предоставляет пять встроенных типов карт:
</seg></tuv>
	<tuv xml:lang="en"><seg> The API provides five built-in types of maps:</seg></tuv></tu>







<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>























<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>,
        <ph id="6">[#$dp7]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>,
        <ph id="6">[#$dp7]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
		В данном примере создается собственный макет контента балуна кластера.<ph id="1">&lt;br/&gt;</ph>
		Макет задается опцией 'clusterBalloonContentLayout'.
	<ph id="2">&lt;br/&gt;</ph>
        <bpt id="3">[#$dp9]</bpt>Макеты<ept id="3">&lt;/a&gt;</ept>
        объектов можно создавать с помощью фабрики <ph id="4">[#$dp10]</ph>,
        используя текcтовые шаблоны. <ph id="5">&lt;br/&gt;</ph>
		Текстовые шаблоны формируют html-содержимое макета на основе хэша с данными,
        передаваемого в конструктор макета.<ph id="6">&lt;br/&gt;</ph>
		В данном примере поставщиком данных является кластер, у которого был открыт балун.<ph id="7">&lt;br/&gt;</ph>
	<ph id="8">&lt;br/&gt;</ph>
		В макете происходит перечисление и вывод полей 'placemarkId' и 'balloonContentHeader' всех геообъектов кластера при помощи конструкции 'for'.
</seg></tuv>
	<tuv xml:lang="en"><seg> In this example, you create your own layout for cluster balloon content.<ph id="1">&lt;br/&gt;</ph>
 The layout is specified by the 'clusterBalloonContentLayout' option.<ph id="2">&lt;br/&gt;</ph>
 Object <bpt id="3">[#$dp9]</bpt>layouts<ept id="3">&lt;/a&gt;</ept> can be created by the <ph id="4">[#$dp10]</ph> factory using text templates.<ph id="5">&lt;br/&gt;</ph>
 Text templates generate HTML content of the layout based on the hash of the data that is passed to the layout constructor.<ph id="6">&lt;br/&gt;</ph>
 In this example, the data provider is the cluster that the balloon was opened on.<ph id="7">&lt;br/&gt;</ph>
<ph id="8">&lt;br/&gt;</ph>
 In the layout the fields 'placemarkId' and 'balloonContentHeader' are listed and output for all the cluster geo objects, using the construction 'for'.</seg></tuv></tu>





<tu>
	<tuv xml:lang="ru"><seg> Производим наследование от класса кнопки. 
</seg></tuv>
	<tuv xml:lang="en"><seg> Performing inheritance from the button class. </seg></tuv></tu>







<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        API Яндекс.Карт состоит из большого количества взаимосвязанных модулей.<ph id="1">&lt;br/&gt;</ph>
        По умолчанию при подключении API происходит загрузка стандартного набора модулей (package.full), который включает в себя все необходимое для работы API.<ph id="2">&lt;br/&gt;</ph>
        Разработчик, который использует API Яндекс.Карт, имеет возможность создавать свои модули.<ph id="3">&lt;br/&gt;</ph>
    <ph id="4">&lt;br/&gt;</ph>
        В данном примере создается собственный элемент управления со своим макетом.<ph id="5">&lt;br/&gt;</ph>
        И элемент управления, и макет оформлены в виде отдельных модулей.<ph id="6">&lt;br/&gt;</ph>
        Определение собственного модуля доступно при помощи метода <bpt id="7">[#$dp6]</bpt>define<ept id="7">&lt;/sa&gt;</ept><ph id="8">&lt;br/&gt;</ph>
        После создания карты происходит запрос на получение своего модуля при помощи метода <bpt id="9">[#$dp7]</bpt>require<ept id="9">&lt;/sa&gt;</ept><ph id="10">&lt;br/&gt;</ph>
    <ph id="11">&lt;br/&gt;</ph>    
        Подробнее о работе модулей смотрите в разделе <bpt id="12">[#$dp8]</bpt>Модули<ept id="12">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg> The Yandex.Maps API consists of a large number of interconnected modules.<ph id="1">&lt;br/&gt;</ph>
 By default, when you enable the API, a standard set of modules is loaded (package.full), which includes everything necessary for the API to work.<ph id="2">&lt;br/&gt;</ph>
 The developer who uses the Yandex.Maps API can create custom modules.<ph id="3">&lt;br/&gt;</ph>
<ph id="4">&lt;br/&gt;</ph>
 In this example, we create a custom control with a custom layout.<ph id="5">&lt;br/&gt;</ph>
 Both the control and the layout are designed as separate modules.<ph id="6">&lt;br/&gt;</ph> 
Use the <bpt id="7">[#$dp6]</bpt>define<ept id="7">&lt;/sa&gt;</ept><ph id="8">&lt;br/&gt;</ph> method to define a custom module. After creating the map, a request is sent for getting your module using the <bpt id="9">[#$dp7]</bpt>require<ept id="9">&lt;/sa&gt;</ept><ph id="10">&lt;br/&gt;</ph> method
<ph id="11">&lt;br/&gt;</ph>
 For more details about the modules, see <bpt id="12">[#$dp8]</bpt>Modules<ept id="12">&lt;/a&gt;</ept>.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu>











<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>,
        <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>,
        <bpt id="3">[#$dp4]</bpt>control.GeolocationControl<ept id="3">&lt;/a&gt;</ept>

    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>,
        <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>,
        <bpt id="3">[#$dp4]</bpt>control.GeolocationControl<ept id="3">&lt;/a&gt;</ept>

    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В версии API 2.0 для определения местоположения по IP или с помощью <bpt id="1">[#$dp6]</bpt>Geolocation API<ept id="1">&lt;/a&gt;</ept> разработчикам приходилось самостоятельно
        использовать необходимые методы и обрабатывать полученный результат (см. <bpt id="2">[#$dp7]</bpt>пример<ept id="2">&lt;/a&gt;</ept>).
    </seg></tuv>
	<tuv xml:lang="en"><seg> In API 2.0 versions, to determine the location by IP or by using the <bpt id="1">[#$dp6]</bpt>Geolocation API<ept id="1">&lt;/a&gt;</ept>, developers had to independently use the necessary methods and process the result (see the <bpt id="2">[#$dp7]</bpt>example<ept id="2">&lt;/a&gt;</ept>). </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В API 2.1 встроен специальный элемент управления "геолокация", который позволяет отобразить географическое положение пользователя на карте.
        Данный элемент управления реализуется классом <bpt id="1">[#$dp10]</bpt>control.GeolocationControl<ept id="1">&lt;/a&gt;</ept>, которому соответствует ключ 'geolocationControl'.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The API 2.1 has a special built-in "geolocation" control, which allows you to display the user's location on the map.
 This control is implemented by the <bpt id="1">[#$dp10]</bpt>control.GeolocationControl<ept id="1">&lt;/a&gt;</ept> class, which corresponds to the 'geolocationControl' key. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для добавления элемента управления на карту достаточно указать соответствующий ключ в <bpt id="1">[#$dp13]</bpt>параметрах<ept id="1">&lt;/a&gt;</ept> карты.
    </seg></tuv>
	<tuv xml:lang="en"><seg> To add a control to the map, it is enough to specify the appropriate key in the map <bpt id="1">[#$dp13]</bpt>parameters<ept id="1">&lt;/a&gt;</ept>. </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>, <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>,
        <bpt id="3">[#$dp4]</bpt>control.Manager<ept id="3">&lt;/a&gt;</ept>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>, <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>,
        <bpt id="3">[#$dp4]</bpt>control.Manager<ept id="3">&lt;/a&gt;</ept>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В API 2.1 элементы управления добавляются на карту автоматически при ее создании. По умолчанию на карту добавляется
        стандартный набор элементов управления 'mediumMapDefaultSet' (см. <bpt id="1">[#$dp6]</bpt>пример<ept id="1">&lt;/a&gt;</ept>).
    </seg></tuv>
	<tuv xml:lang="en"><seg> In the API 2.1, controls are added to the map automatically when it is created. By default, the 'mediumMapDefaultSet' standard set of controls is added to the map (see the <bpt id="1">[#$dp6]</bpt>example<ept id="1">&lt;/a&gt;</ept>). </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для того чтобы добавить на карту нужные элементы управления, в параметре <bpt id="1">[#$dp9]</bpt>controls<ept id="1">&lt;/a&gt;</ept> при ее создании можно указать список соответствующих ключей.
        Также элементы управления можно добавить через поле карты <bpt id="2">[#$dp10]</bpt>Map.controls<ept id="2">&lt;/a&gt;</ept> с помощью метода add.
     </seg></tuv>
	<tuv xml:lang="en"><seg> To add the desired controls to the map, a list of corresponding keys can be specified in the <bpt id="1">[#$dp9]</bpt>controls<ept id="1">&lt;/a&gt;</ept> parameter when it is created.
 The controls can also be added through the <bpt id="2">[#$dp10]</bpt>Map.controls<ept id="2">&lt;/a&gt;</ept> map field, using the "add" method. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Можно указывать как отдельные элементы управления, так и их набор. Если карту нужно отобразить без элементов управления, то в поле controls передать пустой массив [].
    </seg></tuv>
	<tuv xml:lang="en"><seg> You can specify individual controls, or a set of them. If you want to display the map without controls, pass an empty array [] in the "controls" field. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Со списком доступных элементов управления можно ознакомиться
        <bpt id="1">[#$dp15]</bpt>тут<ept id="1">&lt;/a&gt;</ept>.
    </seg></tuv>
	<tuv xml:lang="en"><seg> A list of the available controls can be found <bpt id="1">[#$dp15]</bpt>here<ept id="1">&lt;/a&gt;</ept>. </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Примеры. Задание собственного отображения маршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Setting a custom route display</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для того чтобы маршрут был проложен с учетом пробок, необходимо передать в параметрах маршрутизации
        поле avoidTrafficJams: true. По умолчанию данное поле принимает значение false.
    </seg></tuv>
	<tuv xml:lang="en"><seg> In order for a route to account for traffic, you need to pass the field avoidTrafficJams: true in the routing parameters. By default, this field takes the false value. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Пробки могут учитываться при построении маршрута как на автомобиле, так и на общественном транспорте.
    </seg></tuv>
	<tuv xml:lang="en"><seg> Traffic can be taken into account when planning a route by car or by public transport. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Подробнее о параметрах и опциях мультимаршрутизатора описано в примере <bpt id="1">[#$dp10]</bpt>Построение мультимаршрута<ept id="1">&lt;/a&gt;</ept>.</seg></tuv>
	<tuv xml:lang="en"><seg>For more information about multiroute parameters and options, see the example <bpt id="1">[#$dp10]</bpt>Planning a multiroute<ept id="1">&lt;/a&gt;</ept>.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Создание мультимаршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg>Creating a multiroute.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Маршрут на общественном транспорте.
</seg></tuv>
	<tuv xml:lang="en"><seg> The route on public transport.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Порядок координат в запросе: долгота, широта.
</seg></tuv>
	<tuv xml:lang="en"><seg> The order of the coordinates in the request: longitude, latitude.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>true - не изменять значение непереданных параметров.
</seg></tuv>
	<tuv xml:lang="en"><seg>true - do not change the value of omitted options.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Устанавливает параметры маршрутизации.
</seg></tuv>
	<tuv xml:lang="en"><seg>Sets the routing parameters.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Прокладывать мультимаршрут с учетом
 информации о текущих пробках на дорогах.
</seg></tuv>
	<tuv xml:lang="en"><seg> Plot a multiroute, taking into account information about the current traffic.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Не учитывать пробки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Do not calculate for traffic.</seg></tuv></tu>






<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>











<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> Создаем экземпляр класса ymaps.control.SearchControl
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating an instance of the ymaps.control.SearchControl class.</seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>,
        <ph id="4">[#$dp5]</ph>,
        <ph id="5">[#$dp6]</ph>,
        <ph id="6">[#$dp7]</ph>

    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>,
        <ph id="4">[#$dp5]</ph>,
        <ph id="5">[#$dp6]</ph>,
        <ph id="6">[#$dp7]</ph>

    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В данном примере показано, как задать собственное отображение результатов поиска.
    </seg></tuv>
	<tuv xml:lang="en"><seg> This example shows how to set a custom display for search results. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Выбранные результаты добавляются в коллекцию  <ph id="1">[#$dp11]</ph>, на которой слушается событие "click". При клике
        по найденному объекту его метка становится красной.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The selected results are added to the <ph id="1">[#$dp11]</ph> collection, which listens for the "click" event. When the found object is clicked, its placemark turns red. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Также для объектов коллекции задан собственный макет всплывающей подсказки.
    </seg></tuv>
	<tuv xml:lang="en"><seg> Similarly, the custom layout for a popup hint is set for objects in the collection. </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>






<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Ссылка на редактор маршрута находится в поле <bpt id="1">[#$dp6]</bpt>editor<ept id="1">&lt;/sa&gt;</ept> экземпляра класса <ph id="2">[#$dp7]</ph>.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The reference to the route editor is in the <bpt id="1">[#$dp6]</bpt>editor<ept id="1">&lt;/sa&gt;</ept> field of the <ph id="2">[#$dp7]</ph> class instance. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Для включения/выключения режима редактирования мультимаршрута используются функции start() и stop() соответственно.
    </seg></tuv>
	<tuv xml:lang="en"><seg> To turn the multiroute edit mode on/off, use the functions start() and stop (), respectively. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        При включении режима редактирования функции start() могут быть переданы параметры редактирования. Список допустимых параметров
        приведен в комментариях в коде.
    </seg></tuv>
	<tuv xml:lang="en"><seg> When you turn on the edit mode, the start() function may be passed the editing parameters. For a list of valid parameters, see the comments in the code. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Обратите внимание, что параметры midPointsType (тип промежуточных точек, которые могут быть добавлены при редактировании)
        и drawOver (запрет на добавление точек поверх объектов карты) передаются в параметрах маршрутизатора с префиксом editor.
    </seg></tuv>
	<tuv xml:lang="en"><seg> Note that the parameters midPointsType (a type of intermediate points that can be added when editing) and drawOver (forbidding adding points on top of map objects) are passed in the router parameters with the "editor" prefix. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>Создание мультимаршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg>Creating a multiroute.
</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg>Включение режима редактирования.
В качестве опций может быть передан объет с полями:
addWayPoints - разрешает добавление новых путевых точек при клике на карту. Значение по умолчанию: false.
dragWayPoints - разрешает перетаскивание уже существующих путевых точек. Значение по умолчанию: true.
removeWayPoints - разрешает удаление путевых точек при двойном клике по ним. Значение по умолчанию: false.
dragViaPoints - разрешает перетаскивание уже существующих транзитных точек. Значение по умолчанию: true.
removeViaPoints - разрешает удаление транзитных точек при двойном клике по ним. Значение по умолчанию: true.
addMidPoints - разрешает добавление промежуточных транзитных или путевых точек посредством перетаскивания маркера, появляющегося при наведении курсора мыши на активный маршрут. Тип добавляемых точек задается опцией midPointsType. Значение по умолчанию: true
</seg></tuv>
	<tuv xml:lang="en"><seg>Turning on edit mode. For options, you can pass an object with fields: addWayPoints - allows adding new waypoints by clicking on the map. Default value: false. 
dragWayPoints - allows dragging existing waypoints. Default value: true. removeWayPoints - allows deleting waypoints by double clicking on them. Default value: false. 
dragViaPoints - allows dragging existing through points. Default value: true. removeViaPoints - allows deleting through points by double-clicking on them. Default value: true. 
addMidPoints - allows adding intermediate through points or waypoints by dragging the marker that appears when you hover the mouse cursor over the active route. The type of added points is set in the midPointsType option. Default value: true</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>



<tu>
	<tuv xml:lang="ru"><seg>
    На карту можно добавлять слой с информацией о пробках. При этом необязательно размещать на карте
    элемент управления "Пробки". Достаточно добавить на карту соответствующий провайдер данных о пробках.
    В данном примере используется провайдер пробок "Сейчас" <ph id="1">[#$dp6]</ph>. 
</seg></tuv>
	<tuv xml:lang="en"><seg> You can add a layer to the map with information about traffic. However, it is not necessary to put the "Traffic" control on the map. It is enough to add the appropriate traffic data provider to the map. This example uses the "Now" traffic provider <ph id="1">[#$dp6]</ph>. </seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>,
        <ph id="2">[#$dp3]</ph>
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Макеты объектов можно создавать с помощью фабрики <ph id="1">[#$dp5]</ph>,
        используя текcтовые шаблоны.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        Object layouts can be created using the <ph id="1">[#$dp5]</ph> factory,
        and using text templates.
    </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В данном примере создается пользовательский макет балуна мультимаршрутизатора, в котором отображается
        информация о выбранном маршруте: для какого вида транспорта проложен маршрут, длина маршрута и время в пути.
        Макет балуна задается через опции мультимаршрутизатора.
    </seg></tuv>
	<tuv xml:lang="en"><seg> This example creates a custom layout for the multirouter balloon, which displays information about the selected route: for each type of transport, it shows the route, route length and travel time. The layout of the balloon is specified via the multirouter options. </seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>


<tu>
	<tuv xml:lang="ru"><seg>
        <bpt id="1">[#$dp7]</bpt>Макеты<ept id="1">&lt;/a&gt;</ept>
        объектов можно создавать с помощью фабрики <ph id="2">[#$dp8]</ph>,
        используя текcтовые шаблоны.
    </seg></tuv>
	<tuv xml:lang="en"><seg> <bpt id="1">[#$dp7]</bpt>Layouts<ept id="1">&lt;/a&gt;</ept> of objects can be created using the <ph id="2">[#$dp8]</ph> factory, using text templates. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        В данном примере создается пользовательский макет <bpt id="1">[#$dp11]</bpt>кнопки<ept id="1">&lt;/sa&gt;</ept>.
        Макет элемента управления строится на основе его данных, состояния и опций.
    </seg></tuv>
	<tuv xml:lang="en"><seg>This example creates a custom layout for a <bpt id="1">[#$dp11]</bpt>button<ept id="1">&lt;/sa&gt;</ept>. The layout of the control is based on its data, status, and options. </seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
        Макет автоматически перестраивается при изменении значений полей,
        состояния или опций, которые используются в его текстовом шаблоне.
    </seg></tuv>
	<tuv xml:lang="en"><seg> The layout is automatically adjusted when changes are made to the values of fields, states, or options that are used in its text template. </seg></tuv></tu>




<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>









<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>










<tu>
	<tuv xml:lang="ru"><seg>
Для построения <bpt id="1">[#$dp7]</bpt>маршрута<ept id="1">&lt;/a&gt;</ept> предназначена функция <ph id="2">[#$dp8]</ph>. В эту функцию передается массив точек, через которые нужно проложить маршрут и, при необходимости, дополнительные опции его построения.
</seg></tuv>
	<tuv xml:lang="en"><seg> To build a <bpt id="1">[#$dp7]</bpt>route<ept id="1">&lt;/a&gt;</ept>, use the <ph id="2">[#$dp8]</ph> function. This function is passed an array of points that the route must pass through and, if necessary, additional options for building the route.</seg></tuv></tu>
<tu>
	<tuv xml:lang="ru"><seg>
Вычисление маршрута производится асинхронно (то есть во время выполнения функции route производится обмен данными с сервером). Результат передается в функцию-обработчик в виде коллекции <ph id="1">[#$dp11]</ph>, которую можно разместить на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg> The route calculation is performed asynchronously (that is, during the execution of the "route" function, data is exchanged with the server). The result is passed to the handler function as a <ph id="1">[#$dp11]</ph> collection, which can be placed on the map.</seg></tuv></tu>

<tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu>





























<tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере создается класс, принимающий мультимаршрут общественного транспорта
    и выполняющий раскраску его сегментов в зависимости от их типа.
    Пример иллюстрирует работу с событиями и данными маршрута и его составных частей.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example creates a class that accepts a public transport multiroute
    and color codes the route segments according to type.
    The example shows how to work with events and data for a route and its parts.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Работа с данными и событиями мультимаршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Working with multiroute data and events</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Класс, раскрашивающий сегменты маршрута в различные
 цвета в зависимости от типа сегмента и типа транспорта.
</seg></tuv>
	<tuv xml:lang="en"><seg> A class that color codes route segments in various colors depending on the
 type of segment and type of transport.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Подписываемся на события обновления мультимаршрута
 и смены активного маршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg> Subscribing to the multiroute update event and changing the active route.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Берем текущий активный маршрут и раскрашиваем его.
</seg></tuv>
	<tuv xml:lang="en"><seg> Taking the current active route and coloring it.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Пресет внешнего вида для сегментов электричек.
</seg></tuv>
	<tuv xml:lang="en"><seg> Preset appearance for train segments.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Пресет внешнего вида для сегментов автобусов, троллейбусов и трамваев.
</seg></tuv>
	<tuv xml:lang="en"><seg> Preset appearance for bus, trolley, and tram segents.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Пресет внешнего вида для пеших сегментов.
</seg></tuv>
	<tuv xml:lang="en"><seg> Preset appearance for walking segments.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Обработчик смены активного маршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg> Handler for changing the active route.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Снимаем раскраску с предыдущего активного маршрута, иначе он
 останется раскрашенным в неактивном состоянии.
</seg></tuv>
	<tuv xml:lang="en"><seg> Removing the color from the previous active route. Otherwise, it will stay
 colored in the inactive state.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Запоминаем новый активный маршрут и раскрашиваем его.
</seg></tuv>
	<tuv xml:lang="en"><seg> Storing the new active route and coloring it.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Применяем к карте границы активного маршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg> Applying the borders of the active route to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> При обновлении маршрута выполняем раскрашивание заново.
</seg></tuv>
	<tuv xml:lang="en"><seg> When updating the route, color coding is repeated.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Если есть активный маршрут, перебираем все пути маршрута.
 Для каждого пути перебираем все сегменты и устанавливаем
 каждому из них параметры внешнего вида в зависимости от типа сегмента.
</seg></tuv>
	<tuv xml:lang="en"><seg> Searching through all the paths of the active route, if there is an active route.
 For each path, it goes through all the segments and sets the appearance
 parameters for each of them according to the type of segment.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Сюда попадут сегменты с типами "walk" (пешеходный)
 и "transfer" (переход между станциями).
</seg></tuv>
	<tuv xml:lang="en"><seg> This includes segments with the types "walk" (walking)
 and "transfer" (transfer between stations).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Перебираем все сегменты и для каждого из них удаляем настройки внешнего вида.
</seg></tuv>
	<tuv xml:lang="en"><seg> Searching through all the segments and deleting the appearance settings for each of them.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Метод, раскрашивающий транспортные сегменты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Method that color codes transport segments.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Берем первую запись о транспорте из массива транспортных средств сегмента
 и на ее основе раскрашиваем сегмент.
 Как правило для одного сегмента тип возможных транспортных средств не
 отличается радикально.
 Т.е. не бывает сегментов, по которым можно проехать как на метро, так и на автобусе.
 Различие же между автобусом и маршрутным такси в нашем случае неважно.
</seg></tuv>
	<tuv xml:lang="en"><seg> Taking the first record about transport from the segment's array of transport
 and color coding the segment based on this record.
 For a single segment, the possible methods of transportation do not normally
 have radically different types.
 In other words, there aren't any segments that you can travel on both the subway and the bus.
 In our case, the difference between a bus and a taxi minibus is not important.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Цвет линии метро берем из данных сегмента.
</seg></tuv>
	<tuv xml:lang="en"><seg> Taking the color of the subway line from the segment data.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем мультимаршрут.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a multiroute.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем объект, раскрашивающий линии сегментов маршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating an object that color codes the lines of route segments.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Макеты объектов можно создавать с помощью фабрики <ph id="1">[#$dp7]</ph>,
    используя текcтовые шаблоны.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Object layouts can be created using the factory <ph id="1">[#$dp7]</ph>,
        and using text templates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере создается пользовательский макет балуна <bpt id="1">[#$dp10]</bpt>геообъекта<ept id="1">&lt;/sa&gt;</ept>.
    Макет задается геообъекту через опции.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example creates a custom balloon layout for a <bpt id="1">[#$dp10]</bpt>geo object<ept id="1">&lt;/sa&gt;</ept>.
    The layout is set for the geo object via options.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создание макета содержимого балуна.
 Макет создается с помощью фабрики макетов с помощью текстового шаблона.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a balloon content layout.
 The layout is created using the layout factory and a text template.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Переопределяем функцию build, чтобы при создании макета начинать
 слушать событие click на кнопке-счетчике.
</seg></tuv>
	<tuv xml:lang="en"><seg> Redefining the "build" function in order to start listening to the "click" event on a counter button when creating the layout.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Сначала вызываем метод build родительского класса.
</seg></tuv>
	<tuv xml:lang="en"><seg> First, we call the "build" method of the parent class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> А затем выполняем дополнительные действия.
</seg></tuv>
	<tuv xml:lang="en"><seg> Then we perform additional steps.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Аналогично переопределяем функцию clear, чтобы снять
 прослушивание клика при удалении макета с карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> In the same way, we redefine the "clear" function in order to
 remove listening for clicks when the layout is deleted from the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Выполняем действия в обратном порядке - сначала снимаем слушателя,
 а потом вызываем метод clear родительского класса.
</seg></tuv>
	<tuv xml:lang="en"><seg> We perform the steps in reverse order - first remove the listener, and then call the "clear" method of the parent class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Запретим замену обычного балуна на балун-панель.
 Если не указывать эту опцию, на картах маленького размера откроется балун-панель.
</seg></tuv>
	<tuv xml:lang="en"><seg> Disabling replacing the normal balloon with the balloon panel. If you do not specify this option, the balloon panel opens on small maps.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Макет балуна геообъекта.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. The layout of a geo object's balloon.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    API предоставляет возможность создавать собственные карты.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The API allows you to create your own custom maps.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для создания собственной карты необходимо прежде всего задать систему координат, на которую будет проецироваться карта. В API встроена поддержка двух систем координат: декартовой и географической, которые реализуются классами <ph id="1">[#$dp9]</ph> и <ph id="2">[#$dp10]</ph> соответственно. Кроме того есть возможность создания пользовательской координатной системы.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    To create a custom map, first you must specify the coordinate system that the map will be projected on. The API supports two coordinate systems: Cartesian and geographic, which are implemented by the <ph id="1">[#$dp9]</ph> and <ph id="2">[#$dp10]</ph> classes, respectively. In addition, it is possible to create a custom coordinate system.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Также для создания пользовательской карты нужно сформировать собственный слой и добавить его в хранилище слоев карты. Для создания слоя используется класс <ph id="1">[#$dp13]</ph>. При добавлении слоя в хранилище слоев указывается не экземпляр класса Layer, а его конструктор.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Similarly, to create a custom map, you must make a custom layer and add it to the map layer storage. Use the <ph id="1">[#$dp13]</ph> class to create a layer. When you add the layer to the layer storage, specify the constructor for the Layer class, not an instance of the class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем проекцию для декартовой системы координат.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a projection for the Cartesian coordinate system.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Определяем границы области отображения в декартовых координатах.
</seg></tuv>
	<tuv xml:lang="en"><seg> Defining the boundaries of the display area in Cartesian coordinates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создадим собственный слой карты:
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a custom map layer:
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Зададим функцию, преобразующую номер тайла
 и уровень масштабировая в URL тайла на сервере.
</seg></tuv>
	<tuv xml:lang="en"><seg> Defining the function that converts the tile number
 and zoom level to the URL of the tile on the server.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавим конструктор слоя в хранилище слоёв под ключом my#layer.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding a layer constructor to the layer storage with the key my#layer.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создадим новый тип карты, состоящий только из нашего слоя тайлов,
 и добавим его в хранилище типов карты под ключом my#type.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a new map type consisting only of our tile layer,
 and adding it to the storage for map types with the key my#type.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создадим карту в заданной системе координат.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a map in the specified coordinate system.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Выставим опцию, чтобы зум-контрол был минимального размера
 независимо от размеров карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting an option so the zoom control is minimal size
 regardless of the size of the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Создание собственной карты</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Creating your own map</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
	Сервис <bpt id="1">[#$dp8]</bpt>Регионы<ept id="1">&lt;/a&gt;</ept> позволяет добавлять на карту сразу целые области. Для загрузки региональных областей используется функция <ph id="2">[#$dp9]</ph>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
	The <bpt id="1">[#$dp8]</bpt>Regions<ept id="1">&lt;/a&gt;</ept> service lets you add entire regions to the map at once. Use the <ph id="2">[#$dp9]</ph> function for uploading regional areas.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
	Данные о региональном делении стран подгружаются из OSM. Полученные данные преобразуются в коллекцию GeoObjectCollection, которую можно разместить на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
	Data about regional divisions of countries is loaded from OSM. The data received is converted to a GeoObjectCollection that can be placed on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Список стран
</seg></tuv>
	<tuv xml:lang="en"><seg> List of countries
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Доступные языки
</seg></tuv>
	<tuv xml:lang="en"><seg> Available languages
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Раскраска по странам
</seg></tuv>
	<tuv xml:lang="en"><seg> Color-coding by country
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Регионы</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Regions</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Отображаются все доступные страны. Вы можете уточнить язык или уровень детализации соответственно.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    All available countries are displayed. You can specify the language or detail level accordingly.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>0</seg></tuv>
	<tuv xml:lang="en"><seg>0</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>

Язык: <bpt id="1">&lt;select id="lang"&gt;</bpt>
<ept id="1">&lt;/select&gt;</ept>
Уровень детализации: <it id="2" pos="open">&lt;select id="level"&gt;</it>
    </seg></tuv>
	<tuv xml:lang="en"><seg>

Language: <bpt id="1">&lt;select id="lang"&gt;</bpt>
<ept id="1">&lt;/select&gt;</ept>
Detail level: <it id="2" pos="open">&lt;select id="level"&gt;</it>
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>0(минимальный)</seg></tuv>
	<tuv xml:lang="en"><seg>0(minimal)</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>1</seg></tuv>
	<tuv xml:lang="en"><seg>1</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>2</seg></tuv>
	<tuv xml:lang="en"><seg>2</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>3</seg></tuv>
	<tuv xml:lang="en"><seg>3</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>3(максимальный)</seg></tuv>
	<tuv xml:lang="en"><seg>3(maximum)</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
<it id="1" pos="close">&lt;/select&gt;</it>


</seg></tuv>
	<tuv xml:lang="en"><seg>
<it id="1" pos="close">&lt;/select&gt;</it>


</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
   Прямоугольник может быть создан двумя способами: с помощью класса 
    <bpt id="1">[#$dp8]</bpt>GeoObject<ept id="1">&lt;/a&gt;</ept> с указанием типа геометрии "Прямоугольник"
либо с помощью вспомогательного класса <bpt id="2">[#$dp9]</bpt>Rectangle<ept id="2">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
   A rectangle can be created in two ways: using the <bpt id="1">[#$dp8]</bpt>GeoObject<ept id="1">&lt;/a&gt;</ept> class indicating the "Rectangle" geometry type, or using an auxiliary <bpt id="2">[#$dp9]</bpt>Rectangle<ept id="2">&lt;/a&gt;</ept> class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    При создании прямоугольника необходимо указать координаты двух его противоположных вершин. Также для него могут быть заданы <bpt id="1">[#$dp12]</bpt>свойства<ept id="1">&lt;/a&gt;</ept> (например, содержимое его балуна или хинта) и <bpt id="2">[#$dp13]</bpt>опции<ept id="2">&lt;/a&gt;</ept> (например, цвет его заливки).
</seg></tuv>
	<tuv xml:lang="en"><seg>
    When creating a rectangle, you must specify the coordinates of two opposite vertices. You may also specify its <bpt id="1">[#$dp12]</bpt>properties<ept id="1">&lt;/a&gt;</ept> (for example, the contents of its balloon or hint) and <bpt id="2">[#$dp13]</bpt>options<ept id="2">&lt;/a&gt;</ept> (such as fill color).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
  Прямоугольники могут объединяться в <bpt id="1">[#$dp16]</bpt>коллекции<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
  Rectangles can be combined in a <bpt id="1">[#$dp16]</bpt>collection<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Cоздаем геообъект с типом геометрии "прямоугольник".
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a geo object with the "rectangle" geometry type.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Геометрия = тип геометрии + координаты геообъекта.
</seg></tuv>
	<tuv xml:lang="en"><seg> Geometry = geometry type + the coordinates of the geo object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Тип геометрии - прямоугольник.
</seg></tuv>
	<tuv xml:lang="en"><seg> The geometry type is rectangle.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Координаты.
</seg></tuv>
	<tuv xml:lang="en"><seg> The coordinates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Опции.
 Объект можно перетаскивать.
</seg></tuv>
	<tuv xml:lang="en"><seg> Options.
 The object can be dragged.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Цвет и прозрачность заливки.
</seg></tuv>
	<tuv xml:lang="en"><seg> The fill color and transparency.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Цвет и прозрачность границ.
</seg></tuv>
	<tuv xml:lang="en"><seg> The color and transparency of borders.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем прямоугольник с помощью вспомогательного класса.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a rectangle using an auxiliary class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Задаем координаты диагональных углов прямоугольника.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the coordinates of the diagonal corners of the rectangle.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Опции.
 Цвет и прозрачность заливки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Options.
 The fill color and transparency.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Дополнительная прозрачность заливки..
 Итоговая прозрачность будет не #33(0.2), а 0.1(0.2*0.5).
</seg></tuv>
	<tuv xml:lang="en"><seg> Additional fill transparency.
 The resulting transparency will not be #33(0.2), but 0.1(0.2*0.5).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Радиус скругления углов.
 Данная опция принимается только прямоугольником.
</seg></tuv>
	<tuv xml:lang="en"><seg> The radius of rounded corners.
 This option is accepted only for a rectangle.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Прямоугольник</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Rectangle</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Пример демонструрет создание собственного элемента управления и его размещение на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The example demonstrates creating your own control and putting it on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Встречаются ситуации, когда задачи по работе с картой невозможно решить с помощью
    стандартных элементов управления. В этом случае нужно реализовать свой элемент управления
    и настроить его отображение.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Sometimes, certain tasks with the map cannot be performed using the standard controls. In this case, you need to implement a custom control and customize its appearance.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Элемент управления должен реализовывать интерфейс <ph id="1">[#$dp12]</ph>.
    Данный пример показывает, как создать собственный элемент управления и добавить его на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The control must implement the <ph id="1">[#$dp12]</ph> interface. This example shows how to create a custom control and add it to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создадим экземпляр нашего элемента управления.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating an instance of our control.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавим его в менеджер элементов управления.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding it to the controls manager.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Макет элемента управления.
</seg></tuv>
	<tuv xml:lang="en"><seg>Control layout.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Добавляем обработчик клика по элементу управления.
</seg></tuv>
	<tuv xml:lang="en"><seg>Adding a handler for clicks on the control.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Например, выведем текущее описание элемента управления.
</seg></tuv>
	<tuv xml:lang="en"><seg> For example, displaying the current description of the control.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Свой элемент управления.
</seg></tuv>
	<tuv xml:lang="en"><seg>Custom control.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object}</ph> [parameters] Параметры элемента управления.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object}</ph> [parameters] Control parameters.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object}</ph> [parameters.options] Опции элемента управления.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object}</ph> [parameters.options] Control options.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Boolean}</ph> [parameters.options.visible = true] Показывать ли элемент управления на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Boolean}</ph> [parameters.options.visible = true] Whether to show the control on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{String}</ph> [parameters.options.float = 'right'] Положение элемента управления. Может принимать
значения "none", "left" и "right".
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{String}</ph> [parameters.options.float = 'right'] Position of the control. Can take the values "none", "left" and "right".
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Number|Number[]}</ph> [parameters.options.maxWidth = 90] Максимальная ширина элемента управления. 
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Number|Number[]}</ph> [parameters.options.maxWidth = 90] Maximum width of the control. 
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object}</ph> [parameters.options.position] Позиция элемента управления. При указании опции position значение опции float
автоматически трактуется как "none".
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object}</ph> [parameters.options.position] Position of the control. When the "position" option is set to the value "float",
it is automatically interpreted as "none".
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{String}</ph> [parameters.options.size = 'auto'] Параметр, отвечающий за внешний вид макета элемента управления. 
Может принимать значения:
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{String}</ph> [parameters.options.size = 'auto'] Parameter responsible for the appearance of the control's layout. Can take the values:
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><it id="1" pos="open">&lt;ul&gt;</it>
     <bpt id="2">&lt;li&gt;</bpt>'auto' - стандартный макет кнопки автоматически изменяет свой внешний вид в зависимости от размеров карты и от количества добавленных элементов управления;<ept id="2">&lt;/li&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg><it id="1" pos="open">&lt;ul&gt;</it>
     <bpt id="2">&lt;li&gt;</bpt>'auto' - the default button layout automatically changes its appearance depending on the size of the map and the number of added controls.<ept id="2">&lt;/li&gt;</ept></seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
     <bpt id="1">&lt;li&gt;</bpt>'small' - в макете кнопки отображается иконка, независимо от размера карты;<ept id="1">&lt;/li&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg>
     <bpt id="1">&lt;li&gt;</bpt>'small' - the icon will be displayed in the button layout, regardless of the size of the map.<ept id="1">&lt;/li&gt;</ept></seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
     <bpt id="1">&lt;li&gt;</bpt>'medium' - в макете кнопки отображается только текст, независимо от размера карты;<ept id="1">&lt;/li&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg>
     <bpt id="1">&lt;li&gt;</bpt>'medium' - only the text is displayed in the button layout, regardless of the size of the map.<ept id="1">&lt;/li&gt;</ept></seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
     <bpt id="1">&lt;li&gt;</bpt>'large' - в макете кнопки всегда отображается иконка и текст, независимо от размера карты.<ept id="1">&lt;/li&gt;</ept></seg></tuv>
	<tuv xml:lang="en"><seg>
     <bpt id="1">&lt;li&gt;</bpt>'large' - the icon and the text are always displayed in the button layout, regardless of map size.<ept id="1">&lt;/li&gt;</ept></seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
<it id="1" pos="close">&lt;/ul&gt;</it></seg></tuv>
	<tuv xml:lang="en"><seg>
<it id="1" pos="close">&lt;/ul&gt;</it></seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
<ph id="1">@param  </ph><ph id="2">{Number}</ph> [parameters.options.position.top] Позиция относительно верхнего края.
</seg></tuv>
	<tuv xml:lang="en"><seg>
<ph id="1">@param  </ph><ph id="2">{Number}</ph> [parameters.options.position.top] Position relative to the top edge.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Number}</ph> [parameters.options.position.bottom] Позиция относительно нижнего края.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Number}</ph> [parameters.options.position.bottom] Position relative to the bottom edge.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Number}</ph> [parameters.options.position.left] Позиция относительно левого края.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Number}</ph> [parameters.options.position.left] Position relative to the left edge.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Number}</ph> [parameters.options.position.right] Позиция относительно правого края.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Number}</ph> [parameters.options.position.right] Position relative to the right edge.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object}</ph> [parameters.state] Состояние элемента управления.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object}</ph> [parameters.state] State of the control.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object}</ph> [parameters.data] Данные элемента управления.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object}</ph> [parameters.data] Data for the control.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{String}</ph> [parameters.data.content = "my text"] Содержание, которое будет отображаться.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{String}</ph> [parameters.data.content = "my text"] Content that will be displayed.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{String}</ph> [parameters.data.title = "my title"] Подсказка при наведении на элемент управления.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{String}</ph> [parameters.data.title = "my title"] Tooltip when you hover over the control.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Менеджер событий.
</seg></tuv>
	<tuv xml:lang="en"><seg>Event manager.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Менеджер опций.
</seg></tuv>
	<tuv xml:lang="en"><seg>Options manager.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Менеджер данных.
</seg></tuv>
	<tuv xml:lang="en"><seg>Data manager.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Менеджер состояний.
</seg></tuv>
	<tuv xml:lang="en"><seg>State manager.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Создаем макет элемента управления.
</seg></tuv>
	<tuv xml:lang="en"><seg>Creating the layout of the control.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Устанавливает родительский объект.
</seg></tuv>
	<tuv xml:lang="en"><seg>Sets the parent object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{IControlParent} parent</ph> Родительский объект.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{IControlParent} parent</ph> The parent object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{CustomControl}</ph> Возвращает ссылку на себя.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{CustomControl}</ph> Returns a reference to itself.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Так как операция выполняется асинхронно, прежде чем
 выставить макету родительский элемент, необходимо проверить,
 не изменился ли callback, то есть что это один и тот же запрос.
</seg></tuv>
	<tuv xml:lang="en"><seg> Since the operation is performed asynchronously, before setting the layout of the parent element, you must verify that the callback has not changed (that it is the same request).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Получаем от родителя контейнер, в который должен быть добавлен элемент управления, 
и выставляем макету родительский элемент.
</seg></tuv>
	<tuv xml:lang="en"><seg>Getting from the parent the container that the control must be added to, and setting the parent element for the layout.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{IControlParent}</ph> Родительский объект.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{IControlParent}</ph> The parent object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Собственный элемент управления API 2.1.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. A custom control for the API 2.1.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Функция <ph id="1">[#$dp6]</ph> позволяет загружать результаты <bpt id="2">[#$dp7]</bpt>геокодирования<ept id="2">&lt;/a&gt;</ept>,
    которые представляют собой документ в формате YMapsML.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The <ph id="1">[#$dp6]</ph> function allows loading <bpt id="2">[#$dp7]</bpt>geocoding<ept id="2">&lt;/a&gt;</ept> results as a YMapsML document.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    После того как данные будут загружены, функция преобразует их в коллекцию GeoObjectCollection, которую можно
    отобразить на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    After data is loaded, the function converts it to a GeoObjectCollection
    that can be displayed on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Загрузка результатов геокодирования.
</seg></tuv>
	<tuv xml:lang="en"><seg> Loading geocoding results.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Границы области карты, в которую входит найденный объект.
</seg></tuv>
	<tuv xml:lang="en"><seg> Boundaries of the map area that contains the found object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавление геообъекта на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding a geo object to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Изменение области показа карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Changing the map viewport.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Вызывается в случае неудачной загрузки данных.
</seg></tuv>
	<tuv xml:lang="en"><seg> Called if data loading was unsuccessful.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры YMapsML. Отображение результатов геокодирования.</seg></tuv>
	<tuv xml:lang="en"><seg>YMapsML example. Displaying geocoding results.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Dom-элементы могут генерировать на себе различные типы событий в зависимости от браузера и устройства.
    Например, при наведении мышкой на объект может быть сгенерировано событие 'mousedown', а при нажатии
    на элемент пальцем на экране планшета - событие 'touchstart'.
    API Яндекс.Карт преобразует различные события браузеров в единый список событий.
    Таким образом, вы можете писать один и тот же код по обработке dom-событий во всех браузерах и устройствах,
    которые поддерживаются API.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Dom elements can generate different types of events, depending on the browser and device.
    For example, hovering the mouse over an object can generate the 'mousedown' event, and touching an item on a tablet screen can generate the 'touchstart' event.
   The Yandex.Maps API converts various browser events to a single list of events. 
   This means you can write the same code for handling dom events in all browsers and on all devices that are supported by the API.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Список событий, которыми оперирует API, и схему преобразования событий можно посмотреть в описании интерфейса <ph id="1">[#$dp8]</ph>.
    Подписываться на события dom-элементов можно с помощью <ph id="2">[#$dp9]</ph>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    To view the list of events the API  uses and how events are transformed, see the description of the  <ph id="1">[#$dp8]</ph> interface.
   To subscribe to events on dom elements, you can use  <ph id="2">[#$dp9]</ph>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Даже если пользователь коснется элемента на экране планшета, такие события, как
 'touchstart', 'touchmove' и прочие, будут преобразованы в единый список событий.
 Это позволяет писать кроссплатформенный код и не задумываться о типе устройства.
</seg></tuv>
	<tuv xml:lang="en"><seg> Even if the user touches the element on a tablet screen, events such as 'touchstart', 'touchmove' and others will be converted into a single list of events. This allows you to write cross-platform code and not to think about the type of device.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Погладь кота!</seg></tuv>
	<tuv xml:lang="en"><seg>Pet the cat!</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
<bpt id="1">&lt;button id="clear"&gt;</bpt>Очистить<ept id="1">&lt;/button&gt;</ept>
</seg></tuv>
	<tuv xml:lang="en"><seg>
<bpt id="1">&lt;button id="clear"&gt;</bpt>Clear<ept id="1">&lt;/button&gt;</ept>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Ещё один пример работы с событиями геообъекта - изменение значка метки при наведении на него указателя мыши.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Another example of working with geo object events - changing the placemark icon when the mouse pointer hovers over it.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Смена значка метки при наведении</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Changing a placemark icon when hovering over it</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Ссылку на объект, вызвавший событие,
 можно получить из поля 'target'.
</seg></tuv>
	<tuv xml:lang="en"><seg> A reference to the object that triggered the event; you can get it from the 'target' field.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
   Метка может быть создана двумя способами: с помощью класса 
    <bpt id="1">[#$dp8]</bpt>GeoObject<ept id="1">&lt;/a&gt;</ept> с указанным типом геометрии "точка"
либо с помощью вспомогательного класса <bpt id="2">[#$dp9]</bpt>Placemark<ept id="2">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
   There are two ways to create a placemark: using the <bpt id="1">[#$dp8]</bpt>GeoObject<ept id="1">&lt;/a&gt;</ept> class with the "point" geometry type, or using the <bpt id="2">[#$dp9]</bpt>Placemark<ept id="2">&lt;/a&gt;</ept> auxiliary class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    При создании метки нужно указать координаты соответствущей точки. Также метке можно задать её свойства (например, текст значка) и опции (например, изображение значка).
</seg></tuv>
	<tuv xml:lang="en"><seg>
    When creating a placemark, you need to specify the coordinates of the corresponding point. You can also set the placemark's properties (such as the icon text) and options (such as the icon image).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
   Метки можно объединять в коллекции, а также кластеры (см. примеры <bpt id="1">[#$dp14]</bpt>Коллекции геообъектов<ept id="1">&lt;/a&gt;</ept> и <bpt id="2">[#$dp15]</bpt>Кластер метки<ept id="2">&lt;/a&gt;</ept>).
</seg></tuv>
	<tuv xml:lang="en"><seg>
   Placemarks can be grouped into collections, as well as clusters (see the examples <bpt id="1">[#$dp14]</bpt>Collection of geo objects<ept id="1">&lt;/a&gt;</ept> and <bpt id="2">[#$dp15]</bpt>Placemark cluster<ept id="2">&lt;/a&gt;</ept>).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Метка</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Placemark</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем геообъект с типом геометрии "Точка".
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a geo object with the "Point" geometry type.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Описание геометрии.
</seg></tuv>
	<tuv xml:lang="en"><seg> The geometry description.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Свойства.
</seg></tuv>
	<tuv xml:lang="en"><seg> Properties.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Контент метки.
</seg></tuv>
	<tuv xml:lang="en"><seg> The placemark content.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Опции.
 Иконка метки будет растягиваться под размер ее содержимого.
</seg></tuv>
	<tuv xml:lang="en"><seg> Options.
 The placemark's icon will stretch to fit its contents.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Метку можно перемещать.
</seg></tuv>
	<tuv xml:lang="en"><seg> The placemark can be moved.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В примере используется макет балуна кластера "cluster#balloonTwoColumns".<ph id="1">&lt;br/&gt;</ph>
    Данный макет состоит из двух колонок: списка всех геообъектов и информации о выбранном геообъекте.<ph id="2">&lt;br/&gt;</ph>
    Информация о выбранном геообъекте задается отдельным макетом <ph id="3">&lt;br/&gt;</ph>
    и может быть настроена при помощи опции 'clusterBalloonItemContentLayout'.<ph id="4">&lt;br/&gt;</ph>
    В данном примере задается собственный макет с информацией о геообъекте.<ph id="5">&lt;br/&gt;</ph>
<ph id="6">&lt;br/&gt;</ph>
    <bpt id="7">[#$dp9]</bpt>Макеты<ept id="7">&lt;/a&gt;</ept><ph id="8">&lt;br/&gt;</ph>
    объектов можно создавать с помощью фабрики <ph id="9">[#$dp10]</ph>, используя текcтовые шаблоны. <ph id="10">&lt;br/&gt;</ph>
    Текстовые шаблоны формируют html-содержимое макета на основе хэша с данными, передаваемого в конструктор макета. <ph id="11">&lt;br/&gt;</ph>
    В данном примере поставщик данных - это выбранный в левой колонке геообъект.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example uses the cluster balloon layout "cluster#balloonTwoColumns".<ph id="1">&lt;br/&gt;</ph>
 This layout consists of two columns: a list of all geo objects and information about the selected geo object.<ph id="2">&lt;br/&gt;</ph>
 Information about the selected geo object is defined as a separate layout <ph id="3">&lt;br/&gt;</ph>
and can be configured by using the option 'clusterBalloonItemContentLayout'.<ph id="4">&lt;br/&gt;</ph>
 In this example, a custom layout is defined with information about a geo object.<ph id="5">&lt;br/&gt;</ph>
<ph id="6">&lt;br/&gt;</ph>
 <bpt id="7">[#$dp9]</bpt>Layouts<ept id="7">&lt;/a&gt;</ept><ph id="8">&lt;br/&gt;</ph> can be created with the <ph id="9">[#$dp10]</ph> factory, using text templates.<ph id="10">&lt;br/&gt;</ph> 
Text templates generate HTML content for the layout based on a hash with the data passed to the layout constructor. <ph id="11">&lt;br/&gt;</ph>
 In this example, the data provider is the geo object selected in the left column.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Кастомизация макета балуна кластера "Две колонки".</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Customization of the "Two columns" cluster balloon layout.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Устанавливаем размер макета контента балуна (в пикселях).
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the size of the balloon content layout (in pixels).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Устанавливаем ширину левой колонки, в которой располагается список всех геообъектов кластера.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the width of the left column, which contains a list of all geo objects in the cluster.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
        Для объединения близко расположенных меток в группу (кластер) используется <bpt id="1">[#$dp9]</bpt>кластеризатор<ept id="1">&lt;/a&gt;</ept>.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        The <bpt id="1">[#$dp9]</bpt>clusterer<ept id="1">&lt;/a&gt;</ept> is used for combining closely positioned placemarks in a group (cluster).
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
        Кластеризатор реализуется классом <ph id="1">[#$dp12]</ph>. В качестве параметров конструктору можно передать опции кластеризатора: стиль отображения значка кластера, размер его ячейки и т. д. Список доступных опций можно посмотреть в соответствующем <bpt id="2">[#$dp13]</bpt>разделе<ept id="2">&lt;/sa&gt;</ept> справочника.</seg></tuv>
	<tuv xml:lang="en"><seg>
        The clusterer is implemented by the <ph id="1">[#$dp12]</ph> class. You can pass clusterer options to the constructor as parameters: the display style for the cluster icon, the cell size, and so on. For the list of available options, see the relevant <bpt id="2">[#$dp13]</bpt>section<ept id="2">&lt;/sa&gt;</ept> of the Reference Guide.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
        Для добавления геообъектов в кластеризатор используется метод <bpt id="1">[#$dp16]</bpt>add<ept id="1">&lt;/sa&gt;</ept>. В качестве параметра может быть передан как отдельный геообъект, так и массив геообъектов.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        To add geo objects to the clusterer, use the  <bpt id="1">[#$dp16]</bpt>add<ept id="1">&lt;/sa&gt;</ept> method. Either a separate geo object or an array of geo objects can be passed as the parameter.
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
        Часто возникает задача показать информацию об объекте в составе кластера. В таких случаях можно открыть балун
        кластера с нужной выбранной меткой.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        It is often necessary to show information about an object that is in the cluster. In such cases, you can open the cluster balloon with the appropriate placemark selected.
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Откроем балун на третьей метке в массиве.
</seg></tuv>
	<tuv xml:lang="en"><seg> Opening the balloon on the third placemark in the array.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Если метка находится в кластере, выставим ее в качестве активного объекта.
 Тогда она будет "выбрана" в открытом балуне кластера.
</seg></tuv>
	<tuv xml:lang="en"><seg> If the placemark is in a cluster, it will be set as the active object. This means it will be "selected" in the cluster's open balloon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Если метка не попала в кластер и видна на карте, откроем ее балун.
</seg></tuv>
	<tuv xml:lang="en"><seg> If the placemark was not included in a cluster and is visible on the map, its balloon will open.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Открытие балуна кластера с выбранным объектом</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Opening the cluster balloon with the selected object</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>
    <ph id="4">[#$dp5]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>
    <ph id="4">[#$dp5]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Содержимое балуна может подгружаться динамически. Для этого в callback-функции AJAX-запроса нужно всего лишь
    переопределить свойство геообъекта, отвечающее за содержимое балуна.
    Балун автоматически обновит своё содержимое и размеры.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The contents of the balloon can be loaded dynamically. In the callback function of the AJAX request, you need to 
    override the property of the geo object responsible for the balloon content.
    The balloon will automatically update its content and size.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В качестве примера AJAX-запроса использован механизм <bpt id="1">[#$dp9]</bpt>геокодирования<ept id="1">&lt;/a&gt;</ept> в API.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    As an example of an AJAX request, we use the <bpt id="1">[#$dp9]</bpt>geocoding<ept id="1">&lt;/a&gt;</ept> mechanism in the API.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Динамическая загрузка содержимого балуна</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Dynamically loading balloon content</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Метка, содержимое балуна которой загружается с помощью AJAX.
</seg></tuv>
	<tuv xml:lang="en"><seg> A placemark with balloon contents loaded using AJAX.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Запретим замену обычного балуна на балун-панель.
</seg></tuv>
	<tuv xml:lang="en"><seg> Disabling the replacement of the conventional balloon with the balloon panel.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Заставляем балун открываться даже если в нем нет содержимого.
</seg></tuv>
	<tuv xml:lang="en"><seg> Making the balloon open even if there is no content.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Обрабатываем событие открытия балуна на геообъекте:
 начинаем загрузку данных, затем обновляем его содержимое.
</seg></tuv>
	<tuv xml:lang="en"><seg> Handling the event of opening the balloon on the geo object: begin loading data, then updating its contents.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Имитация задержки при загрузке данных (для демонстрации примера).
</seg></tuv>
	<tuv xml:lang="en"><seg> Imitating a delay when loading data (for demonstration purposes).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Задаем новое содержимое балуна в соответствующее свойство метки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the new content of the balloon in the corresponding placemark property.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp7]</ph> - класс, позволяющий добавить на карту большое количество объектов
    без необходимости создавать метки по отдельности.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp7]</ph> - class that allows you to add a large number of objects to the map without having to create placemarks separately.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    События на оверлеях объектов пропагируются в родительские коллекции. В событии в поле objectId передается уникальный
    идентификатор объекта, на котором произошло событие.
    Идентификаторы для одиночных объектов задаются пользователем, а для кластеров генерируются автоматически при создании.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Events on object overlays propagate to the parent collections. The unique ID of the object on which the event occurred is passed in the objectID field of the event. IDs for single objects are set by the user, and for clusters they are generated automatically during cluster creation.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Обработка событий в ObjectManager</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Event handling in ObjectManager</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Метод setObjectOptions позволяет задавать опции объекта "на лету".
</seg></tuv>
	<tuv xml:lang="en"><seg> The setObjectOptions method allows you to set object options "on the fly".
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Довольно часто возникает задача геокодирования (прямого и обратного) множества географических объектов.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    It is often necessary to geocode (forward and reverse) a large number of geographical objects.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Сервис геокодирования позволяет за один запрос получить данные только для одного адреса
    (или одной пары координат). При этом обмен данными с сервером происходит в асинхронном режиме,
    то есть результаты геокодирования могут быть возвращены в произвольном порядке.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The geocode service allows to get data for a single address (or one pair of coordinates) per request. In addition, communication with the server takes place asynchronously, so geocoding results can be returned in an arbitrary order.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    С помощью метода <ph id="1">[#$dp12]</ph> и класса <ph id="2">[#$dp13]</ph>
    можно объединять несколько асинхронных запросов в цепочку и затем обрабатывать ответ сразу от нескольких запросов.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    You can use the <ph id="1">[#$dp12]</ph> method and <ph id="2">[#$dp13]</ph> class to combine multiple asynchronous requests in a chain and then process the response from several requests at once.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для случаев, когда требуется геокодировать на клиенте одни и те же точки много раз, лучше
    реализовать геокодирование на стороне сервера с кешированием результатов.
    Подробнее об этой технологии читайте в <bpt id="1">[#$dp16]</bpt>руководстве разработчика.<ept id="1">&lt;/a&gt;</ept>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    For those cases when you need to geocode the same points multiple times on the client side, it is better to implement server-side geocoding with caching of results. For more information about this technology, see the <bpt id="1">[#$dp16]</bpt>Developer's Guide.<ept id="1">&lt;/a&gt;</ept>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Множественное геокодирование</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Multiple geocoding</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Можно создать выборку из запроса к геокодеру.
 В этом случае результаты запроса будут добавлены в выборку после того,
 как сервер вернет ответ.
 Обратите внимание, что наилучшим решением будет множественное геокодирование на сервере.
 Подробнее про множественное геокодирование читайте в руководстве разработчика.
</seg></tuv>
	<tuv xml:lang="en"><seg> You can create a selection from the request to the geocoder. In this case, the results will be added to the sample when the server returns the response. Please note that the best solution is multiple geocoding on the server. For more information about multiple geocoding, see the Developer's Guide.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Также в выборку можно добавлять несколько запросов к геокодеру.
 Они выполнятся по цепочке.
</seg></tuv>
	<tuv xml:lang="en"><seg> You can also add multiple geocoder requests to the selection. They will be executed in sequence.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> После того, как все запросы обработаются, они будут добавлены на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> After all requests are processed, they will be added to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Обратите внимание, что все операции асинхронные, поэтому для продолжения
 работы с выборкой следует дождаться готовности данных.
</seg></tuv>
	<tuv xml:lang="en"><seg> Note that all operations are asynchronous, so you will need to wait for data to be prepared before you can continue working with the selection.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Этот код выполнится после того, как все запросы к геокодеру
 вернут ответ и объекты будут добавлены на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> This code will be executed after all the requests to the geocoder return a response and objects are added to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>, <ph id="6">[#$dp7]</ph>, <ph id="7">[#$dp8]</ph>,
    <ph id="8">[#$dp9]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>, <ph id="6">[#$dp7]</ph>, <ph id="7">[#$dp8]</ph>,
    <ph id="8">[#$dp9]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
     В примере при клике на карте появляется метка с адресом точки, в которой произошло нажатие.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
     In the example, when the map is clicked, a placemark appears with the address of the point that was clicked.
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Здесь слушаются два события: клик на карте и перетаскивания метки. При наступлении одного из них
    происходит обращение к геокодеру с координатами точки, в которой произошло событие. Полученный адрес будет записан
    в качестве содержимого метки.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Here two events are listened for: a click on the map and dragging the marker. When one of them occurrs, a request is sent to the geocoder with the coordinates of the point at which the event occurred. The resulting address is recorded as the placemark content.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Определение адреса клика на карте с помощью обратного геокодирования</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Determining the address of a click on the map using reverse geocoding</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Кликните по карте, чтобы узнать адрес</seg></tuv>
	<tuv xml:lang="en"><seg>Click on the map to get the address</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Слушаем клик на карте
</seg></tuv>
	<tuv xml:lang="en"><seg> Listening for a click on the map
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Если метка уже создана – просто передвигаем ее
</seg></tuv>
	<tuv xml:lang="en"><seg> Moving the placemark if it was already created
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Если нет – создаем.
</seg></tuv>
	<tuv xml:lang="en"><seg> Otherwise, creating it.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Слушаем событие окончания перетаскивания на метке.
</seg></tuv>
	<tuv xml:lang="en"><seg> Listening for the dragging end event on the placemark.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создание метки
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a placemark
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Определяем адрес по координатам (обратное геокодирование)
</seg></tuv>
	<tuv xml:lang="en"><seg> Determining the address by coordinates (reverse geocoding)
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    С помощью класса <ph id="1">[#$dp9]</ph> можно формировать набор меток на карте из JSON-описаний их геометрий.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Using the <ph id="1">[#$dp9]</ph> class, you can create a set of placemarks on the map from JSON-descriptions of their geometries.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере показано, как проверять попадание объектов в окружность и изменять их опции через <ph id="1">[#$dp12]</ph>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example shows how to check whether objects fall within a circle and how to change their options using <ph id="1">[#$dp12]</ph>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Объекты, попадающие в круг, будут становиться красными.
</seg></tuv>
	<tuv xml:lang="en"><seg> Objects that fall in the circle will turn red.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Оставшиеся объекты - синими.
</seg></tuv>
	<tuv xml:lang="en"><seg> The remaining objects are blue.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Попадание объектов в окружность.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Objects falling within a circle.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Перетаскивайте круг и следите за цветом меток</seg></tuv>
	<tuv xml:lang="en"><seg>Drag the circle and watch the placemark's color</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    YMapsML позволяет задавать внешний вид отображаемых на карте объектов. Изменение внешнего вида отображаемых объектов
    производится с помощью стилей. <bpt id="1">[#$dp7]</bpt>Стили<ept id="1">&lt;/a&gt;</ept> позволяют задавать некоторые параметры
    отображения геообъектов и формировать их произвольное HTML-представление с помощью
    <bpt id="2">[#$dp8]</bpt>шаблонов<ept id="2">&lt;/a&gt;</ept> (см. <bpt id="3">[#$dp9]</bpt>пример использования шаблонов<ept id="3">&lt;/a&gt;</ept>).
</seg></tuv>
	<tuv xml:lang="en"><seg>
    YMapsML allows you to set the appearance of objects displayed on the map. The appearance of displayed objects is changed
    using styles. <bpt id="1">[#$dp7]</bpt>Styles<ept id="1">&lt;/a&gt;</ept> let you set certain parameters
    for displaying geo objects and generate custom HTML representation using
    <bpt id="2">[#$dp8]</bpt>templates<ept id="2">&lt;/a&gt;</ept> (see the <bpt id="3">[#$dp9]</bpt>example of using templates<ept id="3">&lt;/a&gt;</ept>).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для определения стилей используется элемент <bpt id="1">[#$dp12]</bpt>repr:Style<ept id="1">&lt;/a&gt;</ept>, который
    размещается в элементе  <bpt id="2">[#$dp13]</bpt>repr:Representation<ept id="2">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    To define styles, use the <bpt id="1">[#$dp12]</bpt>repr:Style<ept id="1">&lt;/a&gt;</ept> element, which
    is located in the <bpt id="2">[#$dp13]</bpt>repr:Representation<ept id="2">&lt;/a&gt;</ept> element.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Чтобы указать, какой стиль следует применять при отображении объекта, в элементе
    <bpt id="1">[#$dp16]</bpt>ymaps:GeoObject<ept id="1">&lt;/a&gt;</ept>
    следует задать элемент <bpt id="2">[#$dp17]</bpt>ymaps:style<ept id="2">&lt;/a&gt;</ept>. В нем указывается ссылка
    на стиль, который был определен в элементе <bpt id="3">[#$dp18]</bpt>repr:Style<ept id="3">&lt;/a&gt;</ept>. Таким же
    способом в элементе <bpt id="4">[#$dp19]</bpt>ymaps:GeoObjectCollection<ept id="4">&lt;/a&gt;</ept>
    можно задавать стиль для коллекции геообъектов.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    To specify which style to apply for displaying an object, set the
   <bpt id="2">[#$dp17]</bpt>ymaps:style<ept id="2">&lt;/a&gt;</ept>
    element in the <bpt id="1">[#$dp16]</bpt>ymaps:GeoObject<ept id="1">&lt;/a&gt;</ept> element. It should contain a link
    to a style that was defined in the <bpt id="3">[#$dp18]</bpt>repr:Style<ept id="3">&lt;/a&gt;</ept> element. The style 
    for a collection of geo objects can be set the same way in the
    <bpt id="4">[#$dp19]</bpt>ymaps:GeoObjectCollection<ept id="4">&lt;/a&gt;</ept> element.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры YMapsML. Задание стиля объектов.</seg></tuv>
	<tuv xml:lang="en"><seg>YMapsML examples. Setting styles for objects.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
 Для создания собственного балуна "с нуля" можно использовать фабрику <ph id="1">[#$dp8]</ph>. При этом
 класс балуна должен реализовывать интерфейс <ph id="2">[#$dp9]</ph>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
 To create your own balloon "from scratch", you can use the <ph id="1">[#$dp8]</ph> factory.
 The balloon class must implement the <ph id="2">[#$dp9]</ph> interface.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
 Чтобы балун поддерживал автопозиционирование, то есть автоматически подстраивался под размер содержимого, необходимо
 правильно оповещать о его текущих размерах.
 Для этого необходимо реализовать метод <bpt id="1">[#$dp12]</bpt>getShape()<ept id="1">&lt;/sa&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
 In order for the balloon to support autopositioning, meaning it automatically adjusts to the size of the content, you need to
 correctly state its current size.
 To do this, implement the <bpt id="1">[#$dp12]</bpt>getShape()<ept id="1">&lt;/sa&gt;</ept> method.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
  При изменении контента балуна в методе onSublayoutSizeChange() следует переопределять опцию offset и кидать событие shapechange.
</seg></tuv>
	<tuv xml:lang="en"><seg>
  When you change the content of a balloon in the onSublayoutSizeChange() method, override the offset option and throw the shapechange event.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Пользовательский макет балуна с поддержкой автопозиционирования.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Custom balloon layout with autopositioning.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
<bpt id="1">&lt;button id="set-balloon-header" class="btn"&gt;</bpt>Задать заголовок балуна<ept id="1">&lt;/button&gt;</ept>
<bpt id="2">&lt;button id="set-balloon-content" class="btn"&gt;</bpt>Задать содержимое балуна<ept id="2">&lt;/button&gt;</ept>
</seg></tuv>
	<tuv xml:lang="en"><seg>
<bpt id="1">&lt;button id="set-balloon-header" class="btn"&gt;</bpt>Set the title of a balloon<ept id="1">&lt;/button&gt;</ept>
<bpt id="2">&lt;button id="set-balloon-content" class="btn"&gt;</bpt>Set the contents of a balloon<ept id="2">&lt;/button&gt;</ept>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создание экземпляра карты и его привязка к созданному контейнеру.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating an instance of the map and binding it to the created container.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создание макета балуна на основе Twitter Bootstrap.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a balloon layout based on Twitter Bootstrap.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Строит экземпляр макета на основе шаблона и добавляет его в родительский HTML-элемент.
</seg></tuv>
	<tuv xml:lang="en"><seg>Builds an instance of a layout based on a template and adds it to the parent HTML element.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Удаляет содержимое макета из DOM.
</seg></tuv>
	<tuv xml:lang="en"><seg>Removes the layout contents from DOM.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Метод будет вызван системой шаблонов АПИ при изменении размеров вложенного макета.
</seg></tuv>
	<tuv xml:lang="en"><seg>The method will be invoked by the API's template system when resizing the nested layout.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Сдвигаем балун, чтобы "хвостик" указывал на точку привязки.
</seg></tuv>
	<tuv xml:lang="en"><seg>Moving the balloon so the "tail" points at the anchor point.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Закрывает балун при клике на крестик, кидая событие "userclose" на макете.
</seg></tuv>
	<tuv xml:lang="en"><seg>Closes the balloon when the "x" is clicked, throwing the "userclose" event on the layout.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Используется для автопозиционирования (balloonAutoPan).
</seg></tuv>
	<tuv xml:lang="en"><seg>Used for autopositioning (balloonAutoPan).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{Number[][]}</ph> Координаты левого верхнего и правого нижнего углов шаблона относительно точки привязки.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{Number[][]}</ph> The coordinates of the top left and bottom right corners of the template relative to the anchor point.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Проверяем наличие элемента (в ИЕ и Опере его еще может не быть).
</seg></tuv>
	<tuv xml:lang="en"><seg>Checking the availability of the item (in IE and Opera it might not be there yet).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{jQuery}</ph> [element] Элемент.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{jQuery}</ph> [element] Element.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@returns  </ph><ph id="2">{Boolean}</ph> Флаг наличия.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@returns  </ph><ph id="2">{Boolean}</ph> Availability flag.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создание вложенного макета содержимого балуна.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a nested layout for balloon content.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создание метки с пользовательским макетом балуна.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a placemark with a custom balloon layout.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Не скрываем иконку при открытом балуне.
 hideIconOnBalloonOpen: false,
 И дополнительно смещаем балун, для открытия над иконкой.
 balloonOffset: [3, -40]
</seg></tuv>
	<tuv xml:lang="en"><seg> Not hiding the icon when the balloon is open. hideIconOnBalloonOpen: false, And additionally moving the balloon to open over the icon. balloonOffset: [3, -40]
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>,
    <ph id="7">[#$dp8]</ph>,
    <ph id="8">[#$dp9]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>,
    <ph id="7">[#$dp8]</ph>,
    <ph id="8">[#$dp9]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Поиск объекта по его названию реализуется с помощью функции <ph id="1">[#$dp11]</ph>. Однако, эта функция
    производит поиск среди объектов, размещенных на обычной или народной карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Searching for an object by name is implemented using the <ph id="1">[#$dp11]</ph> function. 	However, this function searches among the objects placed on the regular or public map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    А что делать, если необходимо организовать поиск по собственным объектам
    и интегрировать его с API Яндекс.Карт? Написать собственный провайдер поиска,
    который можно использовать в функции <ph id="1">[#$dp14]</ph> и элементе управления
    <bpt id="2">[#$dp15]</bpt>«Поиск по карте»<ept id="2">&lt;/sa&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    What if you want to organize the search across custom objects and 
	integrate it with the Yandex.Maps API? Write your own search provider,
 	which can be used in the <ph id="1">[#$dp14]</ph> function and the
    <bpt id="2">[#$dp15]</bpt>"Search on map"<ept id="2">&lt;/sa&gt;</ept> control.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Провайдер поиска должен реализовывать интерфейс <ph id="1">[#$dp18]</ph>.
    Данный пример показывает, как написать собственный провайдер и подключить его к
    стандартному элементу управления <bpt id="2">[#$dp19]</bpt>«Поиск по карте»<ept id="2">&lt;/sa&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The search provider must implement the <ph id="1">[#$dp18]</ph> interface. This example 
	shows how to write your own provider and connect it to the standard 
	<bpt id="2">[#$dp19]</bpt>"Search on map"<ept id="2">&lt;/sa&gt;</ept> control.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object[]} points</ph> Массив с точками.

</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object[]} points</ph> Array of points.

</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Ищем запрос в свойстве text каждого элемента массива
 и записываем найденные результаты в новый.
</seg></tuv>
	<tuv xml:lang="en"><seg> Looking for the query in the "text" property of each item in the array and writing the found results to a new one.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Записываем количество найденных результатов.
</seg></tuv>
	<tuv xml:lang="en"><seg> Writing the number of results found.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Создаем экземпляр класса ymaps.control.SearchControl
</seg></tuv>
	<tuv xml:lang="en"><seg>Creating an instance of the ymaps.control.SearchControl class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем элемент управления на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding a control to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Собственный провайдер поиска в API 2.1.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Custom search provider in the API 2.1.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,  
    <ph id="4">[#$dp5]</ph>,  
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>,
    <ph id="7">[#$dp8]</ph>    
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,  
    <ph id="4">[#$dp5]</ph>,  
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>,
    <ph id="7">[#$dp8]</ph>    
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
Данный пример показывает, как можно автоматически строить маршрут и рассчитывать стоимость поездки или доставки. Если кликнуть в любое место на карте или вбить нужный адрес в поисковую строку, то на карте отобразится точка с проложенным к ней маршрутом и информацией о стоимости поездки (доставки).
</seg></tuv>
	<tuv xml:lang="en"><seg>
This example shows how you can automatically build a route and calculate the cost of travel or delivery. If you click anywhere on the map or enter the desired address in the search box, a point is displayed on the map with a route drawn to it and information about the cost of the trip (delivery).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Чтобы отметить начальную и конечную точки, достаточно кликнуть в нужных местах на карте либо ввести адреса в соответствующих поисковых строках.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    To mark the starting and ending points, just click in the desired places on the map or enter addresses in the search boxes.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    При клике на метке начальной точки откроется балун с информацией о маршруте и стоимости доставки.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    When you click on the starting point placemark, a balloon opens with information about the route and cost of delivery.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> По полю skip определяем, что это не дозагрузка данных.
 По getRusultsCount определяем, что есть хотя бы 1 результат.
</seg></tuv>
	<tuv xml:lang="en"><seg> The "skip" field indicates that this is not data uploading. The "getRusultsCount" field shows that there is at least 1 result.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Константы.
</seg></tuv>
	<tuv xml:lang="en"><seg> Constants.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Расчет стоимости доставки</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Calculating delivery cost</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
   Круг может быть создан с помощью класса <bpt id="1">[#$dp8]</bpt>Circle<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
   A circle can be created using the <bpt id="1">[#$dp8]</bpt>Circle<ept id="1">&lt;/a&gt;</ept> class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    При создании круга необходимо указать координаты его центра, а также радиус (в метрах). Также могут быть заданы <bpt id="1">[#$dp11]</bpt>свойства<ept id="1">&lt;/a&gt;</ept> (например, содержимое его балуна или хинта) и <bpt id="2">[#$dp12]</bpt>опции<ept id="2">&lt;/a&gt;</ept> (например, цвет его заливки) круга.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    When creating a circle, you must specify the coordinates of its center and radius (in meters). You can also set  <bpt id="1">[#$dp11]</bpt>properties<ept id="1">&lt;/a&gt;</ept> (such as the contents of the balloon or hint) and <bpt id="2">[#$dp12]</bpt>options<ept id="2">&lt;/a&gt;</ept> (such as the fill color) for the circle.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
  Круги можно объединять в <bpt id="1">[#$dp15]</bpt>коллекции<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
  Circles can be combined in a <bpt id="1">[#$dp15]</bpt>collection<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем круг.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a circle.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Координаты центра круга.
</seg></tuv>
	<tuv xml:lang="en"><seg> The coordinates of the center of the circle.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Радиус круга в метрах.
</seg></tuv>
	<tuv xml:lang="en"><seg> The radius of the circle in meters.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Описываем свойства круга.
 Содержимое балуна.
</seg></tuv>
	<tuv xml:lang="en"><seg> Describing the properties of the circle. The contents of the balloon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Задаем опции круга.
 Включаем возможность перетаскивания круга.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the circle options. Enabling drag-n-drop for the circle.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Цвет заливки.
 Последний байт (77) определяет прозрачность.
 Прозрачность заливки также можно задать используя опцию "fillOpacity".
</seg></tuv>
	<tuv xml:lang="en"><seg> Fill color. The last byte (77) defines transparency. The transparency of the fill can also be set using the option "fillOpacity".
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Прозрачность обводки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Stroke transparency.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Ширина обводки в пикселях.
</seg></tuv>
	<tuv xml:lang="en"><seg> The width of the stroke in pixels.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем круг на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding the circle to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Круг</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Circle</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Часто возникает задача проложить маршрут между заданными точками, а затем проанализировать, в какие области или города попадают сегменты этого маршрута. В данном примере по заранее подготовленным данным создается многоугольник, описывающий МКАД. После получения маршрута делается проверка на попадание его сегментов в этот многоугольник с помощью метода <bpt id="1">[#$dp9]</bpt>searchInside<ept id="1">&lt;/sa&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    It is often necessary to draw a route between specified points, and then analyze in what areas or cities the segments of this route fall on.
 In this example, prepared data is used for creating a polygon defining the MKAD. After the route is received, a check is performed for whether its segments fall within this polygon using the method <bpt id="1">[#$dp9]</bpt>searchInside<ept id="1">&lt;/sa&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    С помощью объекта <ph id="1">[#$dp12]</ph> можно задавать опции или данные сразу группе геообъектов. Здесь показано, как сегменты маршрута, лежащие внутри и снаружи кольцевой автодороги, раскрашиваются в разные цвета.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Using the <ph id="1">[#$dp12]</ph> object, you can set options or data for a group of geo objects at once. As shown here, the route segments that lie inside and outside the ring road are drawn in different colors.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Если мы не хотим, чтобы контур был виден, зададим соответствующую опцию.
</seg></tuv>
	<tuv xml:lang="en"><seg> If we do not want the outline to be visible, we set the appropriate option.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Чтобы корректно осуществлялись геометрические операции
 над спроецированным многоугольником, его нужно добавить на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> To correctly carried out geometric operations on the projected polygon, you must add it to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Объединим в выборку все сегменты маршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg> Combining all the route segments in a selection.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Переберем все сегменты и разобьем их на отрезки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Iterating all the segments and dividing them into sections.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создадим новую выборку, содержащую:
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a new selection, containing:
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>отрезки, описываюшие маршрут;
</seg></tuv>
	<tuv xml:lang="en"><seg>sections that define the route;
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>начальную и конечную точки;
</seg></tuv>
	<tuv xml:lang="en"><seg>the start and end points;
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>промежуточные точки.
</seg></tuv>
	<tuv xml:lang="en"><seg>intermediate points.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Найдем все объекты, попадающие внутрь МКАД.
</seg></tuv>
	<tuv xml:lang="en"><seg> Finding all the objects that fall inside the ring road.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Найдем объекты, пересекающие МКАД.
</seg></tuv>
	<tuv xml:lang="en"><seg> Finding the objects that intersect with the ring road.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Раскрасим в разные цвета объекты внутри, снаружи и пересекающие МКАД.
</seg></tuv>
	<tuv xml:lang="en"><seg> Using different colors for objects inside, outside and intersecting the ring road.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Объекты за пределами МКАД получим исключением полученных выборок из
 исходной.
</seg></tuv>
	<tuv xml:lang="en"><seg> We will get objects outside the ring road by excluding resulting selections from the source selection.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Пересечение маршрута с многоугольником на примере МКАД.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. The intersection of a route with a polygon using the example of the Moscow Ring Road.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Маршрут внутри МКАД помечен красным, снаружи - синим</seg></tuv>
	<tuv xml:lang="en"><seg>The route inside the ring road is marked in red, and outside is blue</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Геообъекты можно объединять в коллекции. Вы можете создавать коллекции для групповых операций над геообъектами.
    Например, можно подписываться на события объектов или задавать им опции.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Geo objects can be grouped into collections. You can create collections for group operations on geo objects.
    For example, you can subscribe to events of objects or set their options.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Добавление геообъектов в коллекцию</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Adding geo objects to a collection</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Через коллекции можно подписываться на события дочерних элементов.
</seg></tuv>
	<tuv xml:lang="en"><seg> You can subscribe to events of child elements via a collection.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Через коллекции можно задавать опции дочерним элементам.
</seg></tuv>
	<tuv xml:lang="en"><seg> You can set options for child elements via a collection.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    С помощью класса  <ph id="1">[#$dp8]</ph> можно формировать набор меток на карте из JSON-описаний их геометрий.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Using the <ph id="1">[#$dp8]</ph> class, you can create a set of placemarks on the map from JSON-descriptions of their geometries.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Метод  <bpt id="1">[#$dp11]</bpt>search<ept id="1">&lt;/sa&gt;</ept> позволяет фильтровать объекты выборки по различным признакам.
    Например выбирать объекты с определенным значением полей данных или выбирать объекты по типу геометрии.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The <bpt id="1">[#$dp11]</bpt>search<ept id="1">&lt;/sa&gt;</ept> method allows you to filter the objects in the selection according to various criteria.
    For example, to select objects with a specific value in data fields or select objects based on the geometry type.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере показано, как осуществлять выборку геообъектов по нескольким признакам, делать объединение или пересечение выборок.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example shows how to select geo objects by multiple characteristics, and make a combination or a sample of the selection.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Функция, которая по состоянию чекбоксов в меню
 показывает или скрывает геообъекты из выборки.
</seg></tuv>
	<tuv xml:lang="en"><seg> A function, which according to the state of the checkboxes in the menu shows or hides the geo objects from the selection.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Отберем объекты по цвету. 
</seg></tuv>
	<tuv xml:lang="en"><seg> Selecting objects by color. 
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Будем искать по двум параметрам:
</seg></tuv>
	<tuv xml:lang="en"><seg> We will search using two parameters:
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>для точечных объектов по полю preset;
</seg></tuv>
	<tuv xml:lang="en"><seg>for point objects using the "preset" field;
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>для контурных объектов по цвету заливки.
</seg></tuv>
	<tuv xml:lang="en"><seg>for contour objects using the fill color.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> После того, как мы нашли все зеленые объекты, добавим к ним
 объекты, найденные на предыдущей итерации.
</seg></tuv>
	<tuv xml:lang="en"><seg> After we have found all the green objects, we will add them to the objects found in the previous iteration.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Отберем объекты по форме.
</seg></tuv>
	<tuv xml:lang="en"><seg> Selecting objects based on shape.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Мы отобрали объекты по цвету и по форме. Покажем на карте объекты,
 которые совмещают нужные признаки.
</seg></tuv>
	<tuv xml:lang="en"><seg> We selected objects by color and shape. Now we'll show objects on the map that combine the desired characteristics.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Объекты, которые не попали в выборку, нужно убрать с карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Objects that were not included in the selection must be removed from the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создадим объекты из их JSON-описания и добавим их на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating objects from their JSON descriptions and adding them to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Фильтрация объектов по признакам.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Filtering objects by attributes.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
            Фильтр по цветам <ph id="1">&lt;br&gt;</ph>
            <ph id="2">&lt;input type="checkbox" id="red" checked="true"&gt;</ph>Красные<it id="7" pos="close">&lt;/input&gt;</it><ph id="3">&lt;br&gt;</ph>
            <ph id="4">&lt;input type="checkbox" id="green" checked="true"&gt;</ph>Зеленые<it id="8" pos="close">&lt;/input&gt;</it><ph id="5">&lt;br&gt;</ph>
            <ph id="6">&lt;input type="checkbox" id="yellow" checked="true"&gt;</ph>Желтые<it id="9" pos="close">&lt;/input&gt;</it>
        </seg></tuv>
	<tuv xml:lang="en"><seg>
            Filter by color <ph id="1">&lt;br&gt;</ph>
            <ph id="2">&lt;input type="checkbox" id="red" checked="true"&gt;</ph>Red<it id="7" pos="close">&lt;/input&gt;</it><ph id="3">&lt;br&gt;</ph>
            <ph id="4">&lt;input type="checkbox" id="green" checked="true"&gt;</ph>Green<it id="8" pos="close">&lt;/input&gt;</it><ph id="5">&lt;br&gt;</ph>
            <ph id="6">&lt;input type="checkbox" id="yellow" checked="true"&gt;</ph>Yellow<it id="9" pos="close">&lt;/input&gt;</it>
        </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
            Фильтр по геометриям <ph id="1">&lt;br&gt;</ph>
            <ph id="2">&lt;input type="checkbox" id="point" checked="true"&gt;</ph>Точки<it id="7" pos="close">&lt;/input&gt;</it><ph id="3">&lt;br&gt;</ph>
            <ph id="4">&lt;input type="checkbox" id="polygon" checked="true"&gt;</ph>Многоугольники<it id="8" pos="close">&lt;/input&gt;</it><ph id="5">&lt;br&gt;</ph>
            <ph id="6">&lt;input type="checkbox" id="circle" checked="true"&gt;</ph>Круги<it id="9" pos="close">&lt;/input&gt;</it>
        </seg></tuv>
	<tuv xml:lang="en"><seg>
            Filter by geometry <ph id="1">&lt;br&gt;</ph>
            <ph id="2">&lt;input type="checkbox" id="point" checked="true"&gt;</ph>Points<it id="7" pos="close">&lt;/input&gt;</it><ph id="3">&lt;br&gt;</ph>
            <ph id="4">&lt;input type="checkbox" id="polygon" checked="true"&gt;</ph>Polygons<it id="8" pos="close">&lt;/input&gt;</it><ph id="5">&lt;br&gt;</ph>
            <ph id="6">&lt;input type="checkbox" id="circle" checked="true"&gt;</ph>Circles<it id="9" pos="close">&lt;/input&gt;</it>
        </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <bpt id="1">[#$dp7]</bpt>Макеты<ept id="1">&lt;/a&gt;</ept> объектов можно создавать с помощью фабрики <ph id="2">[#$dp8]</ph>, используя текcтовые шаблоны.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <bpt id="1">[#$dp7]</bpt>Layouts<ept id="1">&lt;/a&gt;</ept> can be created using the <ph id="2">[#$dp8]</ph> factory using text templates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере создается пользовательский макет <bpt id="1">[#$dp11]</bpt>элемента управления масштабом карты<ept id="1">&lt;/sa&gt;</ept>. Макет элемента управления строится на основе его данных, состояния и опций. Макет автоматически перестраивается при изменении значений полей, состояния или опций, которые используются в его текстовом шаблоне.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example creates a custom layout for the <bpt id="1">[#$dp11]</bpt>map zoom control<ept id="1">&lt;/sa&gt;</ept>. 
The layout of the control is based on its data, status, and options. 
The layout is automatically rebuilt when changes are made to the values of fields, states, or options that are used in its text template.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В ответ на действия пользователя (клик мышкой по кнопке) макет может генерировать специальные события, описанные в его интерфейсе. Элемент управления слушает эти события на макете и пытается изменить свое состояние, данные или опции. После того, как элемент управления осуществил изменения, макет перестраивается на основе обновленных данных.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In response to a user action (a mouse click on the button), the layout can generate special events that are defined in its interface. The control listens to these events on the layout and tries to change its state, data, or options. After the control has implemented changes, the layout is rebuilt based on the updated data.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Список событий, на которые реагирует ползунок маштаба, описан в интерфейсе <ph id="1">[#$dp16]</ph>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The list of events that the zoom slider responds to is provided in the <ph id="1">[#$dp16]</ph> interface.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создадим пользовательский макет ползунка масштаба.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a custom layout for the zoom slider.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Переопределяем методы макета, чтобы выполнять дополнительные действия
 при построении и очистке макета.
</seg></tuv>
	<tuv xml:lang="en"><seg> Redefining methods of the layout, in order to perform additional steps when building and clearing the layout.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Вызываем родительский метод build.
</seg></tuv>
	<tuv xml:lang="en"><seg> Calling the "build" parent method.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Привязываем функции-обработчики к контексту и сохраняем ссылки
 на них, чтобы потом отписаться от событий.
</seg></tuv>
	<tuv xml:lang="en"><seg> Binding handler functions to the context and storing references to them in order to unsubscribe from the event later.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Начинаем слушать клики на кнопках макета.
</seg></tuv>
	<tuv xml:lang="en"><seg> Beginning to listen for clicks on the layout buttons.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Снимаем обработчики кликов.
</seg></tuv>
	<tuv xml:lang="en"><seg> Removing click handlers.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Вызываем родительский метод clear.
</seg></tuv>
	<tuv xml:lang="en"><seg> Calling the "clear" parent method.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Генерируем событие, в ответ на которое
 элемент управления изменит коэффициент масштабирования карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Generating an event, in response to which the control will change the map zoom.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Пользовательский макет элемента изменения масштаба.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Custom layout for the zoom control.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Каждому географическому объекту в YMapsML ставятся в соответствие геометрическая фигура и геообъект, используемый для
    отображения этой фигуры на карте. Описание фигур и их привязка к географическим координатам задается
    в соответствующих YMapsML-элементах. Для фигуры "ломаная линия" предназначен элемент <bpt id="1">[#$dp11]</bpt>gml:LineString<ept id="1">&lt;/a&gt;</ept>.
    Он содержит координаты вершин линии.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In YMapsML, each geographical object is associated with a geometric shape
	and a geo object that is used for displaying this shape on the map. The shape definitions and their anchors to geographical coordinates are set in
	corresponding YMapsML elements. The <bpt id="1">[#$dp11]</bpt>gml:LineString<ept id="1">&lt;/a&gt;</ept> element is designated for the "polyline" shape.
	This element contains the coordinates of line endpoints.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для загрузки YMapsML-данных предназначена функция <ph id="1">[#$dp14]</ph>. После того как данные загрузятся, функция преобразует их в
    <ph id="2">[#$dp15]</ph> и передает в качестве параметра функции-обработчику. Коллекцию геообъектов GeoObjectCollection можно отобразить
    на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The <ph id="1">[#$dp14]</ph> function is for loading YMapsML data. After data has loaded, the function converts the data to
	<ph id="2">[#$dp15]</ph> and passes it to the handler function as a parameter. A GeoObjectCollection can be displayed
	on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавление коллекции геообъектов на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding geo object collections to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Внешний вид отображаемых объектов задается в элементе
    <bpt id="1">[#$dp14]</bpt>repr:Representation<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The appearance of the displayed objects is set in the <bpt id="1">[#$dp14]</bpt>repr:Representation<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для загрузки YMapsML-данных предназначена функция <ph id="1">[#$dp17]</ph>. После того как данные загрузятся, функция преобразует их в
     коллекцию геообъектов <ph id="2">[#$dp18]</ph> и затем передает ее в качестве параметра функции-обработчику.
    Коллекцию GeoObjectCollection можно отобразить
    на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The <ph id="1">[#$dp17]</ph> function is for loading YMapsML data. After data has loaded, the function converts the data to
	<ph id="2">[#$dp18]</ph> and then passes it to the handler function as a parameter. 
	A GeoObjectCollection can be displayed
	on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры YMapsML. Смена значка у метки.</seg></tuv>
	<tuv xml:lang="en"><seg>YMapsML examples. Changing a placemark icon.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Элемент управления <bpt id="1">[#$dp8]</bpt>«поиск по карте»<ept id="1">&lt;/sa&gt;</ept> умеет находить топонимы, размещенные на обычной или народной карте. 
    Но часто необходимо найти не определенный топоним, а какую-либо организацию. Например: кафе, ресторан или магазин. 
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The <bpt id="1">[#$dp8]</bpt>"Search on map"<ept id="1">&lt;/sa&gt;</ept> control can find toponyms on the normal or public map.
	But it is often necessary to find a business, instead of a specific toponym. For example, a cafe, restaurant, or store. 
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Чтобы научить элемент управления искать организации, необходимо подключить 
    определенный провайдер данных — <bpt id="1">[#$dp11]</bpt>«yandex#search»<ept id="1">&lt;/sa&gt;</ept>. 
    Рассмотрим на примере, как это сделать.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    To teach the control to search for organizations, you must enable
	a specific data provider — <bpt id="1">[#$dp11]</bpt>"yandex#search"<ept id="1">&lt;/sa&gt;</ept>.
	Let's look at examples of how to do this.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создадим экземпляр элемента управления «поиск по карте», 
 с установленной опцией провайдера данных для поиска по организациям.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating an instance of the "search on map" control,
 with the data provider for searching by organizations set.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Программно выполним поиск кафе в текущей 
 прямоугольной области карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Programmatically searching for a cafe in the current rectangular map area.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>, 
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>, 
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>, 
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>, 
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <bpt id="1">[#$dp8]</bpt>Макеты<ept id="1">&lt;/a&gt;</ept>
    объектов можно создавать с помощью фабрики <ph id="2">[#$dp9]</ph>,
    используя текcтовые шаблоны.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <bpt id="1">[#$dp8]</bpt>Layouts<ept id="1">&lt;/a&gt;</ept>
    of objects can be created using the <ph id="2">[#$dp9]</ph> factory,
    using text templates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере создается адаптивный пользовательский макет <bpt id="1">[#$dp12]</bpt>кнопки<ept id="1">&lt;/sa&gt;</ept>.
    Макет элемента управления строится на основе его данных, состояния и опций.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example creates an adaptive custom <bpt id="1">[#$dp12]</bpt>button<ept id="1">&lt;/sa&gt;</ept> layout. 
	The layout of the control is based on its data, status, and options.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Адаптивный пользовательский макет кнопки в API 2.1</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Adaptive custom button layout in the API 2.1</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В примере используется макет балуна кластера "cluster#balloonAccordion".<ph id="1">&lt;br/&gt;</ph>
    В макете выводится список геообъектов, а после клика по элементу происходит отображение информации о геообъекте.<ph id="2">&lt;br/&gt;</ph>
    Информация о выбранном геообъекте задается отдельным макетом 
    и может быть настроена при помощи опции 'clusterBalloonItemContentLayout'.<ph id="3">&lt;br/&gt;</ph>
    В данном примере задается собственный макет с информацией о геообъекте.<ph id="4">&lt;br/&gt;</ph>
<ph id="5">&lt;br/&gt;</ph>
    <bpt id="6">[#$dp9]</bpt>Макеты<ept id="6">&lt;/a&gt;</ept>
    объектов можно создавать с помощью фабрики <ph id="7">[#$dp10]</ph>,
    используя текcтовые шаблоны. <ph id="8">&lt;br/&gt;</ph>
    Текстовые шаблоны формируют html-содержимое макета на основе хэша с данными,
    передаваемого в конструктор макета. <ph id="9">&lt;br/&gt;</ph>
    В данном примере поставщик данных - это геообъект.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The example uses the "cluster#balloonAccordion" cluster balloon layout.<ph id="1">&lt;br/&gt;</ph>
    This layout displays a list of geo objects, and clicking on an item shows information about the geo object.<ph id="2">&lt;br/&gt;</ph>
    The information about the selected geo object is set by a separate layout 
    and can be configured using 'clusterBalloonItemContentLayout'.<ph id="3">&lt;br/&gt;</ph>
    This example sets a custom layout with information about a geo object.<ph id="4">&lt;br/&gt;</ph>
<ph id="5">&lt;br/&gt;</ph>
    <bpt id="6">[#$dp9]</bpt>Layouts<ept id="6">&lt;/a&gt;</ept>
    of objects can be created using the factory <ph id="7">[#$dp10]</ph>,
   using text templates. <ph id="8">&lt;br/&gt;</ph>
    Text templates generate HTML content for the layout based on a hash with data,
    to pass to the layout constructor. <ph id="9">&lt;br/&gt;</ph>
    In this example, the data provider is the geo object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Возможные значения цветов иконок.
</seg></tuv>
	<tuv xml:lang="en"><seg> Possible values for icon colors.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Устанавливаем стандартный макет балуна кластера "Аккордеон".
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the "Accordion" standard layout for a cluster balloon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Можно отключить отображение иконок геообъектов в списке. 
 В браузере Internet Explorer ниже 9й версии иконки никогда не будут отображаться.
 clusterBalloonAccordionShowIcons: false
</seg></tuv>
	<tuv xml:lang="en"><seg> You can disable displaying icons for geo objects in the list.
 In Internet Explorer earlier than version 9, icons are never displayed.
 clusterBalloonAccordionShowIcons: false
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Собственный макет информации о геообъекте в макете балуна кластера "Аккордеон".</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Custom layout for information about a geo object in the "Accordion" layout of the cluster balloon.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Балун можно отображать в <bpt id="1">[#$dp8]</bpt>пейне<ept id="1">&lt;/sa&gt;</ept>, границы которого выходят за пределы карты. Это удобно, когда карта маленького размера, но в балуне нужно отобразить большое количество информации.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The balloon can be displayed in a <bpt id="1">[#$dp8]</bpt>pane<ept id="1">&lt;/sa&gt;</ept> with boundaries that go off the map. This is useful when the map is small, but the balloon needs to display a large amount of information.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В этом примере дополнительно к использованию опции отображения балуна во внешнем пейне установлено слежение за текущим положением точки привязки, в момент перемещения которой за пределы видимой области карты, балун снова помещается во внутренний пейн.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In this example, in addition to using options for displaying a balloon in an external pane, tracking is enabled for the current position of the anchor point, which when moved outside the visible area of the map, the balloon once again fits inside the internal pane.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Балун, выходящий за пределы карты</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. A balloon that goes off the map</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> При открытии балуна начинаем слушать изменение центра карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> When opening a balloon, begin to listen for a change to the center of the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Вызываем функцию в двух случаях:
</seg></tuv>
	<tuv xml:lang="en"><seg> Calling a function in two cases:
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> 1) в начале движения (если балун во внешнем контейнере);
</seg></tuv>
	<tuv xml:lang="en"><seg> 1) in the beginning of the movement (if the balloon is in an external container);
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> 2) в конце движения (если балун во внутреннем контейнере).
</seg></tuv>
	<tuv xml:lang="en"><seg> 2) at the end of the movement (if the balloon is in the internal container).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Вызываем функцию сразу после открытия.
</seg></tuv>
	<tuv xml:lang="en"><seg> Calling the function immediately after opening.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> При закрытии балуна удаляем слушатели.
</seg></tuv>
	<tuv xml:lang="en"><seg> When closing a balloon, we remove listeners.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Используется при изменении зума.
</seg></tuv>
	<tuv xml:lang="en"><seg> Used when changing the zoom.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Определяем, попадает ли точка привязки балуна в видимую область карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Determining whether the anchor point of a balloon is in the visible area of the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Если точка привязки не попадает в видимую область карты, переносим балун во внутренний контейнер
</seg></tuv>
	<tuv xml:lang="en"><seg> If the anchor does not fall within the visible area of the map, we move the balloon into the inner container
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> и наоборот.
</seg></tuv>
	<tuv xml:lang="en"><seg> and the reverse.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры YMapsML. Наследование стилей.</seg></tuv>
	<tuv xml:lang="en"><seg>YMapsML examples. Style inheritance.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Внешний вид отображаемых объектов задается в элементе
    <bpt id="1">[#$dp9]</bpt>repr:Representation<ept id="1">&lt;/a&gt;</ept>.
    В <bpt id="2">[#$dp10]</bpt>документации<ept id="2">&lt;/a&gt;</ept> можно ознакомиться с подробной инструкцией по
    заданию стиля отображаемых объектов.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The visual appearance of displayed objects is set in the
	<bpt id="1">[#$dp9]</bpt>repr:Representation<ept id="1">&lt;/a&gt;</ept> element.
	For detailed instructions on setting styles for displayed objects,
	see the <bpt id="2">[#$dp10]</bpt>documentation<ept id="2">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    С помощью стилей можно изменить параметры стандартного представления геообъектов.
    Например, можно задать толщину линий ломаных или цвет заливки многоугольника.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    You can use styles to change parameters for the standard representation of geo objects.
	For example, you can set the line width for polylines or the fill color for polygons.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Внешний вид отображаемых объектов задается в элементе <bpt id="1">[#$dp9]</bpt>repr:Representation<ept id="1">&lt;/a&gt;</ept>.
    В <bpt id="2">[#$dp10]</bpt>документации<ept id="2">&lt;/a&gt;</ept> можно ознакомиться с подробной инструкцией по
    заданию стиля отображаемых объектов.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The visual appearance of displayed objects is set in the <bpt id="1">[#$dp9]</bpt>repr:Representation<ept id="1">&lt;/a&gt;</ept> element.
	For detailed instructions on setting styles for displayed objects,
	see the <bpt id="2">[#$dp10]</bpt>documentation<ept id="2">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры YMapsML. Подгрузка стилей из отдельного файла.</seg></tuv>
	<tuv xml:lang="en"><seg>YMapsML Examples. Loading styles from a separate file.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Вызывается в случае неудачной загрузки стилей.
</seg></tuv>
	<tuv xml:lang="en"><seg> Called if loading styles was unsuccessful.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>,
    <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>,
    <bpt id="3">[#$dp4]</bpt>collection.Item<ept id="3">&lt;/a&gt;</ept>,
    <bpt id="4">[#$dp5]</bpt>IControl<ept id="4">&lt;/a&gt;</ept>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>,
    <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>,
    <bpt id="3">[#$dp4]</bpt>collection.Item<ept id="3">&lt;/a&gt;</ept>,
    <bpt id="4">[#$dp5]</bpt>IControl<ept id="4">&lt;/a&gt;</ept>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В примере показано, как создавать собственные элементы управления. Класс элемента управления
    должен реализовывать интерфейс <bpt id="1">[#$dp7]</bpt>IControl<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The example shows how to create custom controls. The control class
	must implement the <bpt id="1">[#$dp7]</bpt>IControl<ept id="1">&lt;/a&gt;</ept> interface.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для ускорения разработки, можно отнаследовать класс элемента управления от класса <bpt id="1">[#$dp10]</bpt>collection.Item<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    For faster development, you can inherit the control class from the <bpt id="1">[#$dp10]</bpt>collection.Item<ept id="1">&lt;/a&gt;</ept> class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Собственный элемент управления.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Custom control.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Пример реализации собственного элемента управления на основе наследования от collection.Item.
 Элемент управления отображает название объекта, который находится в центре карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> An example implementation of a custom control based on inheritance from collection.Item. The control displays the name of the object that is in the center of the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем собственный класс.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a custom class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> И наследуем его от collection.Item.
</seg></tuv>
	<tuv xml:lang="en"><seg> And inheriting it from the collection.Item.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем HTML-элемент с текстом.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating an HTML element with the text.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Запрашиваем данные после изменения положения карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Requesting data after changing the position of the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Сразу же запрашиваем название места.
</seg></tuv>
	<tuv xml:lang="en"><seg> Immediately requesting the name of the place.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Запрашиваем информацию о месте по координатам центра карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Requesting information about the place by the coordinates of the map center.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Указываем, что ответ должен быть в формате JSON.
</seg></tuv>
	<tuv xml:lang="en"><seg> Specifying that the response should be in JSON format.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Устанавливаем лимит на кол-во записей в ответе.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting a limit on the number of records in the response.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Будем обрабатывать только ответ от последнего запроса.
</seg></tuv>
	<tuv xml:lang="en"><seg> We will only process the response from the last request.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Данные от сервера были получены и теперь их необходимо отобразить.
 Описание ответа в формате JSON.
</seg></tuv>
	<tuv xml:lang="en"><seg> The data has been received from the server and now it must be displayed. Description of the response in JSON format.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
   Шаблоны позволяют сформировать произвольное HTML-представление геообъектов, балунов и хинтов.
</seg></tuv>
	<tuv xml:lang="en"><seg>
   Templates allow you to make custom HTML representations of geo objects, balloons, and hints.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
  Для определения шаблона используется элемент <bpt id="1">[#$dp9]</bpt>repr:Representation<ept id="1">&lt;/a&gt;</ept>, внутри
    которого в контейнере <bpt id="2">[#$dp10]</bpt>repr:text<ept id="2">&lt;/a&gt;</ept> размещается HTML-код (тело шаблона).
</seg></tuv>
	<tuv xml:lang="en"><seg>
  To define a template, use the
<bpt id="1">[#$dp9]</bpt>repr:Representation<ept id="1">&lt;/a&gt;</ept> element, which
	  contains the HTML code (the template body) in the <bpt id="2">[#$dp10]</bpt>repr:text<ept id="2">&lt;/a&gt;</ept> container.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    При использовании шаблона доступ к значению любого XML-элемента, находящегося внутри элемента
    <bpt id="1">[#$dp13]</bpt>ymaps:GeoObject<ept id="1">&lt;/a&gt;</ept>
    или <bpt id="2">[#$dp14]</bpt>ymaps:GeoObjectCollection<ept id="2">&lt;/a&gt;</ept>, осуществляется с помощью
    обращения к соответствующей переменной.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    When using a template, access to the value of any
XML element located inside the
	<bpt id="1">[#$dp13]</bpt>ymaps:GeoObject<ept id="1">&lt;/a&gt;</ept> 
	or <bpt id="2">[#$dp14]</bpt>ymaps:GeoObjectCollection<ept id="2">&lt;/a&gt;</ept> element requires 
	accessing the corresponding substitution variable.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для определения переменной используется строка вида $[имя_переменной|значение_по_умолчанию].
    Имя переменной представляет собой местоположение этого XML-элемента внутри элемента, к которому применяется стиль. Местоположение задаётся
    последовательным перечислением названий всех родительских элементов и названия самого элемента, в качестве разделителя используется точка.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    To define a substitution, use a string in the format 
$[substitution_name]|default_value].
	The substitution name is the location of this XML element inside the element that the style is applied to. The location is defined
	using an ordered list of the names of all parent elements and the name of the element itself. A dot is used as the separator.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Подробнее о шаблонах см. в <bpt id="1">[#$dp19]</bpt>документации<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    For more information about templates, see the <bpt id="1">[#$dp19]</bpt>documentation<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры YMapsML. Отображение HTML-содержимого в балуне.</seg></tuv>
	<tuv xml:lang="en"><seg>YMapsML examples. Displaying HTML content in a balloon.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создание экземпляра карты
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a map instance
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Загрузка YMapsML-файла
</seg></tuv>
	<tuv xml:lang="en"><seg> Loading a YMapsML file
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>, <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>,
    <bpt id="3">[#$dp4]</bpt>Placemark<ept id="3">&lt;/a&gt;</ept>, <bpt id="4">[#$dp5]</bpt>option.presetStorage<ept id="4">&lt;/a&gt;</ept>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>, <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>,
    <bpt id="3">[#$dp4]</bpt>Placemark<ept id="3">&lt;/a&gt;</ept>, <bpt id="4">[#$dp5]</bpt>option.presetStorage<ept id="4">&lt;/a&gt;</ept>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере на карту добавлена метка, при клике на которой открывается балун-панель с заданным содержимым.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In this example, a placemark is added to the map that, when clicked, opens a balloon panel with the specified content.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для задания стиля метки из <bpt id="1">[#$dp9]</bpt>набора встроенных стилей<ept id="1">&lt;/a&gt;</ept> используется опция <bpt id="2">&lt;b&gt;</bpt>preset<ept id="2">&lt;/b&gt;</ept>.
    В API предустановлено пять различных стилей для меток (в скобках указаны соответствующие ключи):
    </seg></tuv>
	<tuv xml:lang="en"><seg>
    To set the placemark style from a <bpt id="1">[#$dp9]</bpt>set of built-in styles<ept id="1">&lt;/a&gt;</ept>, use the <bpt id="2">&lt;b&gt;</bpt>preset<ept id="2">&lt;/b&gt;</ept> option.
    The API has five preset styles for placemarks (the corresponding keys are shown in parentheses):
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Метки с текстом ('islands#icon');</seg></tuv>
	<tuv xml:lang="en"><seg>placemarks with text ('islands#icon');</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>метки, тянущиеся под текст ('islands#stretchyIcon');</seg></tuv>
	<tuv xml:lang="en"><seg>placemarks that stretch to fit the text ('islands#stretchyIcon');</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>метки с точкой в центре ('islands#dotIcon');</seg></tuv>
	<tuv xml:lang="en"><seg>placemarks with a dot in the center ('islands#dotIcon');</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>метки в виде кругов ('islands#circleIcon');</seg></tuv>
	<tuv xml:lang="en"><seg>placemarks in the form of circles ('islands#circleIcon');</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>метки в виде кругов с точкой в центре ('islands#circleDotIcon').</seg></tuv>
	<tuv xml:lang="en"><seg>placemarks in the form of circles with a dot in the center ('islands#circleDotIcon').</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для каждого стиля на выбор предоставлено 16 цветов. API позволяет задавать меткам также собственные цвета для всех стилей, кроме 'islands#stretchyIcon'.
    Как задавать меткам собственные цвета см. в следующем <bpt id="1">[#$dp23]</bpt>примере<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    For each style there are 16 colors. The API allows you to also specify custom colors for placemarks for all styles, except 'islands#stretchyIcon'.
       For information on how to set custom colors for placemarks, see the following <bpt id="1">[#$dp23]</bpt>example<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Обратите внимание, что в API 2.1 по умолчанию карта создается с элементами управления.
 Если вам не нужно их добавлять на карту, в ее параметрах передайте пустой массив в поле controls.
</seg></tuv>
	<tuv xml:lang="en"><seg> Please note that in the API 2.1, the map is created with controls by default. If you don't need to add them to the map, pass an empty array in the "controls" field in its parameters.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Метка и балун-панель.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Placemark and balloon panel.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    API позволяет определять координаты объекта по его названию (<bpt id="1">[#$dp7]</bpt>прямое геокодирование<ept id="1">&lt;/a&gt;</ept>) и
     название объекта по его координатам (<bpt id="2">[#$dp8]</bpt>обратное геокодирование<ept id="2">&lt;/a&gt;</ept>).
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The API can determine the coordinates of an object by its name (<bpt id="1">[#$dp7]</bpt>forward geocoding<ept id="1">&lt;/a&gt;</ept>)
    and the name of an object by its coordinates (<bpt id="2">[#$dp8]</bpt>reverse geocoding<ept id="2">&lt;/a&gt;</ept>).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Оба вида геокодирования производятся с помощью функции <ph id="1">[#$dp11]</ph>. Результат, возвращаемый этой функцией, может быть сразу размещён на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Both types of geocoding use the <ph id="1">[#$dp11]</ph> function. The result returned by this function may be immediately placed on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере используется прямое геокодирование: чтобы на карте отметить Нижний Новгород, определяются
    координаты его центра, после чего на карту добавляется метка с найденными координатами.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example uses forward geocoding: to mark Nizhny Novgorod on the map,
    we determine the coordinates of its center, and then add a placemark with the found coordinates to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Пример иллюстрирует работу с возвращаемыми геокодером данными: как добавлять их на карту или, например, как извлечь необходимую
    информацию о найденном объекте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The example shows how to work with data returned by the geocoder: how to add it to the map or, for example,
    how to extract the necessary information about an object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Поиск координат центра Нижнего Новгорода.
</seg></tuv>
	<tuv xml:lang="en"><seg> Find coordinates of the center of Nizhny Novgorod.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> boundedBy: myMap.getBounds(), // Сортировка результатов от центра окна карты
 strictBounds: true, // Вместе с опцией boundedBy будет искать строго внутри области, указанной в boundedBy
</seg></tuv>
	<tuv xml:lang="en"><seg> boundedBy: myMap.getBounds(), // Sorting the results from the center of the map window
 strictBounds: true, // Together with the boundedBy option, the search will be strictly inside the area specified in boundedBy
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Выбираем первый результат геокодирования.
</seg></tuv>
	<tuv xml:lang="en"><seg> Selecting the first result of geocoding.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Координаты геообъекта.
</seg></tuv>
	<tuv xml:lang="en"><seg> The coordinates of the geo object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Область видимости геообъекта.
</seg></tuv>
	<tuv xml:lang="en"><seg> The viewport of the geo object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем первый найденный геообъект на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding first found geo object to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Масштабируем карту на область видимости геообъекта.
</seg></tuv>
	<tuv xml:lang="en"><seg> Scaling the map to the geo object viewport.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Все данные в виде javascript-объекта.
</seg></tuv>
	<tuv xml:lang="en"><seg>All data in the form of a javascript object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Метаданные запроса и ответа геокодера.
</seg></tuv>
	<tuv xml:lang="en"><seg>The metadata of the request and geocoder response.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Метаданные геокодера, возвращаемые для найденного объекта.
</seg></tuv>
	<tuv xml:lang="en"><seg>Metadata of the geocoder returned for the found object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Точность ответа (precision) возвращается только для домов.
</seg></tuv>
	<tuv xml:lang="en"><seg>The accuracy of the response (precision) is only returned for houses.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Тип найденного объекта (kind).
</seg></tuv>
	<tuv xml:lang="en"><seg>The type of found object (kind).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Если нужно добавить по найденным геокодером координатам метку со своими стилями и контентом балуна, создаем новую метку по координатам найденной и добавляем ее на карту вместо найденной.
</seg></tuv>
	<tuv xml:lang="en"><seg>To add a placemark with its own styles and balloon content at the coordinates found by the geocoder, create a new placemark at the coordinates of the found placemark and add it to the map in place of the found one.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>var myPlacemark = new ymaps.Placemark(coords, <ph id="1">{ iconContent: 'моя метка', balloonContent: 'Содержимое балуна &lt;strong&gt;моей метки&lt;/strong&gt;' }</ph>, <ph id="2">{ preset: 'islands#violetStretchyIcon' }</ph>);

myMap.geoObjects.add(myPlacemark);
</seg></tuv>
	<tuv xml:lang="en"><seg>var myPlacemark = new ymaps.Placemark(coords, <ph id="1">{ iconContent: 'моя метка', balloonContent: 'Содержимое балуна &lt;strong&gt;моей метки&lt;/strong&gt;' }</ph>, <ph id="2">{ preset: 'islands#violetStretchyIcon' }</ph>);

myMap.geoObjects.add(myPlacemark);
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Прямое геокодирование</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Forward geocoding</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Данный пример демонстрирует, как создать карту, изначально отцентрированную по местоположению пользователя.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example demonstrates how to create a map that is initially centered on the user's location.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для определения местоположения используется метод get функции <bpt id="1">[#$dp9]</bpt>geolocation<ept id="1">&lt;/a&gt;</ept>. В его параметрах можно указать предпочтительный способ
    определения местоположения (по IP или с помощью <bpt id="2">[#$dp10]</bpt>Geolocation API<ept id="2">&lt;/a&gt;</ept>), время ожидание ответа
    и др. Подробнее см. в <bpt id="3">[#$dp11]</bpt>описании метода<ept id="3">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The "get" method of the <bpt id="1">[#$dp9]</bpt>geolocation<ept id="1">&lt;/a&gt;</ept> function is used for detecting the location. In the parameters, you can set the preferred method of 
	location detection (by IP or using the <bpt id="2">[#$dp10]</bpt>Geolocation API<ept id="2">&lt;/a&gt;</ept>), the time to wait for a response, and so on. 
	For more information, see the <bpt id="3">[#$dp11]</bpt>description of the method<ept id="3">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    При вызове данного метода браузер пытается определить географическое положение пользователя. В случае
    успеха результат записывается в поле карты <bpt id="1">[#$dp14]</bpt>geoObjects<ept id="1">&lt;/a&gt;</ept>, в противном случае возникает сообщение об ошибке.
 </seg></tuv>
	<tuv xml:lang="en"><seg>
    When calling this method, the browser tries to determine the geographical position of the user. If successful, 
	the result is written in the <bpt id="1">[#$dp14]</bpt>geoObjects<ept id="1">&lt;/a&gt;</ept> map field; otherwise, there is an error message.
 </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
     В данном примере, если местоположение определить не удалось, создается карта с центром в Москве.
</seg></tuv>
	<tuv xml:lang="en"><seg>
     In this example, if the location cannot be detected, a map is created with the center in Moscow.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Создание карты с местоположением пользователя</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Creating a map with the user's location</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Рассчитываем видимую область для текущей положения пользователя.
</seg></tuv>
	<tuv xml:lang="en"><seg> Calculating the viewport for the user's current location.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Если место положение невозможно получить, то просто создаем карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> If the location cannot be obtained, we just create a map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В примере показано, как на основе класса линии <ph id="1">[#$dp6]</ph> создать модуль для рисования
    стрелок на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The example shows how to create a module based on the <ph id="1">[#$dp6]</ph> line class for drawing 
	arrows on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В примере создаются два пользовательских модуля - один отвечает за класс объекта-стрелки, второй модуль
    включает в себя визуальное отображение стрелки - класс, реализующий интерфейс <ph id="1">[#$dp9]</ph>.
    В примере модули располагаются в одном файле. При разработке проекта рекомендуется помещать модули в отдельные файлы.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In this example, two custom modules are created. The first is responsible for the arrow object class, and the second module
	contains the visual display of the arrow - a class that implements the <ph id="1">[#$dp9]</ph> interface.
	In the example, the modules are both in the same file. For project development, the modules should be in separate files.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Пользовательские модули не дописываются в неймспейс ymaps.
 Поэтому доступ к ним мы можем получить асинхронно через метод ymaps.modules.require.
</seg></tuv>
	<tuv xml:lang="en"><seg> Custom modules are not appended to the ymaps namespace. So we can access them asynchronously through the ymaps.modules.require method.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Number[][] | Object | ILineStringGeometry} geometry</ph> Геометрия ломаной.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Number[][] | Object | ILineStringGeometry} geometry</ph> Geometry of the polyline.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object} properties</ph> Данные ломаной.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object} properties</ph> Polyline data.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object} options</ph> Опции ломаной.
Поддерживается тот же набор опций, что и в классе ymaps.Polyline.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object} options</ph> Polyline options. Supports the same set of options as the ymaps.Polyline class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Number}</ph> [options.arrowAngle=20] Угол в градусах между основной линией и линиями стрелки.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Number}</ph> [options.arrowAngle=20] Angle in degrees between the main line and the lines of the arrow.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Number}</ph> [options.arrowMinLength=3] Минимальная длина стрелки. Если длина стрелки меньше минимального значения, стрелка не рисуется.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Number}</ph> [options.arrowMinLength=3] Minimum length of the arrow. If the length of the arrow is less than the minimum value, the arrow is not drawn.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Number}</ph> [options.arrowMaxLength=20] Максимальная длина стрелки.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Number}</ph> [options.arrowMaxLength=20] Maximum length of the arrow.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{geometry.pixel.Polyline} pixelGeometry</ph> Пиксельная геометрия линии.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{geometry.pixel.Polyline} pixelGeometry</ph> The line's pixel geometry.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object} data</ph> Данные оверлея.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object} data</ph> The overlay data.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><ph id="1">@param  </ph><ph id="2">{Object} options</ph> Опции оверлея.
</seg></tuv>
	<tuv xml:lang="en"><seg><ph id="1">@param  </ph><ph id="2">{Object} options</ph> Overlay options.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Поля .events и .options обязательные для IOverlay.
</seg></tuv>
	<tuv xml:lang="en"><seg> The .events and .options fields are mandatory for IOverlay.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Реализовываем все методы и события, которые требует интерфейс IOverlay.
</seg></tuv>
	<tuv xml:lang="en"><seg> Implementing all the methods and events that the IOverlay interface requires.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Военная хитрость - чтобы в прозрачной ломаной хорошо отрисовывались самопересечения,
 мы рисуем вместо линии многоугольник.
 Каждый контур многоугольника будет отвечать за часть линии.
</seg></tuv>
	<tuv xml:lang="en"><seg> As a trick to get self-intersections drawn correctly in a transparent polyline, we draw a polygon instead of a polyline. Each contour of the polygon will be responsible for a section of the line.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Эта строчка свяжет два менеджера опций.
 Опции, заданные в родительском менеджере,
 будут распространяться и на дочерний.
</seg></tuv>
	<tuv xml:lang="en"><seg> This string will connect the two options managers. Options specified in the parent manager will be propagated to the child.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Мы слушаем события от дочернего служебного оверлея
 и прокидываем их на внешнем классе.
 Это делается для того, чтобы в событии было корректно определено
 поле target.
</seg></tuv>
	<tuv xml:lang="en"><seg> We listen to events from the child service overlay and throw them on an external class. This is to ensure that the  "target" field was correctly defined in the event.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Свяжем исходное событие с текущим, чтобы все поля данных дочернего события
 были доступны в производном событии.
</seg></tuv>
	<tuv xml:lang="en"><seg> Linking the original event with the current one, so that all of the data fields of child events are accessible in a derived event.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Будем рисовать стрелку только если длина линии не меньше длины стрелки.
</seg></tuv>
	<tuv xml:lang="en"><seg> We will draw the arrow only if the line length is not less than the length of the arrow.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создадим еще 2 контура для стрелочек.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating 2 more contours for arrows.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Для удобства расчетов повернем стрелку так, чтобы она была направлена вдоль оси y,
 а потом развернем результаты обратно.
</seg></tuv>
	<tuv xml:lang="en"><seg> For convenience of calculation, we will rotate the arrow so that it is pointing along the y axis, and then turn the results back.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Стрелка на карте</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. The arrow on the map</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для объединения близко расположенных меток в группу (кластер) используется <bpt id="1">[#$dp8]</bpt>кластеризатор<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The <bpt id="1">[#$dp8]</bpt>clusterer<ept id="1">&lt;/a&gt;</ept> is used for combining placemarks that are near each other in a group (cluster).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Кластеризатор реализуется классом <ph id="1">[#$dp11]</ph>. В качестве параметров конструктору можно передать опции кластеризатора: стиль отображения значка кластера, размер его ячейки и т. д. Список доступных опций можно посмотреть в соответствующем <bpt id="2">[#$dp12]</bpt>разделе<ept id="2">&lt;/sa&gt;</ept> справочника.</seg></tuv>
	<tuv xml:lang="en"><seg>
    Clusterization is implemented by the <ph id="1">[#$dp11]</ph> class. As parameters to the constructor, you can pass clusterer options: the style for displaying the cluster icon, the size of its cell, and so on.  For the list of available options, see the relevant <bpt id="2">[#$dp12]</bpt>section<ept id="2">&lt;/sa&gt;</ept> of the reference guide.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для добавления геообъектов в кластеризатор используется метод <bpt id="1">[#$dp15]</bpt>add<ept id="1">&lt;/sa&gt;</ept>. В качестве параметра может быть передан как отдельный геообъект, так и массив геообъектов.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    To add geo objects to the clusterer, use the <bpt id="1">[#$dp15]</bpt>add<ept id="1">&lt;/sa&gt;</ept> method. Either a separate geo object or an array of geo objects can be passed as the parameter.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В примере показано, как изменить цвет иконки или кластера при наведении.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The example shows how to change the color of the icon or cluster on mouse hover.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Изменение цвета кластеров и меток при наведении</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Changing the color of clusters and placemarks when hovering</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Кластеризатор расширяет коллекцию, что позволяет использовать один обработчик
для обработки событий всех геообъектов.
Будем менять цвет иконок и кластеров при наведении.
</seg></tuv>
	<tuv xml:lang="en"><seg>The clusterer extends the collection, which allows you to use the same handler for processing events of all geo objects. We'll change the color of the icons and clusters on mouse hover.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Можно слушать сразу несколько событий, указывая их имена в массиве.
</seg></tuv>
	<tuv xml:lang="en"><seg> You can listen to multiple events at once by specifying their names in the array.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Событие произошло на кластере.
</seg></tuv>
	<tuv xml:lang="en"><seg> An event occurred on the cluster.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Событие произошло на геообъекте.
</seg></tuv>
	<tuv xml:lang="en"><seg> An event took place on the geo object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>,
    <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>
    <bpt id="3">[#$dp4]</bpt>control.Manager<ept id="3">&lt;/a&gt;</ept>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>,
    <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>
    <bpt id="3">[#$dp4]</bpt>control.Manager<ept id="3">&lt;/a&gt;</ept>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Каждый элемент управления реализуется отдельным классом из пространства имен control
    (например, <bpt id="1">[#$dp6]</bpt>control.TrafficControl<ept id="1">&lt;/a&gt;</ept>). Ссылка на элементы управления содержится в поле
    <bpt id="2">[#$dp7]</bpt>controls<ept id="2">&lt;/a&gt;</ept> карты. Для добавления или удаления элемента управления используются методы add и remove соответственно.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Each control is implemented by a separate class from the control namespace (e.g. <bpt id="1">[#$dp6]</bpt>control.TrafficControl<ept id="1">&lt;/a&gt;</ept>).
    The reference to the controls is contained in the <bpt id="2">[#$dp7]</bpt>controls<ept id="2">&lt;/a&gt;</ept> field of the map.
    To add or remove a control, use the "add" and "remove" methods, respectively.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В API 2.1 добавлять элементы управления на карту можно также через ее <bpt id="1">[#$dp10]</bpt>параметры<ept id="1">&lt;/a&gt;</ept>.
    Это означает, что при инициализации карты в поле controls можно указать ключ соответствующего элемента управления.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In the API 2.1, controls can also be added to the map through its <bpt id="1">[#$dp10]</bpt>parameters<ept id="1">&lt;/a&gt;</ept>.
    This means that when you initialize the map, you can specify the key of the corresponding control in the "controls" field.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
     Добавлять можно как отдельные элементы управления, так и сразу их набор. В API 2.1 встроено три стандартных набора элементов управления, доступные
     по следующим ключам:
    </seg></tuv>
	<tuv xml:lang="en"><seg>
     You can add individual controls, or an entire set at once. The API 2.1 has three standard sets of controls available
    using the following keys:
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>'smallMapDefaultSet';</seg></tuv>
	<tuv xml:lang="en"><seg>'smallMapDefaultSet';</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>'mediumMapDefaultSet' (по умолчанию);</seg></tuv>
	<tuv xml:lang="en"><seg>'mediumMapDefaultSet' (default);</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>'largeMapDefaultSet'.</seg></tuv>
	<tuv xml:lang="en"><seg>'largeMapDefaultSet'.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Наборы отличаются количеством входящих в них элементов управления, а также размером соответствующих кнопок. В зависимости от размеров карты может быть добавлен тот или иной набор.
При создании карты автоматически добавляется набор 'mediumMapDefault'. Однако, если карта достаточно больших размеров,
то целесообразно добавить 'largeMapDefaultSet'. Если при изменении размеров карты элементы управления
не будут помещаться на карте, API автоматически уменьшит их иконки.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The sets differ in the number of controls included in them, as well as the size of the buttons. A set can be added depending on the size of the map.
When the map is created, the 'mediumMapDefault' set is added automatically.
However, if the map is fairly large, it is advisable to add 'largeMapDefaultSet'.
If controls will not fit on the map when it is resized, the API will automatically reduce the size of icons.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Подробнее о доступных наборах элементов управления см. в <bpt id="1">[#$dp24]</bpt>справочнике<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    For more information about available sets of controls, see the <bpt id="1">[#$dp24]</bpt>Reference<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Также доступны наборы 'default' и 'largeMapDefaultSet'
 Элементы управления в наборах подобраны оптимальным образом
 для карт маленького, среднего и крупного размеров.
</seg></tuv>
	<tuv xml:lang="en"><seg> The 'default' and 'largeMapDefaultSet' sets are also available.
 Controls in these sets are optimally selected for small, medium and large sized maps.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Стандартные наборы элементов управления</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Standard sets of controls</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    При добавлении большого числа меток на карту их кластеризация позволяет избежать большой потери производительности браузера при их отображении.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    When adding a large number of placemarks to the map, clustering them helps avoid a large loss in browser performance when displaying them.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для сравнения в данном примере на карту можно добавить метки, объединенные как в кластеры, так и в обычные коллекции.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    For comparison, in this example, you can add placemarks to the map both combined in clusters and in regular collections.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем кластеризатор c красной иконкой (по умолчанию используются синяя).
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a clusterer with a red icon (the default is blue).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем коллекцию геообъектов.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a collection of geo objects.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Дополнительное поле ввода при включенном режиме кластеризации.
</seg></tuv>
	<tuv xml:lang="en"><seg> Additional input field when clusterization is enabled.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем кластеризатор на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding the clusterer to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавление меток с произвольными координатами.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding placemarks with arbitrary coordinates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Количество меток, которое нужно добавить на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> The number of placemarks that you want to add to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Флаг, показывающий, нужно ли кластеризовать объекты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Flag indicating whether to cluster objects.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Размер ячейки кластеризатора, заданный пользователем.
</seg></tuv>
	<tuv xml:lang="en"><seg> The clusterer cell siz, specified by the user.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Генерируем нужное количество новых объектов.
</seg></tuv>
	<tuv xml:lang="en"><seg> Generating the required number of new objects.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Если используется кластеризатор, то добавляем кластер на карту,
 если не используется - добавляем на карту коллекцию геообъектов.
</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the clusterer, add the cluster to the map; if not using it, add the collection of geo objects to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавлеяем массив меток в кластеризатор.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding an array of placemarks to the clusterer.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Функция, создающая необходимое количество геообъектов внутри указанной области.
</seg></tuv>
	<tuv xml:lang="en"><seg> A function that creates the necessary number of geo objects within a specified area.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем нужное количество меток
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating the desired number of placemarks
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Генерируем координаты метки случайным образом.
</seg></tuv>
	<tuv xml:lang="en"><seg> Generating placemark coordinates randomly.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем метку со случайными координатами.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a placemark with random coordinates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Функция, генерирующая случайные координаты
 в пределах области просмотра карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> A function that generates random coordinates within the map viewport.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Показывать/скрывать дополнительное поле ввода.
</seg></tuv>
	<tuv xml:lang="en"><seg> Show/hide additional input field.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Если пользователь включил режим кластеризации, то появляется дополнительное поле
 для ввода опции кластеризатора - размер ячейки кластеризации в пикселях.
 По умолчанию размер ячейки сетки равен 64.
 При отключении режима кластеризации дополнительное поле ввода скрывается.
</seg></tuv>
	<tuv xml:lang="en"><seg> If the user has enabled clustering, an additional field for entering clusterization options appears - the clusterization cell size in pixels. By default, the cell size is 64. If clustering is disabled, the additional input field is hidden.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Удаление всех меток с карты
</seg></tuv>
	<tuv xml:lang="en"><seg> Removing all placemarks from the map
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Удаляем все  метки из кластеризатора.
</seg></tuv>
	<tuv xml:lang="en"><seg> Removing all placemarks from the clusterer.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Удаляем все метки из коллекции.
</seg></tuv>
	<tuv xml:lang="en"><seg> Removing all placemarks from the collection.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Использование кластеризатора</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Using clusterization</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>100</seg></tuv>
	<tuv xml:lang="en"><seg>100</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Добавить на карту</seg></tuv>
	<tuv xml:lang="en"><seg>Add to the map</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Удалить все метки</seg></tuv>
	<tuv xml:lang="en"><seg>Remove all placemarks</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Количество меток:
    <ph id="1">&lt;input type="text" size="6" id="count" [#$tu4]/&gt;</ph> <ph id="2">&lt;br/&gt;</ph>
    <ph id="3">&lt;input type="checkbox" id="useClusterer"&gt;</ph> Использовать кластеризатор<ph id="4">&lt;br&gt;</ph>
    <ph id="5">&lt;input type="button" [#$tu5] id="addMarkers"/&gt;</ph>
    <ph id="6">&lt;input type="button" [#$tu6] id="removeMarkers"/&gt;</ph></seg></tuv>
	<tuv xml:lang="en"><seg>The number of placemarks:
    <ph id="1">&lt;input type="text" size="6" id="count" [#$tu4]/&gt;</ph> <ph id="2">&lt;br/&gt;</ph>
    <ph id="3">&lt;input type="checkbox" id="useClusterer"&gt;</ph>  Use the clusterer<ph id="4">&lt;br&gt;</ph>
    <ph id="5">&lt;input type="button" [#$tu5] id="addMarkers"/&gt;</ph>
    <ph id="6">&lt;input type="button" [#$tu6] id="removeMarkers"/&gt;</ph></seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Часто при работе с картой приходится загружать большой объем дополнительных данных (текстовая информация, картинки и пр.).
    При этом загруженная информация не всегда используется пользователем. Например, когда на карте
    отображены сотни меток, и балун каждой из них содержит большой объем текста. При работе с картой пользователь может
    не открыть ни один балун, но данные все равно будут загружены.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Often when working with the map you have to download a large amount of additional data (text information, images, etc).
    However, this downloaded information is not always used by the user. For example, when the map display
    hundreds of placemarks, and each of them has a balloon containing a large amount of text.
    When working with the map, the user might not open any of the balloons, but the data will still be loaded.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В таких случаях в целях экономии трафика имеет смысл загружать данные не сразу, а по мере необходимости.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In such cases, in order to save traffic it makes sense to not load data immediately, but wait until it is needed.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Данный пример демонстрирует динамическую загрузку содержимого балуна с помощью AJAX-запроса.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example demonstrates how to dynamically load the contents of a balloon using an AJAX request.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    При клике на значок кластера или одиночной метки производится проверка, загружено ли
    содержимое их балуна. Если для каких-либо меток текст балуна не задан, серверу отправляется POST-запрос
    с массивом идентификаторов этих меток. Сервер обрабатывает массив и на его основе
    возвращает JSON-объект, содержащий необходимые данные.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    When a cluster icon or a separate placemark is clicked, a check is performed for whether the balloon content is loaded.
    If any placemarks do not have the balloon text specified, a POST request is sent
    to the server with an array of identifiers of these placemarks.
    The server processes the array and returns a JSON object based on it containing the required data.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Обратите внимание, что серверную часть необходимо реализовать самостоятельно.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Note that you need to implement the server side yourself.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Функция кластеризует объекты и возвращает ссылку на кластер.
</seg></tuv>
	<tuv xml:lang="en"><seg>The function clusters the objects and returns a reference to the cluster.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Массив меток, для которых необходимо отобразить содержимое балуна.
</seg></tuv>
	<tuv xml:lang="en"><seg> An array of placemarks for which you want to display the contents of a balloon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Формируем массив идентификаторов, который
 будет передан серверу.
</seg></tuv>
	<tuv xml:lang="en"><seg> Forming an array of IDs that will be passed to the server.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Запрос к серверу.
 Сервер обработает массив идентификаторов и на его основе
 вернет JSON-объект, содержащий текст балуна для
 заданных меток.
</seg></tuv>
	<tuv xml:lang="en"><seg> Request to the server. The server will process the array of IDs and return a JSON object based on it containing the balloon text for the specified placemarks.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Содержимое балуна берем из данных, полученных от сервера.
 Сервер возвращает массив объектов вида:
 [ <ph id="1">{"balloonContentBody": "Содержимое балуна"}</ph>, ...]
</seg></tuv>
	<tuv xml:lang="en"><seg> The contents of the balloon is taken from data received from the server. The server returns an array of objects: 
[ <ph id="1">{"balloonContentBody": "Содержимое балуна"}</ph>, ...]
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Динамическая загрузка содержимого балуна кластера</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Dynamically loading content of a cluster balloon</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Множественная обводка</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Multistroke outline</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Цвет линии - два значения
</seg></tuv>
	<tuv xml:lang="en"><seg> Line color - two values
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Ширина линии - два значения
</seg></tuv>
	<tuv xml:lang="en"><seg> Line width - two values
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Цвет линии - черная, белая и красная
</seg></tuv>
	<tuv xml:lang="en"><seg> Line color - black, white and red
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Для третьей обводки задаем стиль
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the style for the third outline
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Класс <ph id="1">[#$dp7]</ph> позволяет создавать кнопки и добавлять их на карту через <ph id="2">[#$dp8]</ph>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The <ph id="1">[#$dp7]</ph> class allows you to create buttons and add them to the map via <ph id="2">[#$dp8]</ph>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Кнопка может принимать 3 вида в зависимости от размера карты и количества других элементов управления на карте.
    На карте маленького размера в кнопке показываться только иконка, на средней карте показывается только текст, на карте
    большого размера показывается иконка с текстом. Вы можете зафиксировать кнопку в любом размере или задать только иконку
    или только текст.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    A button may have 3 different appearances, depending on the map size and the number of other controls on the map.
    On a small map, the button displays only the icon; on a medium-size map, the text of the button is shown;
    on a large map, the button icon is displayed with the text. You can lock the button in any size or you can specify only the icon
    or text only.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    У кнопки по умолчанию выставлена максимальная ширина в 90 пикселей. Если ваша кнопка содержит длинный текст,
    следует задать ей нужный максимальный размер через опцию maxWidth.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    By default, maximum button width is 90 pixels. If your button contains a long text,
    you should set it to the desired maximum size using the maxWidth option.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Зададим текст и иконку для кнопки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the text and icon for a button.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Иконка имеет размер 16х16 пикселей.
</seg></tuv>
	<tuv xml:lang="en"><seg> The icon is 16x16 pixels.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Поскольку кнопка будет менять вид в зависимости от размера карты,
 зададим ей три разных значения maxWidth в массиве.
</seg></tuv>
	<tuv xml:lang="en"><seg> Because the button changes depending on the size of the map, we will give it three different maxWidth values in the array.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Будем искусственно переключать размеры кнопки каждую секунду, чтобы показать все варианты
 внешнего вида кнопки.
 При изменении размера карты эти перестроения будут происходить автоматически.
</seg></tuv>
	<tuv xml:lang="en"><seg> We will artificially switch the size of the button every second, in order to show all the options for the button appearance. When resizing the map, these changes will occur automatically.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Добавление кнопки на карту</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Adding buttons to the map</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>, 
    <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>
    <bpt id="3">[#$dp4]</bpt>map.action.Manager.setCorrection<ept id="3">&lt;/a&gt;</ept>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>, 
    <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>
    <bpt id="3">[#$dp4]</bpt>map.action.Manager.setCorrection<ept id="3">&lt;/a&gt;</ept>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Бывают случаи, когда необходимо ограничить видимую область карты, чтобы у пользователей не было возможности выйти за её пределы. 
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Sometimes it is necessary to limit the visible area of the map, so users cannot go beyond it. 
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для таких случаев у карты есть опция «restrictMapArea», которая может принимать в качестве входных параметров прямоугольную область, либо булево значение. В случае «true» пользователь не сможет выйти за пределы изначальной видимой области карты.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    For such cases, the map has the "restrictMapArea" option, which can take as input parameters a rectangular area, or a Boolean value. If "true" the user will not be able to go beyond the initial visible area of the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    С подробным описанием опции можно ознакомиться  
    <bpt id="1">[#$dp10]</bpt>здесь<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    For a detailed description of the options,
    see <bpt id="1">[#$dp10]</bpt>this section<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Если недостаточно просто ограничить область просмотра прямоугольником и необходимо решить более сложную задачу (например, запретить центру карты выходить за пределы какого-либо полигона), то с помощью <bpt id="1">[#$dp13]</bpt>map.action.Manager.setCorrection<ept id="1">&lt;/a&gt;</ept>, можно задать функцию, которая будет корректировать действия пользователя на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    If it is not enough simply to limit the viewport to a rectangle and you have a more complex task (for example, to prevent the center of the map from going outside of a polygon), use <bpt id="1">[#$dp13]</bpt>map.action.Manager.setCorrection<ept id="1">&lt;/a&gt;</ept> to specify a function that will adjust the actions of the user on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Зададим ограниченную область прямоугольником, 
 примерно описывающим Кольский полуостров.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting an area restricted to a rectangle that approximately defines the Kola Peninsula.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Использование опции ограничения области просмотра карты.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Using restrictions of the map viewport.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    С помощью метода <ph id="1">[#$dp8]</ph> можно создавать объекты на карте из их JSON-описания.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Using the <ph id="1">[#$dp8]</ph> method, you can create objects on the map from their JSON descriptions.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере рассматривается, как добавлять на карту только объекты, попадающие в ее видимую область.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example explains how to add only objects that fall in the visible area to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создадим объекты на основе JSON-описания геометрий.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating objects based on JSON descriptions of geometries.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Найдем объекты, попадающие в видимую область карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Finding objects in the visible area of the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> И затем добавим найденные объекты на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> And then adding the found objects to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> После каждого сдвига карты будем смотреть, какие объекты попадают в видимую область.
</seg></tuv>
	<tuv xml:lang="en"><seg> After each shift of the map we will see what objects are in the visible area.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Оставшиеся объекты будем удалять с карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Then we'll delete the other objects from the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Показ объектов в видимой области карты.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Displaying objects in the visible area of the map.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>На карту добавляются только метки, попадающие в видимую область</seg></tuv>
	<tuv xml:lang="en"><seg>Only placemarks that fall in the visible area are added to the map</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере создание карты происходит при нажатии кнопки "Показать карту".
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In this example, the map is created when the "Show map" button is clicked.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Изначально на странице размещается пустой div-контейнер. С помощью функции bind() для элемента button
    назначается обработчик события click, вызов которого приводит к созданию карты и ее размещению в указанном контейнере.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    At first, an empty div container is placed on the page. The bind() function is used for the "button" element
    to assign a handler for the click event, which creates the map and puts it in the specified container when called.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Если при нажатии кнопки карта уже была создана, то вызывается метод destroy(), уничтожающий карту.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    If the map has already been created when the button is clicked, the destroy() method is called and it destroys the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Как только будет загружен API и готов DOM, выполняем инициализацию
</seg></tuv>
	<tuv xml:lang="en"><seg> Performing initialization as soon as the API is loaded and the DOM is ready
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Инициализация и уничтожение карты при нажатии на кнопку.
</seg></tuv>
	<tuv xml:lang="en"><seg> Initialization and destruction of the map when the button is clicked.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Создание карты по требованию.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Creating maps on demand.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Показать карту</seg></tuv>
	<tuv xml:lang="en"><seg>Show map</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">&lt;input type="button" [#$tu3] id="toggle"/&gt;</ph>
        </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">&lt;input type="button" [#$tu3] id="toggle"/&gt;</ph>
        </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
            </seg></tuv>
	<tuv xml:lang="en"><seg>
            </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    YMapsML, отображаемый на карте (см. файл ymapsml.xml), был автоматически сгенерирован с помощью XSLT на основе данных,
    которые изначально были представлены в формате GeoRSS (см. georss.xml). Шаблон преобразований содержится в файле georsstoymapsm_xsl.xml.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The YMapsML displayed on the map (see the ymapsml.xml file) was automatically generated using XSLT,
	from the data that was originally presented in GeoRSS format (see georss.xml). The conversion template is in the georsstoymapsm_xsl.xml file.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Преобразование GeoRSS в YMapsML.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Converting GeoRSS to YMapsML.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Ломаная - это фигура, состоящая из набора последовательно соединённых вершин. Ломаная может иметь самопересечения.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    A polyline is a shape consisting of a set of sequentially connected vertices. The polyline can have self-intersections.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Ломаные могут быть созданы двумя способами: с помощью класса
    <bpt id="1">[#$dp10]</bpt>GeoObject<ept id="1">&lt;/a&gt;</ept> с указанием типа геометрии "Ломаная линия"
    либо с помощью вспомогательного класса <bpt id="2">[#$dp11]</bpt>Polyline<ept id="2">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The polyline can be created in two ways: using the <bpt id="1">[#$dp10]</bpt>GeoObject<ept id="1">&lt;/a&gt;</ept>
    class with the "Polyline" geometry type,
    or using the <bpt id="2">[#$dp11]</bpt>Polyline<ept id="2">&lt;/a&gt;</ept> auxiliary class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    При создании ломаной ей могут быть заданы <bpt id="1">[#$dp14]</bpt>свойства<ept id="1">&lt;/a&gt;</ept> (например содержимое балуна или хинта) и <bpt id="2">[#$dp15]</bpt>опции<ept id="2">&lt;/a&gt;</ept> (например: цвет, толщину).
</seg></tuv>
	<tuv xml:lang="en"><seg>
    When creating a polyline, you can set <bpt id="1">[#$dp14]</bpt>properties<ept id="1">&lt;/a&gt;</ept>
    (such as the contents of a balloon or hint) and 
    <bpt id="2">[#$dp15]</bpt>options<ept id="2">&lt;/a&gt;</ept> (such as color and line width).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Ломаные, наряду с другими геообъектами, можно объединять в <bpt id="1">[#$dp18]</bpt>коллекции<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Polylines, like other geo objects, can be combined in <bpt id="1">[#$dp18]</bpt>collections<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем ломаную, используя класс GeoObject.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a polyline using the GeoObject class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Тип геометрии - "Ломаная линия".
</seg></tuv>
	<tuv xml:lang="en"><seg> The "Polyline" geometry type.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Содержимое хинта.
</seg></tuv>
	<tuv xml:lang="en"><seg> The contents of the hint.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Задаем опции геообъекта.
 Включаем возможность перетаскивания ломаной.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the geo object options.
 Enabling drag-n-drop for the polyline.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем ломаную с помощью вспомогательного класса Polyline.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a polyline using the Polyline auxiliary class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Указываем координаты вершин ломаной.
</seg></tuv>
	<tuv xml:lang="en"><seg> Specifying the coordinates of the vertices of the polyline.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Задаем опции геообъекта.
 Отключаем кнопку закрытия балуна.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting options for the geo object. Disabling the close button on a balloon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Цвет линии.
</seg></tuv>
	<tuv xml:lang="en"><seg> The line color.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Ширина линии.
</seg></tuv>
	<tuv xml:lang="en"><seg> Line width.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Коэффициент прозрачности.
</seg></tuv>
	<tuv xml:lang="en"><seg> The transparency coefficient.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем линии на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding lines to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Ломаные</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Polylines</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp5]</ph> - класс, позволяющий добавить на карту большое количество объектов
    без необходимости создавать метки по отдельности.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp5]</ph> - class that allows you to add a large number of objects to the map without having to create placemarks separately.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Объекты, добавленные в ObjectManager, располагаются в коллекции ObjectManager.objects. Кластеры, образованные из
    добавленных меток, добавляются в коллекцию ObjectManager.clusters.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Objects added in ObjectManager are in the ObjectManager.objects collection.
    The clusters formed from the added placemarks are added to the ObjectManager.clusters collection.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    У этих коллекций есть менеджеры управления балунами и хинтами (ObjectManager.objects.balloon, ObjectManager.clusters.hint).
</seg></tuv>
	<tuv xml:lang="en"><seg>
    These collections have managers that control balloons and hints (ObjectManager.objects.balloon, ObjectManager.clusters.hint).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Откроем балун на метке с id == 1.
</seg></tuv>
	<tuv xml:lang="en"><seg> Opening the balloon on the placemark with id == 1.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Сделаем так, чтобы указанный объект был "выбран" в балуне.
</seg></tuv>
	<tuv xml:lang="en"><seg> Making sure that the specified object has been "selected" in the balloon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Все сгенерированные кластеры имеют уникальные идентификаторы.
 Этот идентификатор нужно передать в менеджер балуна, чтобы указать,
 на каком кластере нужно показать балун.
</seg></tuv>
	<tuv xml:lang="en"><seg> All the generated clusters have unique identifiers. This identifier must be passed to the balloon manager to specify which cluster to show the balloon on.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
        
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
        
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для добавления на карту большого числа интерактивных объектов используется
    технология активных областей.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The hotspot technology is used for adding a large number of
    interactive objects to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Изображения объектов добавляются на карту
    с помощью «картиночного слоя».
    Для его создания используется класс <bpt id="1">[#$dp10]</bpt>Layer<ept id="1">&lt;/sa&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Images of objects are added to the map
    using the "image layer".
    To create it, use the <bpt id="1">[#$dp10]</bpt>Layer<ept id="1">&lt;/sa&gt;</ept> class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Информация об объектах (их границах и позиции) хранится на сервере
    и добавляется на карту через слой активных областей.
    Для создания этого слоя используется
    класс <bpt id="1">[#$dp13]</bpt>hotspot.Layer<ept id="1">&lt;/sa&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Information about objects (their boundaries and positions) is stored on the server
    and added to the map through the hotspot layer.
    To create this layer,
    use the <bpt id="1">[#$dp13]</bpt>hotspot.Layer<ept id="1">&lt;/sa&gt;</ept> class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Перед созданием слоя активных областей необходимо создать его источник данных —
    объект, который будет запрашивать с сервера данные активных областей.
    Источник данных реализуется классом <bpt id="1">[#$dp16]</bpt>hotspot.ObjectSource<ept id="1">&lt;/sa&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Before creating the hotspot layer, we must create the data source —
    the object that will be requesting the hotspot data from the server.
    The data source is implemented by the <bpt id="1">[#$dp16]</bpt>hotspot.ObjectSource<ept id="1">&lt;/sa&gt;</ept> class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> В нашем примере хотспотные данные есть только для 9 и 10 масштаба.
 Поэтому ограничим диапазон коэффициентов масштабирования карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> In our example, hotspot data is available only for zooms 9 and 10. For this reason, we will restrict the map's zoom range.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Шаблон URL для данных активных областей.
 Источник данных будет запрашивать данные через URL вида:
 '.../hotspot_layer/hotspot_data/9/tile_x=1&amp;y=2', где
 x, y - это номер тайла, для которого запрашиваются данные,
 9 - значение коэффициента масштабирования карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> The URL pattern for hotspot data. The data source will request data through a URL of the form: '.../hotspot_layer/hotspot_data/9/tile_x=1&amp;y=2', where x, y is the number of the tile that data is requested for, and 9 is the map zoom level.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Шаблон callback-функции, в которую сервер будет оборачивать данные тайла.
 Пример callback-функции после подстановки - 'testCallback_tile_x_1_y_2_z_9'.
</seg></tuv>
	<tuv xml:lang="en"><seg> The template for the callback function that the server will wrap tile data in. An example of a callback function after substitution is 'testCallback_tile_x_1_y_2_z_9'.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> URL тайлов картиночного слоя.
 Пример URL после подстановки -
 '.../hotspot_layer/images/9/tile_x=1&amp;y=2.png'.
</seg></tuv>
	<tuv xml:lang="en"><seg> URLs of tiles on the images layer. An example of a URL after substitution is '.../hotspot_layer/images/9/tile_x=1&amp;y=2.png'.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создадим источник данных слоя активных областей.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating the data source for the hotpsot layer.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем картиночный слой и слой активных областей.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating the images layer and the hotspot layer.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем слои на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding layers to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Использование технологии активных областей</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Using hotspot technology</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Кластеризатор реализуется классом <ph id="1">[#$dp12]</ph>. В качестве параметров конструктору можно передать опции кластеризатора: стиль отображения значка кластера, размер его ячейки и т. д. Список доступных опций можно посмотреть в соответствующем <bpt id="2">[#$dp13]</bpt>разделе<ept id="2">&lt;/sa&gt;</ept> справочника.</seg></tuv>
	<tuv xml:lang="en"><seg>
    The clusterer is implemented by the <ph id="1">[#$dp12]</ph> class. You can pass clusterer options to the constructor as parameters: the display style for the cluster icon, the cell size, and so on. For the list of available options, see the relevant <bpt id="2">[#$dp13]</bpt>section<ept id="2">&lt;/sa&gt;</ept> of the Reference Guide.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для добавления геообъектов в кластеризатор используется метод <bpt id="1">[#$dp16]</bpt>add<ept id="1">&lt;/sa&gt;</ept>. В качестве параметра может быть передан как отдельный геообъект, так и массив геообъектов.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    To add geo objects to the clusterer, use the <bpt id="1">[#$dp16]</bpt>add<ept id="1">&lt;/sa&gt;</ept> method. Either a separate geo object or an array of geo objects can be passed as the parameter.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Создадим кластеризатор, вызвав функцию-конструктор.
Список всех опций доступен в документации.
</seg></tuv>
	<tuv xml:lang="en"><seg>Creating a clusterer by calling a constructor function. A list of all options is available in the documentation.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Через кластеризатор можно указать только стили кластеров,
стили для меток нужно назначать каждой метке отдельно.
</seg></tuv>
	<tuv xml:lang="en"><seg>Only cluster styles can be specified via the clusterer; for placemark styles, each placemark must be set separately.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Ставим true, если хотим кластеризовать только точки с одинаковыми координатами.
</seg></tuv>
	<tuv xml:lang="en"><seg>Setting to "true" if we want to cluster only points with the same coordinates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Опции кластеров указываем в кластеризаторе с префиксом "cluster".
</seg></tuv>
	<tuv xml:lang="en"><seg>Setting cluster options in the clusterer with the "cluster" prefix.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Функция возвращает объект, содержащий данные метки.
Поле данных clusterCaption будет отображено в списке геообъектов в балуне кластера.
Поле balloonContentBody - источник данных для контента балуна.
Оба поля поддерживают HTML-разметку.
Список полей данных, которые используют стандартные макеты содержимого иконки метки
и балуна геообъектов, можно посмотреть в документации.
</seg></tuv>
	<tuv xml:lang="en"><seg>The function returns an object containing the placemark data. 
The clusterCaption data field will appear in the list of geo objects in the cluster balloon. 
The balloonContentBody field is the data source for the balloon content. 
Both fields support HTML markup. 
For a list of data fields that are used by the standard content layouts for geo objects' placemark icons and balloons, see the documentation.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Функция возвращает объект, содержащий опции метки.
Все опции, которые поддерживают геообъекты, можно посмотреть в документации.
</seg></tuv>
	<tuv xml:lang="en"><seg>The function returns an object containing the placemark options. 
All options that are supported by the geo objects can be found in the documentation.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Данные передаются вторым параметром в конструктор метки, опции - третьим.
</seg></tuv>
	<tuv xml:lang="en"><seg>Data is passed to the placemark constructor as the second parameter, and options are third.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Можно менять опции кластеризатора после создания.
</seg></tuv>
	<tuv xml:lang="en"><seg>You can change clusterer options after creation.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>В кластеризатор можно добавить javascript-массив меток (не геоколлекцию) или одну метку.
</seg></tuv>
	<tuv xml:lang="en"><seg>You can add a JavaScript array of placemarks (not a geo collection) or a single placemark to the clusterer.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Спозиционируем карту так, чтобы на ней были видны все объекты.
</seg></tuv>
	<tuv xml:lang="en"><seg>Positioning the map so that all objects are visible.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Добавление на карту кластеризатора меток</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Adding a placemark clusterer to the map</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    API предоставляет возможность задавать меткам собственные изображения.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The API provides the ability to set custom images for placemarks.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Чтобы установить нужное изображение, задайте для метки следующие опции:
    </seg></tuv>
	<tuv xml:lang="en"><seg>
    To set a desired image, specify the following options for the placemark:
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>iconLayout: "default#image";</seg></tuv>
	<tuv xml:lang="en"><seg>iconLayout: "default#image";</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>iconImageHref: {URL графического файла}.</seg></tuv>
	<tuv xml:lang="en"><seg>iconImageHref: {URL of the graphic file}.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Также могут быть установлены опции iconImageSize (ширина и высота изображения в пикселях), iconImageOffset (сдвиг левого верхнего угла иконки относительно
точки привязки) и iconImageClipRect (координаты отображаемой области исходного изображения в пикселях).

</seg></tuv>
	<tuv xml:lang="en"><seg>
    You can also set the options iconImageSize (width and height of the image in pixels), iconImageOffset (the offset of the icon's upper-left corner relative to the anchor point), and iconImageClipRect (coordinates of the displayed area of the source image, in pixels).

</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Задание собственного изображения для метки</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Setting a custom placemark image</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Опции.
 Необходимо указать данный тип макета.
</seg></tuv>
	<tuv xml:lang="en"><seg> Options. You must specify this type of layout.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Своё изображение иконки метки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Custom image for the placemark icon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Размеры метки.
</seg></tuv>
	<tuv xml:lang="en"><seg> The size of the placemark.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Смещение левого верхнего угла иконки относительно
 её "ножки" (точки привязки).
</seg></tuv>
	<tuv xml:lang="en"><seg> The offset of the upper left corner of the icon relative to its "tail" (the anchor point).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Мультимаршрутизатор позволяет по заданным точкам строить сразу несколько маршрутов.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The multirouter allows planning multiple routes at once using the set points.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для создания мультимаршрута используется класс <ph id="1">[#$dp7]</ph>. В качестве его параметров передаются
    следующие объекты:</seg></tuv>
	<tuv xml:lang="en"><seg>
    To create a multiroute, use the <ph id="1">[#$dp7]</ph> class.
    The following objects are passed as its parameters:</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg><bpt id="1">[#$dp10]</bpt>модель<ept id="1">&lt;/sa&gt;</ept> мультимаршрута. Задается в качестве объекта с полями:
       </seg></tuv>
	<tuv xml:lang="en"><seg>The multiroute <bpt id="1">[#$dp10]</bpt>model<ept id="1">&lt;/sa&gt;</ept>. It is defined as an object with fields:
       </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>referencePoints - массив опорных точек маршрута. Обратите внимание, что если задано больше двух опорных точек,
               то маршрутизатор возвращает только один маршрут.</seg></tuv>
	<tuv xml:lang="en"><seg>referencePoints - Array of reference points for the route. Note that if more than two reference points are set,
				the router only returns one route.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>params - параметры маршрутизации (например, тип маршрутизации, учет пробок и др.).</seg></tuv>
	<tuv xml:lang="en"><seg>params - Routing parameters (for example, the type of routing, consider traffic, and so on).</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>опции маршрутизатора. В опциях задаются правила отображения маршрутов на карте.</seg></tuv>
	<tuv xml:lang="en"><seg>router options. The options specify rules for displaying routes on the map.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Все опорные точки маршрута делятся на путевые (wayPoint) и транзитные (viaPoint). Путевые точки - это точки, в которых необходимо сделать
    остановку, а транзитные - через которые нужно проложить маршрут без остановки.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    All anchor points on the route are divided into waypoints (wayPoint) and throughpoints (viaPoint). Waypoints are points at which you must stop,
	and throughpoints are passed through on the route without stopping.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    После того как все маршруты были построены, самый короткий из них автоматически становится активным. Такой маршрут отображается
    на карте фиолетовым цветом. Серые пунктирные линии обозначают
    пересадки с одного вида транспорта на другой или переход между станциями (для маршрута на общественном транспорте).<ph id="1">&lt;br/&gt;</ph>
    Неактивные маршруты отображаются серым цветом. Для переключения
    активного маршрута достаточно кликнуть правой кнопкой мыши по нужному маршруту.
    Также переключить активный маршрут можно программно. См. <ph id="2">[#$dp22]</ph>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    After all the routes have been built, the shortest one automatically becomes active. This route is shown
	in purple on the map. Gray dotted lines mark transfers from one type of transportation to another,
    or crossing between stations (for routes on public transport).<ph id="1">&lt;br/&gt;</ph>
	Inactive routes are shown in gray. To switch the active route,
	just right-click the desired route.
	You can also switch the active route programmatically. See <ph id="2">[#$dp22]</ph>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Построение автомобильного мультимаршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Building a driving multiroute</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Создаем мультимаршрут.
Первым аргументом передаем модель либо объект описания модели.
Вторым аргументом передаем опции отображения мультимаршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg>Creating a multiroute.
The first argument passes either the model or object description model.
The second argument passes the multiroute display options.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Описание опорных точек мультимаршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg> The description of the reference points on the multi-stop route.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Параметры маршрутизации.
</seg></tuv>
	<tuv xml:lang="en"><seg> Routing options.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Ограничение на максимальное количество маршрутов, возвращаемое маршрутизатором.
</seg></tuv>
	<tuv xml:lang="en"><seg> Limit on the maximum number of routes returned by the router.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем кнопки для управления мультимаршрутом.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating buttons for controlling the multiroute.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Объявляем обработчики для кнопок.
</seg></tuv>
	<tuv xml:lang="en"><seg> Declaring handlers for the buttons.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Задаем параметры маршрутизации для модели мультимаршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg>Setting routing parameters for the multiroute model.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Добавляем транзитную точку в модель мультимаршрута.
Обратите внимание, что транзитные точки могут находится только
между двумя путевыми точками, т.е. не могут быть крайними точками маршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg>Adding a throughpoint to the multiroute model.
Note that throughpoints can only be placed between two waypoints. In other words, they can't be end points on a route.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем карту с добавленными на нее кнопками.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating the map with buttons added to it.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    API позволяет определять координаты объекта по его названию и название объекта по его координатам (<bpt id="1">[#$dp7]</bpt>прямое и обратное геокодирование<ept id="1">&lt;/a&gt;</ept>).
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The API can determine the coordinates of an object by its name and the name of an object by its coordinates (<bpt id="1">[#$dp7]</bpt>forward and reverse geocoding<ept id="1">&lt;/a&gt;</ept>).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Оба вида геокодирования производятся с помощью функции <ph id="1">[#$dp10]</ph>. Результат, возвращаемый этой функцией, может быть сразу размещён на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Both types of geocoding use the <ph id="1">[#$dp10]</ph> function. The result returned by this function may be immediately placed on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере используется обратное геокодирование: по заданным координатам производится поиск ближайших станций метро.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example uses reverse geocoding, which uses the set coordinates to find the nearest metro station.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Поиск станций метро.
</seg></tuv>
	<tuv xml:lang="en"><seg> Search metro stations.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Опции запроса
</seg></tuv>
	<tuv xml:lang="en"><seg>Request options
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Ищем только станции метро.
</seg></tuv>
	<tuv xml:lang="en"><seg> Only looking for a metro station.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Запрашиваем не более 20 результатов.
</seg></tuv>
	<tuv xml:lang="en"><seg> Requesting no more than 20 results.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Задаем изображение для иконок меток.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the image for placemark icons.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем коллекцию найденных геообъектов на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding a collection of found geo objects to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Масштабируем карту на область видимости коллекции.
</seg></tuv>
	<tuv xml:lang="en"><seg> Zooming the map to the collection's viewport.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Обратное геокодирование</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Reverse geocoding</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
   Пример демонстрирует, как создать меню для отображения коллекций геообъектов карты.
</seg></tuv>
	<tuv xml:lang="en"><seg>
   The example demonstrates how to create a menu to display collections of geo objects on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
   Для построения такого меню необходимо создать два представления геообъекта: его API-представление (в виде метки на карте)
   и его DOM-представление (то есть элемент меню).
</seg></tuv>
	<tuv xml:lang="en"><seg>
   To create such a menu, you must create two representations of a geo object: its API-representation (in the form of placemarks on the map)
   and its DOM representation (i.e. the menu item).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
   Связать эти представления можно внутри обработчика события у DOM-представления (клик на пункте меню)
   вызовом конкретных методов в API-представлении геообъекта (добавление/удаление метки с карты).
</seg></tuv>
	<tuv xml:lang="en"><seg>
   These representations can be linked inside the event handler for the DOM representation (click on menu item)
   by calling specific methods in the API representation of the geo object (adding/removing placemarks on the map).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
   В этом примере меню строится на основе массива данных, который определен в файле <bpt id="1">[#$dp13]</bpt>groups.js<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
   In this example, the menu is based on the data array that is defined in the file <bpt id="1">[#$dp13]</bpt>groups.js<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
   Подробнее пример обсуждается в <bpt id="1">[#$dp16]</bpt>клубе<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
   The example is discussed more in the <bpt id="1">[#$dp16]</bpt>developers' club<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Список объектов карты.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. A list of map objects.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Контейнер для меню.
</seg></tuv>
	<tuv xml:lang="en"><seg> The container for the menu.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Пункт меню.
</seg></tuv>
	<tuv xml:lang="en"><seg> A menu item.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Коллекция для геообъектов группы.
</seg></tuv>
	<tuv xml:lang="en"><seg> Collection for geo objects in a group.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Контейнер для подменю.
</seg></tuv>
	<tuv xml:lang="en"><seg> The container for the submenu.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем коллекцию на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding a collection to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем подменю.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding a submenu.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем пункт в меню.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding a menu item.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> По клику удаляем/добавляем коллекцию на карту и скрываем/отображаем подменю.
</seg></tuv>
	<tuv xml:lang="en"><seg> On click, removing/adding the collection to the map and hiding/displaying the submenu.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Пункт подменю.
</seg></tuv>
	<tuv xml:lang="en"><seg> A submenu item.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем метку в коллекцию.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding a placemark to the collection.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем пункт в подменю.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding an item to the submenu.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> При клике по пункту подменю открываем/закрываем баллун у метки.
</seg></tuv>
	<tuv xml:lang="en"><seg> When an item in the submenu is clicked, we open/close the placemark balloon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем меню в тэг BODY.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding the menu to the BODY tag.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Выставляем масштаб карты чтобы были видны все группы.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the map zoom so all groups are visible.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Группы объектов
</seg></tuv>
	<tuv xml:lang="en"><seg> Groups of objects
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В примере показано, как произвести загрузку данных с помощью функции <bpt id="1">[#$dp6]</bpt>JQuery.getJSON()<ept id="1">&lt;/a&gt;</ept> и отобразить
    их на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The example shows how to load data using <bpt id="1">[#$dp6]</bpt>JQuery.getJSON()<ept id="1">&lt;/a&gt;</ept>
    and display it on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Загруженные данные представлены в формате <bpt id="1">[#$dp9]</bpt>GeoJSON<ept id="1">&lt;/a&gt;</ept>. Для их добавления на карту необходимо использовать <ph id="2">[#$dp10]</ph>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The loaded data is presented in <bpt id="1">[#$dp9]</bpt>GeoJSON<ept id="1">&lt;/a&gt;</ept> format. To add it to the map, use <ph id="2">[#$dp10]</ph>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Обратите внимание, что координаты объектов заданы в последовательности "долгота, широта". Поскольку по умолчанию в API принят порядок
    "широта, долгота", необходимо при подключении API передать параметр coordorder со значением lotlang. Подробнее см. в разделе <bpt id="1">[#$dp13]</bpt>Подключение API<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Note that the object coordinates are set in the order "longitude, latitude". Since the API uses "latitude, longitude" by default,
    the "coordorder" parameter with the "lotlang" value must be passed when enabling the API. For more information, see the section <bpt id="1">[#$dp13]</bpt>Enabling the API<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Загрузка геоданных с помощью jQuery.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Loading geo data using jQuery.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Сохраним ссылку на геообъекты на случай, если понадобится какая-либо постобработка.
</seg></tuv>
	<tuv xml:lang="en"><seg>Saving a reference to the geo objects in case any postprocessing is necessary.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <bpt id="1">[#$dp8]</bpt>Макеты<ept id="1">&lt;/a&gt;</ept> объектов можно
    создавать с помощью фабрики <ph id="2">[#$dp9]</ph>,
    используя текcтовые шаблоны.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <bpt id="1">[#$dp8]</bpt>Layouts<ept id="1">&lt;/a&gt;</ept> can be created
    using the <ph id="2">[#$dp9]</ph> factory, 
	using text templates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере создается пользовательский макет
    <bpt id="1">[#$dp12]</bpt>выпадающего списка<ept id="1">&lt;/sa&gt;</ept>.
    Макет элемента управления строится на основе его данных, состояния и опций.
    Макет автоматически перестраивается при изменении значений полей,
    состояния или опций, которые используются в его текстовом шаблоне.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example creates a custom layout for the <bpt id="1">[#$dp12]</bpt>drop-down list<ept id="1">&lt;/sa&gt;</ept>. 
	The layout of the control is based on its data, status, and options. 
	The layout is automatically rebuilt when changes are made to the values of fields, states, or options
    that are used in its text template.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Выпадающий список по умолчанию реагирует на клик по своему макету и меняет
    значение поля state.get('expanded').
</seg></tuv>
	<tuv xml:lang="en"><seg>
    A drop-down list by default responds to a click on its layout and
    changes the value of the field state.get('expanded').
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    События макета, на которые реагирует выпадающий список, описаны в интерфейсах
    <ph id="1">[#$dp17]</ph> и <ph id="2">[#$dp18]</ph>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Layout events that the drop-down list responds to are described in the interfaces <ph id="1">[#$dp17]</ph> and <ph id="2">[#$dp18]</ph>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Выпадающий список является групповым элементом управления, поэтому его макет
    должен генерировать события и реализовывать методы, описанные в <ph id="1">[#$dp21]</ph>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    A drop-down list is a group control, so its layout must 
	generate events and implement the methods described in <ph id="1">[#$dp21]</ph>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Через опции можно задавать настройки как самого выпадающего списка, так и настройки
    для его дочерних элементов. Для этого опции дочерних элементов нужно указывать
    с префиксом 'item'.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    You can use options to make settings for the drop-down list itself,
	as well as for its child elements. To do this, specify the prefix 'item' 
	for the child elements.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Пользовательский макет выпадающего списка.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Custom drop-down list layout</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создадим собственный макет выпадающего списка.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a custom drop-down list layout.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Этот элемент будет служить контейнером для элементов списка.
 В зависимости от того, свернут или развернут список, этот контейнер будет
 скрываться или показываться вместе с дочерними элементами.
</seg></tuv>
	<tuv xml:lang="en"><seg> This element will serve as a container for list items. Depending on whether the list is expanded or collapsed, this container will be hidden or shown together with its child elements.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Вызываем метод build родительского класса перед выполнением
 дополнительных действий.
</seg></tuv>
	<tuv xml:lang="en"><seg> Calling the build method of the parent class before performing additional actions.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Генерируем специальное событие, оповещающее элемент управления
 о смене контейнера дочерних элементов.
</seg></tuv>
	<tuv xml:lang="en"><seg> Generating a special event that notifies the control of changes to the child element container.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Переопределяем интерфейсный метод, возвращающий ссылку на
 контейнер дочерних элементов.
</seg></tuv>
	<tuv xml:lang="en"><seg> Overriding the interface method that returns a reference to the child element container.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Заставим элемент управления перед очисткой макета
 откреплять дочерние элементы от родительского.
 Это защитит нас от неожиданных ошибок,
 связанных с уничтожением dom-элементов в ранних версиях ie.
</seg></tuv>
	<tuv xml:lang="en"><seg> Forcing the control to remove child elements from the parent before cleaning the layout. This will protect us from unexpected errors associated with the destruction of DOM elements in earlier versions of IE.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Вызываем метод clear родительского класса после выполнения
 дополнительных действий.
</seg></tuv>
	<tuv xml:lang="en"><seg> Calling the "clear" method of the parent class after performing additional actions.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Также создадим макет для отдельного элемента списка.
</seg></tuv>
	<tuv xml:lang="en"><seg> Also creating a layout for a separate list item.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создадим 2 пункта выпадающего списка
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating two items in a drop-down list
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Теперь создадим список, содержащий 2 пунтка.
</seg></tuv>
	<tuv xml:lang="en"><seg> Now we'll create a list containing the two items.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> С помощью опций можно задать как макет непосредственно для списка,
</seg></tuv>
	<tuv xml:lang="en"><seg> You can use options to specify the layout directly for the list,
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> так и макет для дочерних элементов списка. Для задания опций дочерних
 элементов через родительский элемент необходимо добавлять префикс
 'item' к названиям опций.
</seg></tuv>
	<tuv xml:lang="en"><seg> or the layout for the child elements of the list. To define options for child elements through the parent element, add the 'item' prefix to option names.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Получаем ссылку на объект, по которому кликнули.
 События элементов списка пропагируются
 и их можно слушать на родительском элементе.
</seg></tuv>
	<tuv xml:lang="en"><seg> Getting a reference to the clicked object. List item events propagate and can be listened to on the parent element.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Клик на заголовке выпадающего списка обрабатывать не надо.
</seg></tuv>
	<tuv xml:lang="en"><seg> A click on the drop-down list title does not need to be processed.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В примере показано, как осуществлять загрузку данных для балуна объекта по требованию.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example shows how to load data for an object's balloon on demand.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Работа с балуном в ObjectManager</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Working with the balloon in ObjectManager</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Мы хотим загружать данные для балуна перед открытием, поэтому
 запретим автоматически открывать балун по клику.
</seg></tuv>
	<tuv xml:lang="en"><seg> We want to load data for a balloon before opening, so we disable automatically opening the balloon on click.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Функция, эмулирующая запрос за данными на сервер.
</seg></tuv>
	<tuv xml:lang="en"><seg> Function that emulates a request for data to the server.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В примере используется макет балуна кластера "cluster#balloonCarousel".<ph id="1">&lt;br/&gt;</ph>
    Макет, в котором информация о геообъекте располагается в центре, а по бокам располагаются кнопки перехода к предыдущему и следующему геообъекту.<ph id="2">&lt;br/&gt;</ph>
    В нижней части балуна находится меню быстрой навигации.<ph id="3">&lt;br/&gt;</ph>
    Информация о выбранном геообъекте задается отдельным макетом и может быть настроена при помощи опции 'clusterBalloonItemContentLayout'.<ph id="4">&lt;br/&gt;</ph>
    В данном примере задается собственный макет с информацией о геообъекте.<ph id="5">&lt;br/&gt;</ph>
<ph id="6">&lt;br/&gt;</ph>
    <bpt id="7">[#$dp9]</bpt>Макеты<ept id="7">&lt;/a&gt;</ept> объектов можно создавать с помощью фабрики <ph id="8">[#$dp10]</ph>, используя текcтовые шаблоны.<ph id="9">&lt;br/&gt;</ph> 
    Текстовые шаблоны формируют html-содержимое макета на основе хэша с данными, передаваемого в конструктор макета.<ph id="10">&lt;br/&gt;</ph>
    В данном примере поставщик данных - это геообъект.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The example uses the "cluster#balloonCarousel" cluster balloon layout.<ph id="1">&lt;br/&gt;</ph>
	The layout, in which information about the geo object is in the center, and buttons for going to the previous and next geo object are on the sides.<ph id="2">&lt;br/&gt;</ph>
	The quick navigation menu is in the lower part of the balloon.<ph id="3">&lt;br/&gt;</ph>
	Information about the selected geo object is set by a separate layout and can be configured using the 'clusterBalloonItemContentLayout' option.<ph id="4">&lt;br/&gt;</ph>
	This example sets a custom layout with information about a geo object.<ph id="5">&lt;br/&gt;</ph>
<ph id="6">&lt;br/&gt;</ph>
	You can create object <bpt id="7">[#$dp9]</bpt>layouts<ept id="7">&lt;/a&gt;</ept> using a factory <ph id="8">[#$dp10]</ph>, using text templates.<ph id="9">&lt;br/&gt;</ph>
	Text templates form the layout's HTML content from a hash with the data passed to the layout constructor.<ph id="10">&lt;br/&gt;</ph>
	In this example, the data provider is the geo object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Флаг "raw" означает, что данные вставляют "как есть" без экранирования html.
</seg></tuv>
	<tuv xml:lang="en"><seg> The "raw" flag means that data is inserted "as is" without escaping HTML.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Устанавливаем стандартный макет балуна кластера "Карусель".
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the "Carousel" standard layout for a cluster balloon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Устанавливаем собственный макет.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting a custom layout.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Устанавливаем размеры макета контента балуна (в пикселях).
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the size of the balloon content layout (in pixels).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Устанавливаем максимальное количество элементов в нижней панели на одной странице
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the maximum number of items in the bottom panel on one page
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Настройка внешего вида нижней панели.
 Режим marker рекомендуется использовать с небольшим количеством элементов.
 clusterBalloonPagerType: 'marker',
 Можно отключить зацикливание списка при навигации при помощи боковых стрелок.
 clusterBalloonCycling: false,
 Можно отключить отображение меню навигации.
 clusterBalloonPagerVisible: false
</seg></tuv>
	<tuv xml:lang="en"><seg> Configuring external view of the bottom panel.
 The marker mode is recommended for use with a small number of elements. 
 clusterBalloonPagerType: 'marker', 
 You can disable cycling the list when navigating using the side arrows. 
 clusterBalloonCycling: false, 
 You can disable displaying the navigation menu. 
 clusterBalloonPagerVisible: false
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Кастомизация макета балуна кластера "Карусель".</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Customization of the "Carousel" cluster balloon layout.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    API Яндекс.Карт позволяет <bpt id="1">[#$dp8]</bpt>загружать XML-файлы
    с географическими данными<ept id="1">&lt;/a&gt;</ept> в форматах YMapsML и KML.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The Yandex.Maps API allows you to <bpt id="1">[#$dp8]</bpt>load XML files
    with geographic data<ept id="1">&lt;/a&gt;</ept> in YMapsML and KML formats.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для загрузки данных используется функция <ph id="1">[#$dp11]</ph>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    To load data, use the <ph id="1">[#$dp11]</ph> function.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Отключение кеширования атрибута disabled в Firefox.
</seg></tuv>
	<tuv xml:lang="en"><seg> Disabling caching the "disabled" attribute in Firefox.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> При нажатии на кнопку загружаем соответствующий XML-файл.
 и отображаем его данные на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg> When the button is clicked, we load the appropriate XML file and display its data on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Обработчик загрузки XML-файлов.
</seg></tuv>
	<tuv xml:lang="en"><seg> The handler for loading XML files.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Отображение YMapsML, KML на карте</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Displaying YMapsML and KML on the map</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Показать пример YMapsML</seg></tuv>
	<tuv xml:lang="en"><seg>Show example of YMapsML</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Показать пример KML</seg></tuv>
	<tuv xml:lang="en"><seg>Show example of KML</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">&lt;input type="button" [#$tu4] class="load-ymapsml" /&gt;</ph>
    <ph id="2">&lt;input type="button" [#$tu5] class="load-kml" /&gt;</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">&lt;input type="button" [#$tu4] class="load-ymapsml" /&gt;</ph>
    <ph id="2">&lt;input type="button" [#$tu5] class="load-kml" /&gt;</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Многоугольник</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Polygon</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Многоугольник представляет собой замкнутую фигуру, состоящую из набора последовательно соединённых вершин. Многоугольник может иметь внутренние контуры.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    A polygon is a closed shape consisting of a set of sequentially connected vertices. A polygon can have internal contours.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
   Многоугольник может быть создан двумя способами: с помощью класса 
   <bpt id="1">[#$dp10]</bpt>GeoObject<ept id="1">&lt;/a&gt;</ept> с указанием типа геометрии "Многоугольник"
   либо с помощью вспомогательного класса <bpt id="2">[#$dp11]</bpt>Polygon<ept id="2">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
   A polygon can be created in two ways: using the <bpt id="1">[#$dp10]</bpt>GeoObject<ept id="1">&lt;/a&gt;</ept> class
   with the "Polygon" geometry type,
   or using the <bpt id="2">[#$dp11]</bpt>Polygon<ept id="2">&lt;/a&gt;</ept> auxiliary class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    При создании многоугольника необходимо указать координаты его вершин. Также могут быть заданы <bpt id="1">[#$dp14]</bpt>свойства<ept id="1">&lt;/a&gt;</ept> (например содержимое балуна или хинта) и <bpt id="2">[#$dp15]</bpt>опции<ept id="2">&lt;/a&gt;</ept> (например цвет заливки или стиль контура) многоугольника.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    When creating a polygon, you must specify the coordinates of its vertices. You can also set the <bpt id="1">[#$dp14]</bpt>properties<ept id="1">&lt;/a&gt;</ept> (for example the contents of a balloon or hint) and <bpt id="2">[#$dp15]</bpt>options<ept id="2">&lt;/a&gt;</ept> (such as fill color or contour style) of the polygon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для многоугольников доступен <bpt id="1">[#$dp18]</bpt>визуальный редактор<ept id="1">&lt;/a&gt;</ept>. Ссылка на редактор содержится в поле <bpt id="2">[#$dp19]</bpt>editor<ept id="2">&lt;/a&gt;</ept> объекта-многоугольника.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    A <bpt id="1">[#$dp18]</bpt>visual editor<ept id="1">&lt;/a&gt;</ept> is available for polygons. A link to the editor is in the <bpt id="2">[#$dp19]</bpt>editor<ept id="2">&lt;/a&gt;</ept> field of the polygon object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Многоугольники, наряду с другими геообъектами, можно объединять в <bpt id="1">[#$dp22]</bpt>коллекции<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Polygons, like other geo objects, can be combined in <bpt id="1">[#$dp22]</bpt>collections<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем многоугольник, используя класс GeoObject.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a polygon using the GeoObject class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Описываем геометрию геообъекта.
</seg></tuv>
	<tuv xml:lang="en"><seg> Describing the geometry of the geo object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Тип геометрии - "Многоугольник".
</seg></tuv>
	<tuv xml:lang="en"><seg> The "Polygon" geometry type.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Указываем координаты вершин многоугольника.
</seg></tuv>
	<tuv xml:lang="en"><seg> Specifying the coordinates of the vertices of the polygon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Координаты вершин внешнего контура.
</seg></tuv>
	<tuv xml:lang="en"><seg> The coordinates of the vertices of the external contour.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Задаем правило заливки внутренних контуров по алгоритму "nonZero".
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the fill rule for internal contours using the "nonZero" algorithm.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Описываем свойства геообъекта.
</seg></tuv>
	<tuv xml:lang="en"><seg> Defining properties of the geo object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Содержимое балуна.
</seg></tuv>
	<tuv xml:lang="en"><seg> The contents of the balloon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Описываем опции геообъекта.
 Цвет заливки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Describing the geo object options.
 Fill color.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Общая прозрачность (как для заливки, так и для обводки).
</seg></tuv>
	<tuv xml:lang="en"><seg> The overall transparency (for both fill and stroke).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Стиль обводки.
</seg></tuv>
	<tuv xml:lang="en"><seg> The stroke style.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем многоугольник, используя вспомогательный класс Polygon.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a polygon using the Polygon auxiliary class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Указываем координаты вершин многоугольника.
 Координаты вершин внешнего контура.
</seg></tuv>
	<tuv xml:lang="en"><seg> Specifying the coordinates of the vertices of the polygon.
 The coordinates of the vertices of the external contour.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Координаты вершин внутреннего контура.
</seg></tuv>
	<tuv xml:lang="en"><seg> The coordinates of the vertices of the inner contour.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Описываем свойства геообъекта.
 Содержимое балуна.
</seg></tuv>
	<tuv xml:lang="en"><seg> Describing the properties of the geo object.
 The contents of the balloon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Задаем опции геообъекта.
 Цвет заливки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting geo object options.
 Fill color.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <bpt id="1">[#$dp6]</bpt>Элемент управления<ept id="1">&lt;/a&gt;</ept> — визуальный объект, позволяющий пользователю управлять картой (например, перемещать карту, изменять её тип или коэффициент масштабирования).
</seg></tuv>
	<tuv xml:lang="en"><seg>
    A <bpt id="1">[#$dp6]</bpt>control<ept id="1">&lt;/a&gt;</ept> is a visual object that allows the user to manipulate the map (for example, move the map, change its type, or change the zoom).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Каждый элемент управления реализуется отдельным классом из пространства имен control (например, <ph id="1">[#$dp9]</ph>).
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Each control is implemented by a separate class from the control namespace (for example, <ph id="1">[#$dp9]</ph>).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Элемент управления "пробки" можно подключать как через ключ 'trafficControl', так и создавая экземпляр класса <ph id="1">[#$dp12]</ph>. При создании экземпляра класса можно указывать начальное состояние элемента управления.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The "Traffic" control can be enabled either via the 'trafficControl' key, or by creating an instance of the <ph id="1">[#$dp12]</ph> class. When creating a class instance, you can specify the initial state of the control.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создадим элемент управления "Пробки".
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating the "Traffic" control.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Отображаются пробки "Сейчас".
</seg></tuv>
	<tuv xml:lang="en"><seg> Displaying traffic "Now".
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Начинаем сразу показывать пробки на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg> Begin immediately showing traffic on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавим контрол на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding the control to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Получим ссылку на провайдер пробок "Сейчас" и включим показ инфоточек.
</seg></tuv>
	<tuv xml:lang="en"><seg> Getting a reference to the "Now" traffic provider and enabling the display of information points.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Элементы управления "Пробки"</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. "Traffic" control</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Взаимодействие карты с пользователем программируется с помощью
    <bpt id="1">[#$dp5]</bpt>поведений<ept id="1">&lt;/a&gt;</ept>.

</seg></tuv>
	<tuv xml:lang="en"><seg>
    Interaction between the map and the user is programmed using 
    <bpt id="1">[#$dp5]</bpt>behaviors<ept id="1">&lt;/a&gt;</ept>.

</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Поведения карты контролируются <bpt id="1">[#$dp8]</bpt>менеджером поведений<ept id="1">&lt;/sa&gt;</ept>.
    <bpt id="2">&lt;strong&gt;</bpt>Cоздавать экземпляры этого класса самостоятельно не следует<ept id="2">&lt;/strong&gt;</ept>.
    Ссылка на менеджер поведений находится в поле <bpt id="3">[#$dp9]</bpt>behaviors<ept id="3">&lt;/sa&gt;</ept>
    объекта карты.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The map behaviors are controlled by the  <bpt id="1">[#$dp8]</bpt>behaviors manager<ept id="1">&lt;/sa&gt;</ept>.
    <bpt id="2">&lt;strong&gt;</bpt>You should not have to create instances of this class.<ept id="2">&lt;/strong&gt;</ept>.
     A reference to the behaviors manager is in the <bpt id="3">[#$dp9]</bpt>behaviors<ept id="3">&lt;/sa&gt;</ept>
     field of the map object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Санкт-Петербург
</seg></tuv>
	<tuv xml:lang="en"><seg> St. Petersburg
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Отключаем часть включенных по умолчанию поведений:
</seg></tuv>
	<tuv xml:lang="en"><seg> Disabling some of the behaviors enabled by default:
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>drag - перемещение карты при нажатой левой кнопки мыши;
</seg></tuv>
	<tuv xml:lang="en"><seg>drag - moving the map while holding down the left mouse button;
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>magnifier.rightButton - увеличение области, выделенной правой кнопкой мыши.
</seg></tuv>
	<tuv xml:lang="en"><seg>magnifier.rightButton - zooming in on the area selected with the right mouse button.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Включаем линейку.
</seg></tuv>
	<tuv xml:lang="en"><seg> Enabling the ruler.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Изменяем свойство поведения с помощью опции:
 изменение масштаба колесом прокрутки будет происходить медленно,
 на 1/2 уровня масштабирования в секунду.
</seg></tuv>
	<tuv xml:lang="en"><seg> Using options to change the property of a behavior: zooming with the scroll wheel will be slow, 1/2 zoom level per second.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Поведения карты</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Map behaviors</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Каждому географическому объекту в YMapsML ставятся в соответствие геометрическая фигура и геообъект, используемый для
    отображения этой фигуры на карте. Описание фигур и их привязка к географическим координатам задаются
    в соответствующих YMapsML-элементах. Для фигуры "многоугольник" предназначен элемент
    <bpt id="1">[#$dp11]</bpt>gml:Polygon<ept id="1">&lt;/a&gt;</ept>.
    Он содержит элемент <bpt id="2">[#$dp12]</bpt>gml:exterior<ept id="2">&lt;/a&gt;</ept>, в котором перечисляются
    координаты вершин внешнего контура многоугольника. Также многоугольник может содержать внутренние контуры. Координаты их вершин
    задаются в элементе <bpt id="3">[#$dp13]</bpt>gml:interior<ept id="3">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In YMapsML, each geographical object is associated with a geometric shape
	and a geo object that is used for displaying this shape on the map. The shape definitions and their anchors to geographical coordinates are set in
	corresponding YMapsML elements. The <bpt id="1">[#$dp11]</bpt>gml:Polygon<ept id="1">&lt;/a&gt;</ept> element is designated for the "polygon" shape.
	It contains the <bpt id="2">[#$dp12]</bpt>gml:exterior<ept id="2">&lt;/a&gt;</ept> element, which lists the coordinates of the vertexes of the polygon's exterior contour. A polygon may also contain interior contours. Their vertexes are set in the <bpt id="3">[#$dp13]</bpt>gml:interior<ept id="3">&lt;/a&gt;</ept> element.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для загрузки YMapsML-данных предназначена функция <ph id="1">[#$dp16]</ph>. После того как данные загрузятся, функция преобразует их в
    <ph id="2">[#$dp17]</ph> и передает в качестве параметра функции-обработчику. Коллекцию геообъектов GeoObjectCollection можно отобразить
    на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The <ph id="1">[#$dp16]</ph> function is for loading YMapsML data. After data has loaded, the function converts the data to
	<ph id="2">[#$dp17]</ph> and passes it to the handler function as a parameter. A GeoObjectCollection can be displayed
	on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
        Макеты объектов можно создавать с помощью фабрики <ph id="1">[#$dp7]</ph>,
        используя текcтовые шаблоны.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        Object layouts can be created using the <ph id="1">[#$dp7]</ph> factory,
        and using text templates.
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
        В данном примере создается пользовательский макет хинта <bpt id="1">[#$dp10]</bpt>геообъекта<ept id="1">&lt;/sa&gt;</ept>.
        Макет задается геообъекту через опции.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        This example creates a custom hint layout for the <bpt id="1">[#$dp10]</bpt>geo object<ept id="1">&lt;/sa&gt;</ept>.
        The layout is set for the geo object via the options.
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Для того чтобы хинт автоматически сдвигал свою позицию в случае выхода за пределы контейнера карты, необходимо в его макете переопределить
    метод <bpt id="1">[#$dp13]</bpt>getShape()<ept id="1">&lt;/sa&gt;</ept>. Данный метод должен возвращать текущие размеры макета хинта.</seg></tuv>
	<tuv xml:lang="en"><seg>In order for the hint to automatically shift its position if it goes outside of the map container,
    redefine the <bpt id="1">[#$dp13]</bpt>getShape()<ept id="1">&lt;/sa&gt;</ept> method in its layout. This method should return the current size of the hint layout.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Собственный макет хинта</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Custom hint layout</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создание макета содержимого хинта.
 Макет создается через фабрику макетов с помощью текстового шаблона.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a layout for hint content.
 The layout is created through the layout factory using a text template.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Определяем метод getShape, который
 будет возвращать размеры макета хинта.
 Это необходимо для того, чтобы хинт автоматически
 сдвигал позицию при выходе за пределы карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Defining the getShape method, which will return the size of the hint layout. This is necessary in order for the hint to automatically move its position when going off the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В этом примере обрабатывается событие геообъекта - щелчок правой кнопкой мыши на метке,
    и отображется контекстное меню для управления его свойствами.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In this example, a geo object event is processed - a right-click on a placemark,
	which opens the context menu for managing the object's properties.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Контекстное меню геообъекта</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Geo object context menu</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Вызовите контекстное меню на метке</seg></tuv>
	<tuv xml:lang="en"><seg>Open the context menu on a placemark</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем метку.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a placemark.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Красная иконка, растягивающаяся под содержимое.
</seg></tuv>
	<tuv xml:lang="en"><seg> Red icon that stretches to fit content.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Контекстное меню, позволяющее изменить параметры метки.
 Вызывается при нажатии правой кнопкой мыши на метке.
</seg></tuv>
	<tuv xml:lang="en"><seg> The context menu allows you to change the placemark settings. It is opened by right-clicking the placemark.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Если меню метки уже отображено, то убираем его.
</seg></tuv>
	<tuv xml:lang="en"><seg> If the placemark menu is already displayed, remove it.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> HTML-содержимое контекстного меню.
</seg></tuv>
	<tuv xml:lang="en"><seg> HTML content of the context menu.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Размещаем контекстное меню на странице
</seg></tuv>
	<tuv xml:lang="en"><seg> Putting a context menu on the page
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Задаем позицию меню.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the menu position.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Заполняем поля контекстного меню текущими значениями свойств метки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Filling the fields of the context menu with the current values of the placemark properties.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> При нажатии на кнопку "Сохранить" изменяем свойства метки
 значениями, введенными в форме контекстного меню.
</seg></tuv>
	<tuv xml:lang="en"><seg> When the "Save" button is clicked, we change placemark properties to the values entered in the context menu form.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Удаляем контекстное меню.
</seg></tuv>
	<tuv xml:lang="en"><seg> Removing the context menu.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере для модели добавленного на карту мультимаршрута мы создаем еще одно
    пользовательское отображение. Данное отображение выводит краткое текстовое описание
    мультимаршурта и реагирует на изменение состояния модели.
    Пример иллюстрирует работу с событиями и данными модели мультимаршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In this example, we create another custom view for the multiroute model added to the map.
	This representation displays a brief summary
	of the multiroute and reacts to a change in the model's state.
	The example shows how to work with a multiroute model's data and events.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Класс простого текстового отображения модели мультимаршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg> Class for a simple textual view of the multiroute model.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Объявляем начальное состояние.
</seg></tuv>
	<tuv xml:lang="en"><seg> Declaring the initial state.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Элемент, в который будет выводиться текст.
</seg></tuv>
	<tuv xml:lang="en"><seg> The element the text will be displayed in.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Подписываемся на события модели, чтобы
 обновлять текстовое описание мультимаршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg> Subscribing to model events in order to
 update the multiroute's text description.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Таблица соответствия идентификатора состояния имени его обработчика.
</seg></tuv>
	<tuv xml:lang="en"><seg> Mapping table for the state ID to its handler.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Таблица соответствия типа маршрута имени его обработчика.
</seg></tuv>
	<tuv xml:lang="en"><seg> Mapping table for the route type to its handler.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Обработчик событий модели.
</seg></tuv>
	<tuv xml:lang="en"><seg> Handler for model events.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Запоминаем состояние модели и перестраиваем текстовое описание.
</seg></tuv>
	<tuv xml:lang="en"><seg> Storing the model state and reconstructing the text description.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Берем из таблицы обработчик для текущего состояния и исполняем его.
</seg></tuv>
	<tuv xml:lang="en"><seg> Taking the handler for the current state from the table and executing it.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Берем из таблицы обработчик для данного типа маршрута и применяем его.
</seg></tuv>
	<tuv xml:lang="en"><seg> Taking the handler for this route type from the table and applying it.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Метод формирующий общую часть описания для обоих типов маршрутов.
</seg></tuv>
	<tuv xml:lang="en"><seg> Method that form the general part of the description for both types of routes.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Метод строящий список текстовых описаний для
 всех сегментов маршрута на общественном транспорте.
</seg></tuv>
	<tuv xml:lang="en"><seg> Method that constructs a list of text descriptions for all the segments of a route on public transport.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем модель мультимаршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a multiroute model.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем кнопку, переключающую модель в режим
 маршрутизации на общественном транспорте.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a button that switches the model to routing on public transport.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем экземпляр текстового отображения модели мультимаршрута.
 см. файл custom_view.js
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating an instance of a textual display of the multiroute model. See the custom_view.js file.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем на основе существующей модели мультимаршрут.
</seg></tuv>
	<tuv xml:lang="en"><seg> It will be based on the existing multiroute model.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Путевые точки можно перетаскивать.
 Маршрут при этом будет перестраиваться.
</seg></tuv>
	<tuv xml:lang="en"><seg> Waypoints can be dragged.
 The route adjusts when this happens.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Работа с данными и событиями модели мультимаршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Working with the multiroute model data and events</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>,
        <ph id="5">[#$dp6]</ph>, <ph id="6">[#$dp7]</ph>,
        <ph id="7">[#$dp8]</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
        <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>,
        <ph id="5">[#$dp6]</ph>, <ph id="6">[#$dp7]</ph>,
        <ph id="7">[#$dp8]</ph>
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
        В данном примере драггер используется для перетаскивания HTML-элемента "#marker".
        Этот HTML-элемент был передан как значение опции autoStartElement.
        Драггер автоматически запускается по событию mousedown элемента autoStartElement.
        Есть возможность инициализировать работу драггера вручную при помощи метода <bpt id="1">[#$dp10]</bpt>start()<ept id="1">&lt;/sa&gt;</ept>.
        Драггер прекращает работу по событию mouseup документа, но можно досрочно прекратить работу драггера методом <bpt id="2">[#$dp11]</bpt>stop()<ept id="2">&lt;/sa&gt;</ept>.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        In this example, the dragger is used for dragging the "#marker" HTML element.
        This HTML element was passed as the value of the autoStartElement option.
        The dragger is automatically started on the mousedown event of the  autoStartElement.
        It is possible to initialize the dragger manually using the <bpt id="1">[#$dp10]</bpt>start()<ept id="1">&lt;/sa&gt;</ept> method.
        The dragger stops on the mouseup event of the document, but it is possible to terminate the dragger earlier using the <bpt id="2">[#$dp11]</bpt>stop()<ept id="2">&lt;/sa&gt;</ept> method.
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
        Все события драггера содержат поля 'position' и 'delta', 
        которые позволяют узнать текущее положение курсора и смещение текущего положения относительно последнего события драггера.
        В примере по событию <bpt id="1">[#$dp14]</bpt>stop<ept id="1">&lt;/sa&gt;</ept> происходит перевод положения маркера в геокоординаты, 
        если драггер прекратил работу над картой.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        All dragger events contain the fields 'position' and 'delta',
        which tell us the current cursor position and the offset of the current position relative to the last dragger event.
        In the example, when the <bpt id="1">[#$dp14]</bpt>stop<ept id="1">&lt;/sa&gt;</ept> event occurs, the marker position is converted to geocoordinates
        if the dragger has stopped working on the map.
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Использование драггера.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Using the dragger.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Перетащите метку на карту</seg></tuv>
	<tuv xml:lang="en"><seg>Dragging the placemark to the map</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Драггер будет автоматически запускаться при нажатии на элемент 'marker'.
</seg></tuv>
	<tuv xml:lang="en"><seg> Dragger will automatically run when the user clicks on the 'marker' element.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Смещение маркера относительно курсора.
</seg></tuv>
	<tuv xml:lang="en"><seg> The offset of the marker relative to the cursor.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Сохраняем смещение маркера относительно точки начала драга.	
</seg></tuv>
	<tuv xml:lang="en"><seg> Saving the offset of the marker relative to the drag starting point.	
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Переводим координаты страницы в глобальные пиксельные координаты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Converting page coordinates to global pixel coordinates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Получаем центр карты в глобальных пиксельных координатах.
</seg></tuv>
	<tuv xml:lang="en"><seg> Getting the center of the map in global pixel coordinates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Получением размер контейнера карты на странице.
</seg></tuv>
	<tuv xml:lang="en"><seg> Getting the size of the map container on the page.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Вычисляем границы карты в глобальных пиксельных координатах.
</seg></tuv>
	<tuv xml:lang="en"><seg> Calculating the map boundaries in global pixel coordinates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Проверяем, что завершение работы драггера произошло в видимой области карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Checking that the dragger finished working in a visible area of the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Теперь переводим глобальные пиксельные координаты в геокоординаты с учетом текущего уровня масштабирования карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Now we'll convert the global pixel coordinates to geocoordinates with the current zoom level of the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Поле 'delta' содержит разницу между положениями текущего и предыдущего события драггера.
</seg></tuv>
	<tuv xml:lang="en"><seg> The 'delta' field contains the difference between the positions of the current and previous dragger events.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере создаются три метки со своими HTML макетами. <ph id="1">&lt;br/&gt;</ph>
    Создание своих макетов происходит при помощи фабрики макетов. <ph id="2">&lt;br/&gt;</ph>
    Всем меткам задаются разные фигуры активных областей: прямоугольник, круг и полигон. <ph id="3">&lt;br/&gt;</ph>
<ph id="4">&lt;br/&gt;</ph>
    Метка, чтобы ловить события мышки, использует <bpt id="5">[#$dp5]</bpt>активную область<ept id="5">&lt;/a&gt;</ept>. <ph id="6">&lt;br/&gt;</ph>
    По умолчанию при задании своего HTML макета фигура активной области не задается, и её нужно задать самостоятельно.<ph id="7">&lt;br/&gt;</ph>
    Это можно сделать при помощи опции метки iconShape в виде <bpt id="8">[#$dp6]</bpt>JSON описания геометрии<ept id="8">&lt;/sa&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example creates three placemarks with their own HTML layouts.
<ph id="1">&lt;br/&gt;</ph>
	Custom layouts are created using the layout factory.
<ph id="2">&lt;br/&gt;</ph>
	All layouts are assigned various hotspot shapes:
rectangle, circle, or polygon. <ph id="3">&lt;br/&gt;</ph>
<ph id="4">&lt;br/&gt;</ph>
	The placemark uses the <bpt id="5">[#$dp5]</bpt>hotspot<ept id="5">&lt;/a&gt;</ept> to catch mouse events.<ph id="6">&lt;br/&gt;</ph>
	By default, the hotspot shape is not set when setting the HTML layout, and it has to be set separately.<ph id="7">&lt;br/&gt;</ph>
	You can do this using the iconShape placemark option as a <bpt id="8">[#$dp6]</bpt>JSON geometry description<ept id="8">&lt;/sa&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создание метки с квадратной активной областью.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a placemark with a square hotspot.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Описываем фигуру активной области "Прямоугольник".
</seg></tuv>
	<tuv xml:lang="en"><seg> Describing the shape of a "Rectangle" hotspot.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Прямоугольник описывается в виде двух точек - верхней левой и нижней правой.
</seg></tuv>
	<tuv xml:lang="en"><seg> The rectangle is defined as two points: the upper left and lower right.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создание метки с круглой активной областью.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a placemark with a round hotspot.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Описываем фигуру активной области "Круг".
</seg></tuv>
	<tuv xml:lang="en"><seg> Describing the shape of a "Circle" hotspot.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Круг описывается в виде центра и радиуса
</seg></tuv>
	<tuv xml:lang="en"><seg> The circle is defined as the center and radius
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создание метки со сложной фигурой активной области.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a placemark with a complex hotspot shape.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Описываем фигуру активной области "Полигон".
</seg></tuv>
	<tuv xml:lang="en"><seg> Describing the shape of a "Polygon" hotspot.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Полигон описывается в виде трехмерного массива. Массив верхнего уровня содержит контуры полигона. 
 Первый элемента массива - это внешний контур, а остальные - внутренние.
</seg></tuv>
	<tuv xml:lang="en"><seg> A polygon is defined as a three-dimensional array. The top-level array contains the contours of the polygon. The first element of the array is the external contour, and the others are internal contours.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Описание внешнего контура полигона в виде массива координат.
</seg></tuv>
	<tuv xml:lang="en"><seg> Describing the external polygon contour as an array of coordinates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> , ... Описание внутренних контуров - пустых областей внутри внешнего.
</seg></tuv>
	<tuv xml:lang="en"><seg> ... Describing the internal contours - empty areas inside the external contour.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Пример задания своих HTML макетов меток со своими фигурами активных областей</seg></tuv>
	<tuv xml:lang="en"><seg>Example of setting custom HTML layouts for placemarks with your own hotspot shapes</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере при инициализации загружаются только модули карты и кнопки.
<ph id="1">&lt;br/&gt;</ph>
    По клику кнопки происходит загрузка модуля метки.
<ph id="2">&lt;br/&gt;</ph>
    Загрузку отдельных модулей можно производить при помощи метода <bpt id="3">[#$dp9]</bpt>require<ept id="3">&lt;/sa&gt;</ept> модульной системы.
<ph id="4">&lt;br/&gt;</ph>
    Метод возвращет <bpt id="5">[#$dp10]</bpt>объект-обещание<ept id="5">&lt;/sa&gt;</ept>, который подтверждается массивом запрошенных модулей.
<ph id="6">&lt;br/&gt;</ph>   
    Для удобства в примере используется метод spread, который передает в функцию данные в виде списка аргументов, а не в виде массива.
<ph id="7">&lt;br/&gt;</ph>
<ph id="8">&lt;br/&gt;</ph>
    API Яндекс.Карт состоит из большого количества взаимосвязанных модулей.
<ph id="9">&lt;br/&gt;</ph>
    По умолчанию при подключении API происходит загрузка стандартного набора модулей (package.full), который включает в себя все необходимое для работы API.
<ph id="10">&lt;br/&gt;</ph>
    Для сокращения объема загружаемого кода API можно подключать некоторые модули вместо стандартного набора.
<ph id="11">&lt;br/&gt;</ph>
    Это можно сделать, указав необходимые модули в GET-параметре load. Модули перечисляются через запятую.
<ph id="12">&lt;br/&gt;</ph>
    Если GET-параметр load не указан, то просходит загрузка package.full.
<ph id="13">&lt;br/&gt;</ph>
    Подробнее о работе модулей смотрите в разделе <bpt id="14">[#$dp11]</bpt>Модули<ept id="14">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In this example, initialization only loads the map and button modules.
<ph id="1">&lt;br/&gt;</ph>
	When the button is clicked, the placemark module is loaded.
<ph id="2">&lt;br/&gt;</ph>
	Separate modules can be loaded using the <bpt id="3">[#$dp9]</bpt>require<ept id="3">&lt;/sa&gt;</ept> method in the modular system.
<ph id="4">&lt;br/&gt;</ph>
	The method returns a <bpt id="5">[#$dp10]</bpt>promise object<ept id="5">&lt;/sa&gt;</ept>, which is confirmed with an array of requested modules.
<ph id="6">&lt;br/&gt;</ph>
	For convenience, the example uses the "spread" method, which passes the data to the function as a list of arguments, not as an array.
<ph id="7">&lt;br/&gt;</ph>
<ph id="8">&lt;br/&gt;</ph>
<ph id="9">&lt;br/&gt;</ph>
    By default, enabling the API loads the standard set of modules (package.full), which includes everything necessary for working with the API.
<ph id="10">&lt;br/&gt;</ph>
    To reduce the volume of code to load, the API can connect certain modules instead of the standard set.
<ph id="11">&lt;br/&gt;</ph>
    You can do this by indicating the desired modules in the "load" GET parameter. Modules are comma-separated.
<ph id="12">&lt;br/&gt;</ph>
    If the "load" GET parameter is omitted, package.full is loaded.
<ph id="13">&lt;br/&gt;</ph>
    For more information about how modules work, see the section <bpt id="14">[#$dp11]</bpt>Modules<ept id="14">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Не отображаем на карте никакие стандартные элементы управления, так как они не были загружены.
</seg></tuv>
	<tuv xml:lang="en"><seg> Not displaying any standard controls on the map, as they were not loaded.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Если модуль уже был загружен, то нет необходимости повторно обращаться к модульной системе.
</seg></tuv>
	<tuv xml:lang="en"><seg> If the module has already been loaded, there is no need to access the module system again.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Загружаем по требованию класс метки и оверлея метки. 
 По умолчанию оверлей автоматически загружается после добавления метки на карту. 
 В данном примере происходит асинхронная загрузка самого модуля метки и нет необходимости в отдельной подгрузке оверлея.
</seg></tuv>
	<tuv xml:lang="en"><seg> On-demand loading of the placemarks class and overlay. By default, the overlay is automatically loaded after you add placemarks to the map.
 In this example, the placemark module itself is loaded asynchronously and there is no need to load the overlay separately.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем в глобальную область видимости класс вручную, 
 так как при использовании метода require модульной системы этого не происходит.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding the class manually to the global viewport, since this does not happen when using the "require" method of the module system.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Устанавливаем случайную позицию, близкую к центру карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting a random position close to the center of the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> При помощи GET параметра load можно перечислить необходимые модули API Яндекс.Карт. </seg></tuv>
	<tuv xml:lang="en"><seg> Use the "load" GET parameter to list the necessary Yandex.Maps API modules. </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Каждому географическому объекту в YMapsML ставятся в соответствие геометрическая фигура и геообъект, используемый для
    отображения этой фигуры на карте. Описание фигур и их привязка к географическим координатам задаются
    в соответствующих YMapsML-элементах. Для описания фигуры "точка" предназначен элемент <bpt id="1">[#$dp11]</bpt>gml:Point<ept id="1">&lt;/a&gt;</ept>.
    Для отображения точки на карте используется геообъект Placemark.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In YMapsML, each geographical object is associated with a geometric shape
	and a geo object that is used for displaying this shape on the map. The shape definitions and their anchors to geographical coordinates are set in
	corresponding YMapsML elements. The <bpt id="1">[#$dp11]</bpt>gml:Point<ept id="1">&lt;/a&gt;</ept> element is designated for the "point" shape.
	The Placemark geo object is used for displaying a point on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для загрузки YMapsML-данных предназначена функция <ph id="1">[#$dp14]</ph>. После того как данные загрузятся, функция преобразует их в
    <ph id="2">[#$dp15]</ph> и затем передает в качестве параметра функции-обработчику. Коллекцию геообъектов GeoObjectCollection можно отобразить
    на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The <ph id="1">[#$dp14]</ph> function is for loading YMapsML data. After data has loaded, the function converts the data to
	<ph id="2">[#$dp15]</ph> and passes it to the handler function as a parameter. A GeoObjectCollection can be displayed
	on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры YMapsML. Добавление метки на карту.</seg></tuv>
	<tuv xml:lang="en"><seg>YMapsML examples. Adding placemarks to the map.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> После того как данные YmapsMl-файла загрузятся, вызывается callback-функция.
</seg></tuv>
	<tuv xml:lang="en"><seg> After the data from the YMapsML file loads, the callback function is called.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем коллекцию геообъектов на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding a collection of geo objects to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Ссылка на редактор маршрута находится в поле <bpt id="1">[#$dp5]</bpt>editor<ept id="1">&lt;/a&gt;</ept> экземпляра класса router.Route, который будет передан в качестве параметра объекту <ph id="2">[#$dp6]</ph> после того, как выполнится построение маршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The reference to the route editor is found in the <bpt id="1">[#$dp5]</bpt>editor<ept id="1">&lt;/a&gt;</ept> field of an instance of the router.Route class, which will be passed as a parameter to the <ph id="2">[#$dp6]</ph> object after building the route.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Включать (выключать) редактор можно только внутри функции, которая выполнится, когда от сервера придет результат.
    </seg></tuv>
	<tuv xml:lang="en"><seg>
    The editor can only be turned on (off) inside the function that will be executed when the result comes from the server.
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    ymaps.route(...) // возвращает объект util.Promise
        .then(
            function (route) {
                route.editor.start();
                ...
            })
        )
    </seg></tuv>
	<tuv xml:lang="en"><seg>
    ymaps.route(...) // returns the util.Promise object
        .then(
            function (route) {
                route.editor.start();
                ...
            })
        )
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Редактирование маршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Editing a route</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Включить редактор маршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Enable the route editor</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">&lt;input type="button" [#$tu4] id="editor" name="start"/&gt;</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">&lt;input type="button" [#$tu4] id="editor" name="start"/&gt;</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Признак начала редактирования маршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg> Indicates the beginning of route editing.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Построение маршрута от станции метро Смоленская до станции Третьяковская.
 Маршрут должен проходить через метро "Арбатская".
</seg></tuv>
	<tuv xml:lang="en"><seg> Building a route from Smolenskaya metro station to Tretyakov station. The route should pass through Arbatskaya station.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Метро Арбатская - транзитная точка (проезжать через эту точку,
 но не останавливаться в ней).
</seg></tuv>
	<tuv xml:lang="en"><seg> Metro Arbatskaya is a through point (passing through this point, but not stopping at it).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Метро "Третьяковская".
</seg></tuv>
	<tuv xml:lang="en"><seg> Metro Tretyakovskaya.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Автоматически позиционировать карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Automatically positioning the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Включаем редактор.
</seg></tuv>
	<tuv xml:lang="en"><seg> Turning on the editor.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Выключаем редактор.
</seg></tuv>
	<tuv xml:lang="en"><seg> Turning off the editor.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    API позволяет <bpt id="1">[#$dp8]</bpt>получить информацию
    о предполагаемом местоположении пользователя<ept id="1">&lt;/a&gt;</ept> по IP-адресу.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The API lets you <bpt id="1">[#$dp8]</bpt>get information
    about the user's probable location<ept id="1">&lt;/a&gt;</ept> by the IP address.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Доступ к этим данным предоставляет статический объект <ph id="1">[#$dp11]</ph>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Access to this data is provided by the static <ph id="1">[#$dp11]</ph> object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Определение местоположения пользователя</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Detecting user location</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Сравним положение, вычисленное по ip пользователя и
 положение, вычисленное средствами браузера.
</seg></tuv>
	<tuv xml:lang="en"><seg> Comparing the position calculated from the user's IP address and the position detected using the browser.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Красным цветом пометим положение, вычисленное через ip.
</seg></tuv>
	<tuv xml:lang="en"><seg> We'll mark the position calculated by IP in red.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Синим цветом пометим положение, полученное через браузер.
 Если браузер не поддерживает эту функциональность, метка не будет добавлена на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> We'll mark the position obtained through the browser in blue. If the browser does not support this functionality, the placemark will not be added to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <bpt id="1">[#$dp7]</bpt>YMapsML<ept id="1">&lt;/a&gt;</ept> - язык описания географических объектов.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <bpt id="1">[#$dp7]</bpt>YMapsML<ept id="1">&lt;/a&gt;</ept> is a language for describing geographical objects.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Каждому географическому объекту в YMapsML ставятся в соответствие геометрическая фигура и геообъект, используемый для
    отображения этой фигуры на карте. Описание фигур и их привязка к географическим координатам задается
    в соответствующих YMapsML-элементах. Для фигуры "точка" предназначен элемент <bpt id="1">[#$dp10]</bpt>gml:Point<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In YMapsML, each geographical object is associated with a geometric shape
	and a geo object that is used for displaying this shape on the map. The shape definitions and their anchors to geographical coordinates are set in
	corresponding YMapsML elements. The <bpt id="1">[#$dp10]</bpt>gml:Point<ept id="1">&lt;/a&gt;</ept> element is designated for the "point" shape.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Внешний вид отображаемых объектов задается в элементе <bpt id="1">[#$dp13]</bpt>repr:Representation<ept id="1">&lt;/a&gt;</ept>.
    В <bpt id="2">[#$dp14]</bpt>документации<ept id="2">&lt;/a&gt;</ept> можно ознакомиться с подробной инструкцией по
    заданию стиля отображаемых объектов.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The visual appearance of displayed objects is set in the
	<bpt id="1">[#$dp13]</bpt>repr:Representation<ept id="1">&lt;/a&gt;</ept> element.
	For detailed instructions on setting styles for displayed objects,
	see the <bpt id="2">[#$dp14]</bpt>documentation<ept id="2">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для загрузки YMapsML-данных предназначена функция <ph id="1">[#$dp17]</ph>. После того как данные загрузятся, функция преобразует их в
    <ph id="2">[#$dp18]</ph> и передает в качестве параметра функции-обработчику.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The <ph id="1">[#$dp17]</ph> function is for loading YMapsML data. After data has loaded, the function converts the data to
	<ph id="2">[#$dp18]</ph> and passes it to the handler function as a parameter.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавление элемента в список.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding an element to the list.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Показать/скрыть группу геообъектов на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg> Showing/hiding a group of geo objects on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Если пункт меню "неактивный", то добавляем группу на карту,
 иначе - удаляем с карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> If the menu item is "inactive," we add the group to the map. Otherwise, we delete it from the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Меняем "активность" пункта меню.
</seg></tuv>
	<tuv xml:lang="en"><seg> Changing the "active" state of the menu item.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавление нового пункта меню в список.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding a new menu item to the list.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры YMapsML. Создание меню для отображения групп объектов.</seg></tuv>
	<tuv xml:lang="en"><seg>YMapsML examples. Creating a menu for displaying groups of objects.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для объединения близко расположенных меток в группу (кластер) используется <bpt id="1">[#$dp9]</bpt>кластеризатор<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The <bpt id="1">[#$dp9]</bpt>clusterer<ept id="1">&lt;/a&gt;</ept> is used for combining closely positioned placemarks in a group (cluster).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Кластеризатор реализуется классом <ph id="1">[#$dp12]</ph>. В качестве параметров конструктору можно передать опции кластеризатора: стиль отображения значка кластера, размер его ячейки и т. д. Список доступных опций можно посмотреть в соответствующем <bpt id="2">[#$dp13]</bpt>разделе<ept id="2">&lt;/sa&gt;</ept> справочника.
    Опции для настройки меток-кластеров задаются в кластеризатор с префиксом "cluster". Список опций меток-кластеров доступен в документации <ph id="3">[#$dp14]</ph>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The clusterer is implemented by the <ph id="1">[#$dp12]</ph> class. As parameters to the constructor, you can pass clusterization options: display style for the cluster icon, the size of its cell, and so on. For a list of available options, see the corresponding <bpt id="2">[#$dp13]</bpt>section<ept id="2">&lt;/sa&gt;</ept> of the Reference Guide.
    Options for customizing the cluster placemarks are set in the clusterer using the "cluster" prefix. The list of options for cluster placemarks is available in the documentation <ph id="3">[#$dp14]</ph>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Вы можете задать произвольное изображение для меток кластера. Для этого нужно переопределить опцию clusterIcons.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    You can set a custom image for cluster placemarks. To do this, override the clusterIcons option.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>

</seg></tuv>
	<tuv xml:lang="en"><seg>

</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Зададим массив, описывающий иконки кластеров разного размера.
</seg></tuv>
	<tuv xml:lang="en"><seg> Defining an array that describes cluster icons of different sizes.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Эта опция отвечает за размеры кластеров.
 В данном случае для кластеров, содержащих до 100 элементов,
 будет показываться маленькая иконка. Для остальных - большая.
</seg></tuv>
	<tuv xml:lang="en"><seg> This option is responsible for the cluster sizes. In this case, for clusters containing up to 100 elements, it will show a small icon. For the rest, a large icon will be shown.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Собственные метки для кластеров</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Custom placemarks for clusters</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для многоугольников доступен <bpt id="1">[#$dp9]</bpt>визуальный редактор<ept id="1">&lt;/a&gt;</ept>. Ссылка на редактор содержится в поле <bpt id="2">[#$dp10]</bpt>editor<ept id="2">&lt;/a&gt;</ept> объекта-многоугольника.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    A <bpt id="1">[#$dp9]</bpt>visual editor<ept id="1">&lt;/a&gt;</ept> is available for polygons. A link to the editor is in the <bpt id="2">[#$dp10]</bpt>editor<ept id="2">&lt;/a&gt;</ept> field of the polygon object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Редактор многоугольника</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Polygon editor</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Кликните на карту, чтобы начать создание многоугольника</seg></tuv>
	<tuv xml:lang="en"><seg>Click on the map to start creating a polygon</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем многоугольник без вершин.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a polygon with no vertices.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Курсор в режиме добавления новых вершин.
</seg></tuv>
	<tuv xml:lang="en"><seg> The cursor in the mode for adding new vertices.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Максимально допустимое количество вершин.
</seg></tuv>
	<tuv xml:lang="en"><seg> The maximum number of vertices.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Цвет заливки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Fill color.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Цвет обводки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Stroke color.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Ширина обводки.
</seg></tuv>
	<tuv xml:lang="en"><seg> The stroke width.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем многоугольник на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding the polygon to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> В режиме добавления новых вершин меняем цвет обводки многоугольника.
</seg></tuv>
	<tuv xml:lang="en"><seg> In the mode for adding new vertices, we change the stroke color of the polygon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Включаем режим редактирования с возможностью добавления новых вершин.
</seg></tuv>
	<tuv xml:lang="en"><seg> Turning on the edit mode with the possibility of adding new vertices.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Размер карты определяется при ее создании менеджером контейнеров.
    Далее карта не следит за возможными изменениями своих размеров.
    Чтобы карта изменила свои размеры на актуальные, требуется вызов функции
    менеджера <bpt id="1">[#$dp6]</bpt>fitToViewport()<ept id="1">&lt;/sa&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Map size is determined when it is created by the container manager.
    After this, the map does not track possible changes to its size.
    In order for the map to change its size to the current size,
    call the  <bpt id="1">[#$dp6]</bpt>fitToViewport()<ept id="1">&lt;/sa&gt;</ept> function.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Если скопировать полный код примера в новый HTML-документ,
    развернутая карта будет полностью занимать область просмотра браузера.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    If you copy the full code of the example to a new HTML document,
    the opened map will take up the entire browser viewport.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> При сложных перестроениях можно выставить автоматическое
 обновление карты при изменении размеров контейнера.
 При простых изменениях размера контейнера рекомендуется обновлять карту программно.
 autoFitToViewport: 'always'
</seg></tuv>
	<tuv xml:lang="en"><seg> For complex rebuilds, we can set automatic updates to the map when the container is resized.
 For simple changes to the size of the container, we recommend updating the map programmatically.
 autoFitToViewport: 'always'
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем/убираем CSS-класс, определяющий размеры контейнера карты,
 заданные в абсолютных единицах (300x200 px).
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding/removing a CSS class that defines the dimensions of the map container in absolute units (300x200 px).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Если выставлен флаг, сообщаем карте, что ей следует
 привести свои размеры к размерам контейнера.
</seg></tuv>
	<tuv xml:lang="en"><seg> If set, we tell the map that it should match its dimensions to the dimensions of the container.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Изменение размеры карты.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Resizing the map</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Развернуть/Cвернуть</seg></tuv>
	<tuv xml:lang="en"><seg>Expand/Collapse</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Изменить размеры карты</seg></tuv>
	<tuv xml:lang="en"><seg>Resize the map</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">&lt;input type="button" [#$tu4] id="toggler"/&gt;</ph>
    <ph id="2">&lt;input type="checkbox" [#$tu5] id="checkbox"/&gt;</ph>
    <bpt id="3">&lt;label for="checkbox"&gt;</bpt>Информировать карту<ept id="3">&lt;/label&gt;</ept><ph id="4">&lt;br&gt;</ph><ph id="5">&lt;br&gt;</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">&lt;input type="button" [#$tu4] id="toggler"/&gt;</ph>
    <ph id="2">&lt;input type="checkbox" [#$tu5] id="checkbox"/&gt;</ph>
    <bpt id="3">&lt;label for="checkbox"&gt;</bpt>Inform the map<ept id="3">&lt;/label&gt;</ept><ph id="4">&lt;br&gt;</ph><ph id="5">&lt;br&gt;</ph>
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Основным компонентом API является карта, которая может быть размещена
    в любом блочном HTML-элементе и всегда имеет прямоугольную форму.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The main component of the API is a map that can be placed
    in any block HTML element and always has a rectangular shape.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для <bpt id="1">[#$dp7]</bpt>создания карты<ept id="1">&lt;/a&gt;</ept>
    предназначен класс <ph id="2">[#$dp8]</ph>.
    В конструкторе необходимо указать центр, коэффициент масштабирования
    и HTML-элемент, в котором будет размещена карта.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    To <bpt id="1">[#$dp7]</bpt>create a map<ept id="1">&lt;/a&gt;</ept>,
    use the <ph id="2">[#$dp8]</ph> class.
    In the constructor, you must specify the center, the zoom factor,
    and the HTML element that will contain the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Размещение карты на странице.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Putting the map on a page.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Удалить карту</seg></tuv>
	<tuv xml:lang="en"><seg>Delete map</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
<ph id="1">&lt;input type="button" id="destroyButton" [#$tu3]/&gt;</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
<ph id="1">&lt;input type="button" id="destroyButton" [#$tu3]/&gt;</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Дождёмся загрузки API и готовности DOM.
</seg></tuv>
	<tuv xml:lang="en"><seg> Waiting for the API to load and DOM to be ready.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создание экземпляра карты и его привязка к контейнеру с
 заданным id ("map").
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating an instance of the map and binding it to the container with the specified ID ("map").
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> При инициализации карты обязательно нужно указать
 её центр и коэффициент масштабирования.
</seg></tuv>
	<tuv xml:lang="en"><seg> When initializing the map, you must specify its center and the zoom factor.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Для уничтожения используется метод destroy.
</seg></tuv>
	<tuv xml:lang="en"><seg> To destroy it, the "destroy" method is used.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для того чтобы построить маршрут на общественном транспорте, необходимо передать в параметрах маршрутизации
    поле routingMode: 'masstransit'. По умолчанию при создании мультимаршрута данное поле принимает значение 'auto' (на автомобиле).
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In order to build a route on public transport, pass the
routingMode: 'masstransit' field in the routing parameters.
    By default, this field takes the 'auto' value when creating a multiroute.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Подробнее о параметрах и опциях мультимаршрутизатора описано в примере <bpt id="1">[#$dp8]</bpt>Построение автомобильного мультимаршрута<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    For more information about the multirouter parameters and options, see the example <bpt id="1">[#$dp8]</bpt>Building a driving multiroute<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Создаем мультимаршрут.
</seg></tuv>
	<tuv xml:lang="en"><seg>Creating a multiroute.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> routeMarkerIconContentLayout - чтобы показывать время для всех сегментов.
</seg></tuv>
	<tuv xml:lang="en"><seg> routeMarkerIconContentlayout - To show the time for all segments.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Маршрут на общественном транспорте</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Route on public transport</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    API Яндекс.Карт состоит из большого количества взаимосвязанных модулей.<ph id="1">&lt;br/&gt;</ph>
    По умолчанию при подключении API происходит загрузка стандартного набора модулей (package.full), который включает в себя все необходимое для работы API.
<ph id="2">&lt;br/&gt;</ph>
    Для сокращения объема загружаемого кода API можно подключать некоторые модули вместо стандартного набора.<ph id="3">&lt;br/&gt;</ph>
    Это можно сделать, указав необходимые модули в GET-параметре load. Модули перечисляются через запятую. <ph id="4">&lt;br/&gt;</ph>
    Если GET-параметр load не указан, то просходит загрузка package.full.<ph id="5">&lt;br/&gt;</ph>
    Подробнее о работе модулей смотрите в разделе <bpt id="6">[#$dp8]</bpt>Модули<ept id="6">&lt;/a&gt;</ept>.<ph id="7">&lt;br/&gt;</ph>
<ph id="8">&lt;br/&gt;</ph>
    В данном примере загружаются только модули карты, метки и балуна геообъекта.<ph id="9">&lt;br/&gt;</ph>
<ph id="10">&lt;br/&gt;</ph>
    Балун геообъекта подключается при помощи аддона <bpt id="11">[#$dp9]</bpt>geoObject.addon.balloon<ept id="11">&lt;/sa&gt;</ept>.<ph id="12">&lt;br/&gt;</ph>
    Без подключенного аддона балуна у геообъектов не будет свойства <bpt id="13">[#$dp10]</bpt>balloon<ept id="13">&lt;/sa&gt;</ept>.<ph id="14">&lt;br/&gt;</ph>
    Все аддоны по умолчанию включены в package.full.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The Yandex.Maps API consists of a large number of interconnected modules.<ph id="1">&lt;br/&gt;</ph>
 By default, when you enable the API, a standard set of modules is loaded (package.full), which includes everything that is necessary for the API.<ph id="2">&lt;br/&gt;</ph>
 To reduce the amount of API code that is loaded, you can connect certain modules instead of the standard set.<ph id="3">&lt;br/&gt;</ph>
 This can be done by specifying the necessary modules in the "load" GET parameter. The modules are separated by commas.<ph id="4">&lt;br/&gt;</ph>
 If the "load" GET parameter is not specified, package.full is loaded.<ph id="5">&lt;br/&gt;</ph>
 For more information about modules, see <bpt id="6">[#$dp8]</bpt>Modules<ept id="6">&lt;/a&gt;</ept>.<ph id="7">&lt;br/&gt;</ph>
<ph id="8">&lt;br/&gt;</ph>
 In this example, to load only the modules, cards, placemarks, and a balloon geoobject.<ph id="9">&lt;br/&gt;</ph>
<ph id="10">&lt;br/&gt;</ph> 
balloon geoobject connected using addon <bpt id="11">[#$dp9]</bpt>geoObject.addon.the balloon<ept id="11">&lt;/sa&gt;</ept>.<ph id="12">&lt;br/&gt;</ph> 
Without connected addon for a balloon at the geoobjects will not be properties of the <bpt id="13">[#$dp10]</bpt>balloon<ept id="13">&lt;/sa&gt;</ept>.<ph id="14">&lt;br/&gt;</ph> All Addons are enabled by default in the package.full.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> В функцию поступает пространство имен, которое содержит все запрощенные при инициализации модули. 
</seg></tuv>
	<tuv xml:lang="en"><seg> The function receives the namespace that contains everything you've requested during initialization of modules. 
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> В данном примере карта создается без контролов, так как те не были загружены при инициализации API.
</seg></tuv>
	<tuv xml:lang="en"><seg> In this example, the map is created without controls, because they were not loaded during API initialization.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> При помощи GET параметра load можно перечислить только необходимые модули API Яндекс.Карт. </seg></tuv>
	<tuv xml:lang="en"><seg> Use the "load" GET parameter to list the necessary Yandex.Maps API modules. </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В этом примере слушаются некоторые события геообъекта, и при их наступлении обновляется содержимое текстового поля.
    Полный список событий можно изучить в документации к классу <bpt id="1">[#$dp7]</bpt>GeoObject<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In this example, certain geo object events are listened to, and when they occur, the contents of the text field are updated.
    For a full list of events, see the documentation for the <bpt id="1">[#$dp7]</bpt>GeoObject<ept id="1">&lt;/a&gt;</ept> class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. События геообъекта</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Geo object events</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Правила отображения маршрутов задаются в опциях маршрутизатора.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Rules for displaying routes are set in the router options.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для задания опций составных частей мультимаршрута доступны следующие префиксы:

    </seg></tuv>
	<tuv xml:lang="en"><seg>
    The following prefixes are available for setting options for sections of a multiroute:

    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>wayPoint - опции отображений путевых точек;</seg></tuv>
	<tuv xml:lang="en"><seg>wayPoint - display options for waypoints.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>wayPointStart - опции отображения начальной путевой точки;</seg></tuv>
	<tuv xml:lang="en"><seg>wayPointStart - display options for the starting waypoint.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>wayPointFinish - опции отображения конечной путевой точки;</seg></tuv>
	<tuv xml:lang="en"><seg>wayPointFinish - display options for the destination waypoint.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>viaPoint - опции отображений транзитных точек;</seg></tuv>
	<tuv xml:lang="en"><seg>viaPoint - display options for thru points.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>pin - опции отображений точечных маркеров в путевых точках;</seg></tuv>
	<tuv xml:lang="en"><seg>pin - display options for point markers at waypoints.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>route - опции отображений маршрутов;</seg></tuv>
	<tuv xml:lang="en"><seg>route - display options for routes.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>routeActive - опции отображения активного маршрута;</seg></tuv>
	<tuv xml:lang="en"><seg>routeActive - display options for the active route.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>editor - опции редактора мультимаршрута (см. <ph id="1">[#$dp23]</ph>).</seg></tuv>
	<tuv xml:lang="en"><seg>editor - options for the multiroute editor (see <ph id="1">[#$dp23]</ph>).</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
В данном примере на карту добавляется два маршрута с разными опциями отображения. Как можно задать
два разных отображения для маршрутов, имеющих общую модель, см. в <bpt id="1">[#$dp27]</bpt>справочнике<ept id="1">&lt;/sa&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
In this example, two routes with different display options are added to the map. To find out how to set two different views for routes that share the same model, see the <bpt id="1">[#$dp27]</bpt>Reference<ept id="1">&lt;/sa&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Настройка отображения мультимаршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Configuring the view of a multiroute</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Объявляем набор опорных точек, и массив индексов транзитных точек.
</seg></tuv>
	<tuv xml:lang="en"><seg> Declaring a set of reference points and an array of throughpoint indexes.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем мультимаршрут и настраиваем его внешний вид с помощью опций.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a multiroute and using options to configure its appearance.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Внешний вид путевых точек.
</seg></tuv>
	<tuv xml:lang="en"><seg> Display options for waypoints.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Задаем собственную картинку для последней путевой точки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting a custom image for the last waypoint.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Позволяет скрыть иконки путевых точек маршрута.
 wayPointVisible:false,
</seg></tuv>
	<tuv xml:lang="en"><seg> This allows hiding the icon for the route's waypoints.
 wayPointVisible:false,
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Внешний вид транзитных точек.
</seg></tuv>
	<tuv xml:lang="en"><seg> Display options for throughpoints.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Транзитные точки можно перетаскивать, при этом
 маршрут будет перестраиваться.
</seg></tuv>
	<tuv xml:lang="en"><seg> Throughpoints can be dragged, and the route will adjust.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Позволяет скрыть иконки транзитных точек маршрута.
 viaPointVisible:false,
</seg></tuv>
	<tuv xml:lang="en"><seg> This allows hiding the icon for the route's throughpoints.
 viaPointVisible:false,
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Внешний вид точечных маркеров под путевыми точками.
</seg></tuv>
	<tuv xml:lang="en"><seg> Display options for pin markers under waypoints.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Позволяет скрыть точечные маркеры путевых точек.
 pinVisible:false,
</seg></tuv>
	<tuv xml:lang="en"><seg> This allows hiding pin markers for waypoints.
 pinVisible:false,
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Внешний вид линии маршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg> Display options for the route line.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Автоматически устанавливать границы карты так, чтобы маршрут был виден целиком.
</seg></tuv>
	<tuv xml:lang="en"><seg> Automatically set the map boundaries so the entire route is visible.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Настраиваем внешний вид второй точки через прямой доступ к ней.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the display options for the second point by directly accessing it.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем кнопку.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a button.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Объявляем обработчики для кнопки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Declaring handlers for the button.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Т.к. вторая точка была удалена, нужно заново ее настроить.
</seg></tuv>
	<tuv xml:lang="en"><seg> Since the second point was deleted, we have to set it up again.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Функция настройки внешнего вида второй точки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Function for configuring the appearance of the second point.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Ждем пока будут загружены данные мультимаршрута и созданы отображения путевых точек.
</seg></tuv>
	<tuv xml:lang="en"><seg>Waiting for the multiroute data to load and the views of the waypoints to be created.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем балун у метки второй точки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a balloon for the second waypoint's marker.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <bpt id="1">[#$dp5]</bpt>Основными параметрами карты<ept id="1">&lt;/a&gt;</ept>
    являются область показа, область картографирования и тип карты.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <bpt id="1">[#$dp5]</bpt>The main parameters of the map<ept id="1">&lt;/a&gt;</ept>
    are the viewport, mapping area, and map type.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    При создании карты необходимо указать её центр и коэффициент масштабирования. В дальнейшем
    их можно изменить.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    When creating a map, you must specify its center and zoom level.
    You can change them in the future.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    API предоставляет пять встроенных типов карт:
    </seg></tuv>
	<tuv xml:lang="en"><seg>
    The API provides five built-in types of maps:
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Схема (yandex#map) — по умолчанию;</seg></tuv>
	<tuv xml:lang="en"><seg>Scheme (yandex#map) - by default;</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Спутник (yandex#satellite);</seg></tuv>
	<tuv xml:lang="en"><seg>Satellite (yandex#satellite);</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Гибрид (yandex#hybrid);</seg></tuv>
	<tuv xml:lang="en"><seg>Hybrid (yandex#hybrid);</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Народная карта (yandex#publicMap);</seg></tuv>
	<tuv xml:lang="en"><seg>Public map (yandex#publicMap);</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Гибрид народной карты (yandex#publicMapHybrid).</seg></tuv>
	<tuv xml:lang="en"><seg>Public map hybrid (yandex#publicMapHybrid).</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Тип карты реализуется в виде одного или нескольких наложенных друг на друга слоев.
    Существует возможность определения новых типов карт с помощью создания собственных
    слоев и/или комбинирования встроенных.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The map type is implemented as one or several layers superimposed on each other.
    It is possible to define new types of maps by creating your own layers
    and/or combining the pre-existing ones.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Задание и изменение параметров карты.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Setting and changing the map settings.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Изменить центр</seg></tuv>
	<tuv xml:lang="en"><seg>Change center</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Изменить границы</seg></tuv>
	<tuv xml:lang="en"><seg>Change boundaries</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Изменить тип и плавно переместиться</seg></tuv>
	<tuv xml:lang="en"><seg>Change the type and switch smoothly</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
        <ph id="1">&lt;input type="button" [#$tu4] onclick="setCenter();" /&gt;</ph>
        <ph id="2">&lt;input type="button" [#$tu5] onclick="setBounds();" /&gt;</ph>
        <ph id="3">&lt;input type="button" [#$tu6] onclick="setTypeAndPan();" /&gt;</ph>
    </seg></tuv>
	<tuv xml:lang="en"><seg>
        <ph id="1">&lt;input type="button" [#$tu4] onclick="setCenter();" /&gt;</ph>
        <ph id="2">&lt;input type="button" [#$tu5] onclick="setBounds();" /&gt;</ph>
        <ph id="3">&lt;input type="button" [#$tu6] onclick="setTypeAndPan();" /&gt;</ph>
    </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Параметры карты можно задать в конструкторе.
</seg></tuv>
	<tuv xml:lang="en"><seg> Map parameters can be set in the constructor.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> ID DOM-элемента, в который будет добавлена карта.
</seg></tuv>
	<tuv xml:lang="en"><seg> The ID of the DOM element that the map will be added to.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Параметры карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Map parameters.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Географические координаты центра отображаемой карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Geographical coordinates of the center of the displayed map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Масштаб.
</seg></tuv>
	<tuv xml:lang="en"><seg> Scale.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Тип покрытия карты: "Спутник".
</seg></tuv>
	<tuv xml:lang="en"><seg> Type of map coverage: "Satellite".
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Поиск по организациям.
</seg></tuv>
	<tuv xml:lang="en"><seg> Searching for organizations.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Bounds - границы видимой области карты.
 Задаются в географических координатах самой юго-восточной и самой северо-западной точек видимой области.
</seg></tuv>
	<tuv xml:lang="en"><seg> Bounds - the boundaries of the map viewport. Set as the geographical coordinates of the South-Easternmost and North-Westernmost points of the viewport.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Меняем тип карты на "Народный гибрид".
</seg></tuv>
	<tuv xml:lang="en"><seg> Changing the map type to "Public Hybrid".
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Плавное перемещение центра карты в точку с новыми координатами.
</seg></tuv>
	<tuv xml:lang="en"><seg> Smoothly moving the center of the map to the point with the new coordinates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Задержка между перемещениями.
</seg></tuv>
	<tuv xml:lang="en"><seg> The delay between movements.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <bpt id="1">[#$dp6]</bpt>YMapsML<ept id="1">&lt;/a&gt;</ept> - язык описания географических данных. С помощью YMapsML
    можно настраивать внешний вид географических объектов, отображаемых на карте, а также задавать параметры самой карты.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <bpt id="1">[#$dp6]</bpt>YMapsML<ept id="1">&lt;/a&gt;</ept> is a language for describing geographical data. You can use
	YMapsML to configure the appearance of geographical objects displayed on the map, as well as to set parameters for the map itself.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для задания параметров карты используется YMapsML-элемент <bpt id="1">[#$dp9]</bpt>
    repr:View<ept id="1">&lt;/a&gt;</ept>. С его помощью можно задать тип и область показа карты. В данном примере карте задается тип "спутник".
</seg></tuv>
	<tuv xml:lang="en"><seg>
    To set the map parameters, use the <bpt id="1">[#$dp9]</bpt>repr:View<ept id="1">&lt;/a&gt;</ept> YMapsML 
	element.
    You can use it to set the type and area for the map viewport. In this example, the map is set to the "satellite" type.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для загрузки YMapsML-данных предназначена функция <ph id="1">[#$dp12]</ph>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The <ph id="1">[#$dp12]</ph> function is for loading YMapsML data.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры YMapsML. Изменение типа карты.</seg></tuv>
	<tuv xml:lang="en"><seg>YMapsML example. Changing the map type.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создание карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Изменение типа карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Changing the map type.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем собственный макет с информацией о выбранном геообъекте.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a custom layout with information about the selected geo object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Выводим в цикле список всех геообъектов.
</seg></tuv>
	<tuv xml:lang="en"><seg> Outputting a list of all geo objects in the cycle.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Определяем по какой метке произошло событие.
</seg></tuv>
	<tuv xml:lang="en"><seg> Determining what placemark the event occurred on.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Устанавливаем режим открытия балуна. 
 В данном примере балун никогда не будет открываться в режиме панели.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the mode for opening the balloon. In this example, the balloon will never open in the panel mode.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> По умолчанию опции балуна balloonMaxWidth и balloonMaxHeight не установлены для кластеризатора,
 так как все стандартные макеты имеют определенные размеры.
</seg></tuv>
	<tuv xml:lang="en"><seg> By default, the balloon options balloonMaxWidth and balloonMaxHeight are not set for the clusterer, since all standard layouts have defined dimensions.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Устанавливаем собственный макет контента балуна.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting a custom layout for balloon content.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Заполняем кластер геообъектами со случайными позициями.
</seg></tuv>
	<tuv xml:lang="en"><seg> Populating the cluster with geo objects with random positions.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Устаналиваем данные, которые будут отображаться в балуне.
</seg></tuv>
	<tuv xml:lang="en"><seg> Defining the data that will be displayed in the balloon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере создается собственный макет контента балуна кластера.<ph id="1">&lt;br/&gt;</ph>
    Макет задается опцией 'clusterBalloonContentLayout'.
<ph id="2">&lt;br/&gt;</ph>
    <bpt id="3">[#$dp9]</bpt>Макеты<ept id="3">&lt;/a&gt;</ept>
    объектов можно создавать с помощью фабрики <ph id="4">[#$dp10]</ph>,
    используя текcтовые шаблоны. <ph id="5">&lt;br/&gt;</ph>
    Текстовые шаблоны формируют html-содержимое макета на основе хэша с данными,
    передаваемого в конструктор макета.<ph id="6">&lt;br/&gt;</ph>
    В данном примере поставщиком данных является кластер, у которого был открыт балун.<ph id="7">&lt;br/&gt;</ph>
<ph id="8">&lt;br/&gt;</ph>
    В макете происходит перечисление и вывод полей 'placemarkId' и 'balloonContentHeader' всех геообъектов кластера при помощи конструкции 'for'.</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example creates a custom layout for the cluster balloon content.<ph id="1">&lt;br/&gt;</ph>
	The layout is defined by the 'clusterBalloonContentLayout' option.
<ph id="2">&lt;br/&gt;</ph>
	<bpt id="3">[#$dp9]</bpt>Layouts<ept id="3">&lt;/a&gt;</ept>
	of objects can be created using the <ph id="4">[#$dp10]</ph> factory,
	using text templates. <ph id="5">&lt;br/&gt;</ph>
	Text templates form the layout's HTML content based on a hash with the data
	passed to the layout constructor.<ph id="6">&lt;br/&gt;</ph>
	In this example, the data provider is the cluster that the balloon was opened on.<ph id="7">&lt;br/&gt;</ph>
<ph id="8">&lt;br/&gt;</ph>
	The layout lists and outputs the 'placemarkId' and 'balloonContentHeader' fields of all the cluster's geo objects using the 'for' construction.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Собственный макет контента балуна кластера.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Custom layout for cluster balloon content.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    API Яндекс.Карт состоит из большого количества взаимосвязанных модулей.<ph id="1">&lt;br/&gt;</ph>
    По умолчанию при подключении API происходит загрузка стандартного набора модулей (package.full), который включает в себя все необходимое для работы API.<ph id="2">&lt;br/&gt;</ph>
    Разработчик, который использует API Яндекс.Карт, имеет возможность создавать свои модули.<ph id="3">&lt;br/&gt;</ph>
<ph id="4">&lt;br/&gt;</ph>
    В данном примере создается собственный элемент управления со своим макетом.<ph id="5">&lt;br/&gt;</ph>
    И элемент управления, и макет оформлены в виде отдельных модулей.<ph id="6">&lt;br/&gt;</ph>
    Определение собственного модуля доступно при помощи метода <bpt id="7">[#$dp6]</bpt>define<ept id="7">&lt;/sa&gt;</ept><ph id="8">&lt;br/&gt;</ph>
    После создания карты происходит запрос на получение своего модуля при помощи метода <bpt id="9">[#$dp7]</bpt>require<ept id="9">&lt;/sa&gt;</ept><ph id="10">&lt;br/&gt;</ph>
<ph id="11">&lt;br/&gt;</ph>    
    Подробнее о работе модулей смотрите в разделе <bpt id="12">[#$dp8]</bpt>Модули<ept id="12">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The Yandex.Maps Api consists of a large number of interdependent modules.<ph id="1">&lt;br/&gt;</ph>
	By default, enabling the API loads a standard set of modules (package.full), which includes everything necessary for working with the API.<ph id="2">&lt;br/&gt;</ph>
	A developer who is using the Yandex.Maps API can create custom modules.<ph id="3">&lt;br/&gt;</ph>
<ph id="4">&lt;br/&gt;</ph>
	This example creates a custom control for a custom layout.<ph id="5">&lt;br/&gt;</ph>
	Both the control and the layout are created as separate modules.<ph id="6">&lt;br/&gt;</ph>
	To define a custom module, use the <bpt id="7">[#$dp6]</bpt>define<ept id="7">&lt;/sa&gt;</ept> method.<ph id="8">&lt;br/&gt;</ph>
	After the map is created, use the  <bpt id="9">[#$dp7]</bpt>require<ept id="9">&lt;/sa&gt;</ept> method to request to get the custom module.<ph id="10">&lt;br/&gt;</ph>
<ph id="11">&lt;br/&gt;</ph>    
	For more information about how modules work, see the section <bpt id="12">[#$dp8]</bpt>Modules<ept id="12">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем первый собственный модуль - макет своего контрола.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating our first custom module - a custom control layout.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Список зависимостей модуля. 
 Эти модули будут загружены (если раньше не были) перед вызовом функции, которая определяет модуль.
</seg></tuv>
	<tuv xml:lang="en"><seg> The list of module dependencies. These modules will be loaded (if they have not yet been loaded) before calling the function that defines the module.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Функция, которая определяет сам модуль.
 Первым аргументом идет provide-функция. В provide-функцию нужно будет передать непосредственно модуль.
 Вызов provide-функции может быть отложен во времени. К примеру, для загрузки каких-либо данных.
 Последующие аргументы - это запрошенные в зависимостях модули. 
</seg></tuv>
	<tuv xml:lang="en"><seg> The function that defines the module itself.
 The first argument is the provide function. The provide function must be passed directly to the module.
 The provide function call may be delayed. For example, in order to load some data.
 Subsequent arguments are requested in the module dependencies. 
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем второй собственный модуль.
 Этот модуль предоставляет собственный элемент управления, который создается на основе кнопки.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a second custom module. This module provides its own control, which is based on the buttons.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Второй модуль в зависимостях запрашивает первый.
</seg></tuv>
	<tuv xml:lang="en"><seg> The second module in the dependencies requests the first one.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Наследуем все методы стандартной кнопки. 
</seg></tuv>
	<tuv xml:lang="en"><seg> Inheriting all the methods of a standard button. 
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Переопределяем метод setParent.
</seg></tuv>
	<tuv xml:lang="en"><seg> Overriding the setParent method.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Инициализация карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Map initialization.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Запрашиваем в модульной системе собственный контрол.
</seg></tuv>
	<tuv xml:lang="en"><seg> Requesting our custom control in the module system.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем экземпляр собственной кнопки и добавляем её на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating an instance of your custom button and adding it to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем кнопку, при помощи которой добавляем метки на карту.    
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a button that we use for adding placemarks to the map.    
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавление метки по клику в случайное место.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding a placemark by clicking randomly.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Пример загрузки только необходимых модулей</seg></tuv>
	<tuv xml:lang="en"><seg>An example of loading only necessary modules</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для ломаных доступен <bpt id="1">[#$dp8]</bpt>визуальный редактор<ept id="1">&lt;/a&gt;</ept>. Ссылка на редактор содержится в поле <bpt id="2">[#$dp9]</bpt>editor<ept id="2">&lt;/a&gt;</ept> объекта-ломаной.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    A <bpt id="1">[#$dp8]</bpt>visual editor<ept id="1">&lt;/a&gt;</ept> is available for polylines. A link to the editor is in the <bpt id="2">[#$dp9]</bpt>editor<ept id="2">&lt;/a&gt;</ept> field of the polyline object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем ломаную.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a polyline.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Указываем координаты вершин.
</seg></tuv>
	<tuv xml:lang="en"><seg> Specifying the coordinates of the vertices.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Задаем опции геообъекта.
 Цвет с прозрачностью.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting geo object options. Color with transparency.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Ширину линии.
</seg></tuv>
	<tuv xml:lang="en"><seg> The line width.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Максимально допустимое количество вершин в ломаной.
</seg></tuv>
	<tuv xml:lang="en"><seg> The maximum number of vertices in the polyline.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем в контекстное меню новый пункт, позволяющий удалить ломаную.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding a new item to the context menu that allows deleting the polyline.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем линию на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding a line to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Включаем режим редактирования.
</seg></tuv>
	<tuv xml:lang="en"><seg> Turning on the edit mode.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Редактор ломаной</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Polyline editor</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>,
    <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>,
    <bpt id="3">[#$dp4]</bpt>control.GeolocationControl<ept id="3">&lt;/a&gt;</ept>

</seg></tuv>
	<tuv xml:lang="en"><seg>
    <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>,
    <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>,
    <bpt id="3">[#$dp4]</bpt>control.GeolocationControl<ept id="3">&lt;/a&gt;</ept>

</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В версии API 2.0 для определения местоположения по IP или с помощью <bpt id="1">[#$dp6]</bpt>Geolocation API<ept id="1">&lt;/a&gt;</ept> разработчикам приходилось самостоятельно
    использовать необходимые методы и обрабатывать полученный результат (см. <bpt id="2">[#$dp7]</bpt>пример<ept id="2">&lt;/a&gt;</ept>).
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In API 2.0 versions, to determine the location by IP or by using the <bpt id="1">[#$dp6]</bpt>Geolocation API<ept id="1">&lt;/a&gt;</ept>, developers had to 
    independently use the necessary methods and process the result (see the <bpt id="2">[#$dp7]</bpt>example<ept id="2">&lt;/a&gt;</ept>).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В API 2.1 встроен специальный элемент управления "геолокация", который позволяет отобразить географическое положение пользователя на карте.
    Данный элемент управления реализуется классом <bpt id="1">[#$dp10]</bpt>control.GeolocationControl<ept id="1">&lt;/a&gt;</ept>, которому соответствует ключ 'geolocationControl'.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The API 2.1 has a special built-in "geolocation" control, which allows you to display the user's location on the map.
    This control is implemented by the <bpt id="1">[#$dp10]</bpt>control.GeolocationControl<ept id="1">&lt;/a&gt;</ept> class, which corresponds to the 'geolocationControl' key.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для добавления элемента управления на карту достаточно указать соответствующий ключ в <bpt id="1">[#$dp13]</bpt>параметрах<ept id="1">&lt;/a&gt;</ept> карты.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    To add a control to the map, you just need to specify the appropriate key in the map <bpt id="1">[#$dp13]</bpt>parameters<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Добавление кнопки "Геолокация"</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Adding the "Geolocation" button</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Хинт может быть расположен вне контейнера карты и отображаться поверх других элементов на странице (поведение по умолчанию) или же всегда находиться внутри карты. За это отвечает опция `pane`.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    A hint can be located outside the map container and displayed on top of other elements on the page (this is the default value). Alternatively, it can always stay inside the map. This is controlled by the 'pane' option.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    С помощью другой опции — `fitPane` (`true` по умолчанию) — можно заставить хинт сдвигаться таким образом, чтобы всегда полностью отображаться в видимой части своего контейнера, не пересекая его границы и не вызывая появление полос прокрутки.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Using a different option, 'fitPane' ('true' by default), you can forcer the hint to move so that it is always displayed completely within the visible area of its container, without touching its boundaries and not causing the scrollbar to appear.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Опции разамещения хинта.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Hint placement options.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>, <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>,
    <bpt id="3">[#$dp4]</bpt>control.Manager<ept id="3">&lt;/a&gt;</ept>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <bpt id="1">[#$dp2]</bpt>ready<ept id="1">&lt;/a&gt;</ept>, <bpt id="2">[#$dp3]</bpt>Map<ept id="2">&lt;/a&gt;</ept>,
    <bpt id="3">[#$dp4]</bpt>control.Manager<ept id="3">&lt;/a&gt;</ept>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В API 2.1 элементы управления добавляются на карту автоматически при ее создании. По умолчанию на карту добавляется
    стандартный набор элементов управления 'mediumMapDefaultSet' (см. <bpt id="1">[#$dp6]</bpt>пример<ept id="1">&lt;/a&gt;</ept>).
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In the API 2.1, controls are added to the map automatically when it is created.
    By default, the 'mediumMapDefaultSet' standard set of controls is added to the map (see the <bpt id="1">[#$dp6]</bpt>example<ept id="1">&lt;/a&gt;</ept>).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для того чтобы добавить на карту нужные элементы управления, в параметре <bpt id="1">[#$dp9]</bpt>controls<ept id="1">&lt;/a&gt;</ept> при ее создании можно указать список соответствующих ключей.
    Также элементы управления можно добавить через поле карты <bpt id="2">[#$dp10]</bpt>Map.controls<ept id="2">&lt;/a&gt;</ept> с помощью метода add.
 </seg></tuv>
	<tuv xml:lang="en"><seg>
    To add the desired controls to the map, a list of corresponding keys can be specified in the <bpt id="1">[#$dp9]</bpt>controls<ept id="1">&lt;/a&gt;</ept> parameter when it is created.
    The controls can also be added through the <bpt id="2">[#$dp10]</bpt>Map.controls<ept id="2">&lt;/a&gt;</ept> map field, using the "add" method.
 </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Можно указывать как отдельные элементы управления, так и их набор. Если карту нужно отобразить без элементов управления, то в поле controls передать пустой массив [].
</seg></tuv>
	<tuv xml:lang="en"><seg>
    You can specify individual controls, or a set of them. If you want to display the map without controls, pass an empty array [] in the "controls" field.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Со списком доступных элементов управления можно ознакомиться
    <bpt id="1">[#$dp15]</bpt>тут<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    A list of the available controls can be found <bpt id="1">[#$dp15]</bpt>here<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Добавление отдельных элементов управления</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Adding individual controls</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
   На карте можно отобразить
    <bpt id="1">[#$dp8]</bpt>балун и хинт<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
   On the map you can display
   the <bpt id="1">[#$dp8]</bpt>balloon and hint<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Ссылки на менеджеры балуна и хинта содержатся в полях <bpt id="1">[#$dp11]</bpt>balloon<ept id="1">&lt;/sa&gt;</ept>
    и <bpt id="2">[#$dp12]</bpt>hint<ept id="2">&lt;/sa&gt;</ept> объекта карты.
    Менеджеры реализованы в виде классов <ph id="3">[#$dp13]</ph> и <ph id="4">[#$dp14]</ph>,
    но <bpt id="5">&lt;strong&gt;</bpt>создавать экземпляры этих классов самостоятельно не следует<ept id="5">&lt;/strong&gt;</ept> —
    используйте соответствующие поля объекта карты.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    References to the balloon and hint managers are contained in the  <bpt id="1">[#$dp11]</bpt>balloon<ept id="1">&lt;/sa&gt;</ept>
    and <bpt id="2">[#$dp12]</bpt>hint<ept id="2">&lt;/sa&gt;</ept> fields of the
map object. 
    Managers are implemented as  <ph id="3">[#$dp13]</ph> and <ph id="4">[#$dp14]</ph>,
    but you <bpt id="5">&lt;strong&gt;</bpt>should not
create instances of these classes<ept id="5">&lt;/strong&gt;</ept> —
    use the corresponding fields of the map object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Доступ к балуну и хинту имеют <bpt id="1">[#$dp17]</bpt>геообъекты<ept id="1">&lt;/a&gt;</ept>,
    <bpt id="2">[#$dp18]</bpt>активные области<ept id="2">&lt;/a&gt;</ept> и другие сущности на карте.
    C помощью <bpt id="3">[#$dp19]</bpt>соответствующих свойств и опций<ept id="3">&lt;/sa&gt;</ept>
    (префиксы <bpt id="4">&lt;code&gt;</bpt>balloon<ept id="4">&lt;/code&gt;</ept> и <bpt id="5">&lt;code&gt;</bpt>hint<ept id="5">&lt;/code&gt;</ept>) можно описать балун и хинт геообъекта/активной области.
    При этом координаты балуна и хинта будут вычисляться автоматически.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The <bpt id="1">[#$dp17]</bpt>geo objects<ept id="1">&lt;/a&gt;</ept>,
    <bpt id="2">[#$dp18]</bpt>hotspots<ept id="2">&lt;/a&gt;</ept> , and other entities on the map have access to the balloon and hint.
    Use the 
<bpt id="3">[#$dp19]</bpt>corresponding properties and options<ept id="3">&lt;/sa&gt;</ept>
    (the <bpt id="4">&lt;code&gt;</bpt>balloon<ept id="4">&lt;/code&gt;</ept> and <bpt id="5">&lt;code&gt;</bpt>hint<ept id="5">&lt;/code&gt;</ept>)  prefixes) to describe the balloon and hint of a geo object/hotspot. 
    The coordinates of the balloon and the hint will be calculated automatically.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Чтобы балун и хинт открывались на метке, необходимо задать ей определенные свойства.
</seg></tuv>
	<tuv xml:lang="en"><seg> In order for the balloon and hint to open on the placemark, you need to set certain properties.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Открываем балун на карте (без привязки к геообъекту).
</seg></tuv>
	<tuv xml:lang="en"><seg> Opening the balloon on the map (without binding to the geo object).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Опция: не показываем кнопку закрытия.
</seg></tuv>
	<tuv xml:lang="en"><seg> Option: do not show the close button.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Показываем хинт на карте (без привязки к геообъекту).
</seg></tuv>
	<tuv xml:lang="en"><seg> Showing the hint on the map (without binding to the geo object).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Опция: задержка перед открытием.
</seg></tuv>
	<tuv xml:lang="en"><seg> Option: delay before opening.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Балун и хинт</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Balloon and hint</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Шаблоны позволяют сформировать произвольное HTML-представление геообъектов, балунов и хинтов.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Templates allow you to make custom HTML representations of geo objects, balloons, and hints.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для определения шаблона используется элемент <bpt id="1">[#$dp9]</bpt>repr:Representation<ept id="1">&lt;/a&gt;</ept>, внутри
    которого в контейнере <bpt id="2">[#$dp10]</bpt>repr:text<ept id="2">&lt;/a&gt;</ept> размещается HTML-код (тело шаблона).
</seg></tuv>
	<tuv xml:lang="en"><seg>
    To define a template, use the
<bpt id="1">[#$dp9]</bpt>repr:Representation<ept id="1">&lt;/a&gt;</ept> element, which
	  contains the HTML code (the template body) in the <bpt id="2">[#$dp10]</bpt>repr:text<ept id="2">&lt;/a&gt;</ept> container.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Подробнее о шаблонах см. в <bpt id="1">[#$dp13]</bpt>документации<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    For more information about templates, see the <bpt id="1">[#$dp13]</bpt>documentation<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры YMapsML. Изменение шаблона содержимого балуна.</seg></tuv>
	<tuv xml:lang="en"><seg>YMapsML examples. Changing the balloon content template.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Событие карты представляет собой объект класса <ph id="1">[#$dp8]</ph>.
    <bpt id="2">[#$dp9]</bpt>Извлечение данных
    из этого объекта<ept id="2">&lt;/a&gt;</ept> производится с помощью метода <bpt id="3">[#$dp10]</bpt>get<ept id="3">&lt;/sa&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The map event is an object of the <ph id="1">[#$dp8]</ph> class. 
    <bpt id="2">[#$dp9]</bpt>Extracting data from this object<ept id="2">&lt;/a&gt;</ept> is done using the <bpt id="3">[#$dp10]</bpt>get<ept id="3">&lt;/sa&gt;</ept> method.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере из объекта-события извлекаются координаты точки щелчка левой кнопки мыши.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In this example, the coordinates of the point clicked with the left mouse button are extracted from the event object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Обработка события, возникающего при щелчке
 левой кнопкой мыши в любой точке карты.
 При возникновении такого события откроем балун.
</seg></tuv>
	<tuv xml:lang="en"><seg> Processing events that occur when the user left-clicks anywhere on the map. When such an event occurs, we open the balloon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Обработка события, возникающего при щелчке
 правой кнопки мыши в любой точке карты.
 При возникновении такого события покажем всплывающую подсказку
 в точке щелчка.
</seg></tuv>
	<tuv xml:lang="en"><seg> Processing events that occur when the user right-clicks anywhere on the map. When such an event occurs, we display a popup hint at the point of click.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Скрываем хинт при открытии балуна.
</seg></tuv>
	<tuv xml:lang="en"><seg> Hiding the hint when opening the balloon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Координаты щелчка</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Click coordinates</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>

</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>

</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере показано, как задать собственное отображение результатов поиска.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example shows how to set a custom view for search results.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Выбранные результаты добавляются в коллекцию  <ph id="1">[#$dp11]</ph>, на которой слушается событие "click". При клике
    по найденному объекту его метка становится красной.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The selected results are added to the <ph id="1">[#$dp11]</ph> collection, which listens for the "click" event.
    When the found object is clicked, its placemark turns red.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Также для объектов коллекции задан собственный макет всплывающей подсказки.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In the same way, the collection's objects have a custom layout set for the popup hint.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Результаты поиска будем помещать в коллекцию.
</seg></tuv>
	<tuv xml:lang="en"><seg> The search results will be placed in the collection.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> При клике по найденному объекту метка становится красной.
</seg></tuv>
	<tuv xml:lang="en"><seg> When the found object is clicked, the placemark turns red.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Выбранный результат помещаем в коллекцию.
</seg></tuv>
	<tuv xml:lang="en"><seg> Putting the selected result in the collection.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Задание собственного отображения для результатов поиска</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Setting a custom display for search results</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    С помощью объекта <ph id="1">[#$dp9]</ph> можно создавать объекты на карте из их JSON-описания.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Using the <ph id="1">[#$dp9]</ph> object, you can create objects on the map from their JSON description.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере рассматривается, как найти объекты выборки, ближайшие к произвольному объекту на карте (например к метро).
    А также как находить объекты, ближайшие к месту клика.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example explains how to find objects in the selection that are nearest to an arbitrary object on the map (such as the metro).
    It also shows how to find the objects that are closest to the click.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Найдем в выборке кафе, ближайшее к найденной станции метро,
 и откроем его балун.
</seg></tuv>
	<tuv xml:lang="en"><seg> Searching the selection for the cafe nearest to the found metro station, and opening its balloon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Будем открывать балун кафе, который ближе всего к месту клика
</seg></tuv>
	<tuv xml:lang="en"><seg> Opening the balloon of the cafe that is closest to the click.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Описания кафе можно хранить в формате JSON, а потом генерировать
 из описания геообъекты с помощью ymaps.geoQuery.
</seg></tuv>
	<tuv xml:lang="en"><seg> Cafe descriptions can be stored in JSON format, in order to then generate geo objects from the descriptions using ymaps.geoQuery.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Сразу добавим точки на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding points to the map immediately.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> С помощью обратного геокодирования найдем метро "Кропоткинская".
</seg></tuv>
	<tuv xml:lang="en"><seg> Using reverse geocoding to find the metro station "Kropotkinskaya".
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Нужно дождаться ответа от сервера и только потом обрабатывать полученные результаты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Waiting for the response from the server and then processing the received results.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Поиск ближайшего объекта.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Searching for the nearest object.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>При клике на карту будет открываться балун ближайшей к месту клика метки</seg></tuv>
	<tuv xml:lang="en"><seg>When the map is clicked, the balloon opens for the placemark nearest to the click</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Ссылка на редактор маршрута находится в поле <bpt id="1">[#$dp6]</bpt>editor<ept id="1">&lt;/sa&gt;</ept> экземпляра класса <ph id="2">[#$dp7]</ph>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The reference to the route editor is in the <bpt id="1">[#$dp6]</bpt>editor<ept id="1">&lt;/sa&gt;</ept> field of the <ph id="2">[#$dp7]</ph> class instance.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для включения/выключения режима редактирования мультимаршрута используются функции start() и stop() соответственно.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    To turn the multiroute edit mode on/off, use the functions start() and stop (), respectively.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    При включении режима редактирования функции start() могут быть переданы параметры редактирования. Список допустимых параметров
    приведен в комментариях в коде.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    When you turn on the edit mode, the start() function may be passed the editing parameters.
    For a list of valid parameters, see the comments in the code.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Обратите внимание, что параметры midPointsType (тип промежуточных точек, которые могут быть добавлены при редактировании)
    и drawOver (запрет на добавление точек поверх объектов карты) передаются в параметрах маршрутизатора с префиксом editor.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Note that the parameters midPointsType (a type of intermediate points that can be added when editing)
    and drawOver (forbidding adding points on top of map objects) are passed in the router parameters with the "editor" prefix.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Тип промежуточных точек, которые могут быть добавлены при редактировании.
</seg></tuv>
	<tuv xml:lang="en"><seg> A type of intermediate points that can be added when editing.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> В режиме добавления новых путевых точек запрещаем ставить точки поверх объектов карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> In the mode for adding new waypoints, we do not allow putting points on top of the map objects.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Включение режима редактирования.
В качестве опций может быть передан объект с полями:
addWayPoints - разрешает добавление новых путевых точек при клике на карту. Значение по умолчанию: false.
dragWayPoints - разрешает перетаскивание уже существующих путевых точек. Значение по умолчанию: true.
removeWayPoints - разрешает удаление путевых точек при двойном клике по ним. Значение по умолчанию: false.
dragViaPoints - разрешает перетаскивание уже существующих транзитных точек. Значение по умолчанию: true.
removeViaPoints - разрешает удаление транзитных точек при двойном клике по ним. Значение по умолчанию: true.
addMidPoints - разрешает добавление промежуточных транзитных или путевых точек посредством перетаскивания маркера, появляющегося при наведении курсора мыши на активный маршрут. Тип добавляемых точек задается опцией midPointsType. Значение по умолчанию: true
</seg></tuv>
	<tuv xml:lang="en"><seg>Enabling edit mode.
As options, you can pass an object with fields:
addWayPoints - Allows adding new waypoints by clicking on the map. Default value: false.
dragWayPoints - Allows dragging existing waypoints. Default value: true.
removeWayPoints - Allows deleting waypoints by double-clicking them. Default value: false.
dragViaPoints - Allows dragging existing throughpoints. Default value: true.
removeViaPoints - Allows deleting throughpoints by double-clicking them. Default value: true.
addMidPoints - Allows adding intermediate points or waypoints by dragging the marker that appears when pointing the mouse at the active route. The type of points to add is set by the midPointsType option. Default value: true.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Выключение режима редактирования.
</seg></tuv>
	<tuv xml:lang="en"><seg> Turning off edit mode.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем карту с добавленной на нее кнопкой.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating the map with the button added to it.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем мультимаршрут на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding a multiroute to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Редактирование мультимаршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Editing a multiroute</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>, 
    <ph id="3">[#$dp4]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>, 
    <ph id="3">[#$dp4]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    На карту можно добавлять слой с информацией о пробках. При этом необязательно размещать на карте элемент управления "Пробки". Достаточно добавить на карту соответствующий провайдер данных о пробках. В данном примере используется провайдер пробок "Сейчас" <ph id="1">[#$dp6]</ph>. 
</seg></tuv>
	<tuv xml:lang="en"><seg>
    You can add a layer to the map with information about traffic. However, it is not necessary to put the "Traffic" control on the map. It is enough to add the appropriate traffic data provider to the map. This example uses the "Now" traffic provider <ph id="1">[#$dp6]</ph>. 
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создадим провайдер пробок "Сейчас" с включенным слоем инфоточек.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a "Now" traffic provider with the layer of information points enabled.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> И затем добавим его на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> And then adding it to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Удаление провайдера с карты также производится через метод setMap.
 actualProvider.setMap(null);
</seg></tuv>
	<tuv xml:lang="en"><seg> Removing the provider from the map is also performed through setMap.
 actualProvider.setMap(null);
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Слой пробок на карте без добавления кнопки</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Traffic layer on the map without buttons added</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Макеты объектов можно создавать с помощью фабрики <ph id="1">[#$dp5]</ph>,
    используя текcтовые шаблоны.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Object layouts can be created using the <ph id="1">[#$dp5]</ph> factory,
    and using text templates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере создается пользовательский макет балуна мультимаршрутизатора, в котором отображается
    информация о выбранном маршруте: для какого вида транспорта проложен маршрут, длина маршрута и время в пути.
    Макет балуна задается через опции мультимаршрутизатора.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example creates a custom multiroute balloon layout that displays information about the selected route:
    each type of transport shows the route, the length of the route, and the travel time.
	The balloon layout is set via the multirouter option.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Собственный макет балуна мультимаршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Custom layout for the multiroute balloon</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Создание собственного макета с помощью фабрики макетов.
</seg></tuv>
	<tuv xml:lang="en"><seg>Creating your own layout using the layout factory.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Создание мультимаршрута.
</seg></tuv>
	<tuv xml:lang="en"><seg>Creating a multiroute.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> avoidTrafficJams: true,
</seg></tuv>
	<tuv xml:lang="en"><seg> avoidTrafficJams: true,
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Макет геообъекта.
</seg></tuv>
	<tuv xml:lang="en"><seg>Geo object layout.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> </seg></tuv>
	<tuv xml:lang="en"><seg> </seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Отключаем режим панели для балуна.
</seg></tuv>
	<tuv xml:lang="en"><seg> Disabling the panel mode for the balloon.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Пользовательский макет кнопки.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Custom layout for a button.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <bpt id="1">[#$dp7]</bpt>Макеты<ept id="1">&lt;/a&gt;</ept>
    объектов можно создавать с помощью фабрики <ph id="2">[#$dp8]</ph>,
    используя текcтовые шаблоны.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <bpt id="1">[#$dp7]</bpt>Layouts<ept id="1">&lt;/a&gt;</ept> of objects can be created
    using the <ph id="2">[#$dp8]</ph> factory,
    using text templates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    В данном примере создается пользовательский макет <bpt id="1">[#$dp11]</bpt>кнопки<ept id="1">&lt;/sa&gt;</ept>.
    Макет элемента управления строится на основе его данных, состояния и опций.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    This example creates a custom layout for a <bpt id="1">[#$dp11]</bpt>button<ept id="1">&lt;/sa&gt;</ept>.
    The layout of the control is based on its data, status, and options.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Макет автоматически перестраивается при изменении значений полей,
    состояния или опций, которые используются в его текстовом шаблоне.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The layout is automatically adjusted when changes are made to the values
	of fields, states, or options that are used in its text template.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Макет кнопки должен отображать поле data.content
 и изменяться в зависимости от того, нажата кнопка или нет.
</seg></tuv>
	<tuv xml:lang="en"><seg> The button layout should display the data.content field and change depending on whether the button is pressed or not.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp7]</ph> - класс, позволяющий добавить на карту большое количество точечных объектов
    без необходимости создавать и добавлять на карту метки по отдельности.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp7]</ph> - class that allows you to add a large number of point objects
    without having to create separate placemarks and add them to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Объекты, добавленные в ObjectManager, располагаются в коллекции ObjectManager.objects. Кластеры, образованные из
    добавленных меток, добавляются в коллекцию ObjectManager.clusters.
    Визуальное отображение меток создается по требованию асинхронно. Визуальным отображением меток и кластеров
    являются объекты, реализующие интерфейс <ph id="1">[#$dp10]</ph>. В частности, <ph id="2">[#$dp11]</ph>.
    Оверлеи помещаются в коллекции ObjectManager.objects.overlays и ObjectManager.clusters.overlays соответственно.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Objects added in ObjectManager are located in the ObjectManager.objects collection. The clusters formed from added placemarks are added to the ObjectManager.clusters collection. The visual display of placemarks is created asynchronously on request. Placemarks and clusters are visually displayed as objects that implement the <ph id="1">[#$dp10]</ph> interface. In particular, <ph id="2">[#$dp11]</ph>. Overlays are placed in the ObjectManager.objects.overlays and ObjectManager.clusters.overlays collections, respectively.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp14]</ph> принимает описания меток в JSON формате. Метки могут кластеризоваться или показываться как есть.
    Если вы не используете кластеризацию, то метки будут показаны только в видимой области карты.
    Поскольку объекты хранятся в менеджере в виде JSON описаний и их визуальное отображение создается только по необходимости,
    этот способ добавления точек на карту работает быстрее, чем добавление меток на карту напрямую или через кластеризатор.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp14]</ph> accepts placemark descriptions in JSON format. Placemarks can be clustered or displayed as-is.
    If you are not using clustering, the placemarks will be shown only in the visible area of the map.
    Because objects are stored in the manager in the form of JSON descriptions and their visual representation is created only when needed,
    this method of adding points to the map works faster than adding placemarks to the map directly or through clusterization.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Чтобы метки начали кластеризоваться, выставляем опцию.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting an option to make placemarks start clusterizing.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> ObjectManager принимает те же опции, что и кластеризатор.
</seg></tuv>
	<tuv xml:lang="en"><seg> ObjectManager accepts the same options as the clusterer.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Чтобы задать опции одиночным объектам и кластерам,
 обратимся к дочерним коллекциям ObjectManager.
</seg></tuv>
	<tuv xml:lang="en"><seg> To set options for single objects and clusters, we refer to child collections of ObjectManager.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Добавление на карту большо числа объектов</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Adding a large number of objects to the map</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Пример иллюстрирует, как добавлять результаты геокодирования в выборку <ph id="1">[#$dp9]</ph>.
    С помощью метода <bpt id="2">[#$dp10]</bpt>applyBoundsToMap<ept id="2">&lt;/sa&gt;</ept> можно устанавливать
    область картографирования так, чтобы в нее попадали все объекты выборки.
    С помощью метода <bpt id="3">[#$dp11]</bpt>clusterize<ept id="3">&lt;/sa&gt;</ept> объекты можно добавлять в кластеризатор.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The example illustrates how to add geocoding results to the <ph id="1">[#$dp9]</ph> selection. 
    Using the <bpt id="2">[#$dp10]</bpt>applyBoundsToMap<ept id="2">&lt;/sa&gt;</ept> method, you can set the
    mapping area so that all the objects in the selection fall into it.
    Use the <bpt id="3">[#$dp11]</bpt>clusterize<ept id="3">&lt;/sa&gt;</ept> method to add objects to the clusterer.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Сделаем запрос на геокодирование, а затем спозиционируем карту, чтобы
 все объекты попадали в видимую область карты и коэффициент масштабирования был
 максимально возможным.
</seg></tuv>
	<tuv xml:lang="en"><seg> Making a geocoding request, then positioning the map so that
 all objects fall within the map viewport and the zoom level is as high as possible.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Откластеризуем полученные объекты и добавим кластеризатор на карту.
 Обратите внимание, что кластеризатор будет создан сразу, а объекты добавлены в него
 только после того, как будет получен ответ от сервера.
</seg></tuv>
	<tuv xml:lang="en"><seg> Clustering the resulting objects and adding the clusterer to the map.
 Note that the clusterer is created immediately, but the objects are added to it
 only after the response is received from the server.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Позиционирование карты для показа результатов геокодирования и их кластеризация.</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Positioning the map to display geocoding results and clustering</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Показаны кластеризованные результаты по запросу "Арбат"</seg></tuv>
	<tuv xml:lang="en"><seg>Clustered results for the request "Arbat" are shown</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,  
    <ph id="4">[#$dp5]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,  
    <ph id="4">[#$dp5]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
	Для построения <bpt id="1">[#$dp7]</bpt>маршрута<ept id="1">&lt;/a&gt;</ept> предназначена функция <ph id="2">[#$dp8]</ph>. В эту функцию передается массив точек, через которые нужно проложить маршрут и, при необходимости, дополнительные опции его построения.
</seg></tuv>
	<tuv xml:lang="en"><seg>
	To build a <bpt id="1">[#$dp7]</bpt>route<ept id="1">&lt;/a&gt;</ept>, use the <ph id="2">[#$dp8]</ph> function. This function is passed an array of points that the route must pass through and, if necessary, additional options for building the route.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
	Вычисление маршрута производится асинхронно (то есть во время выполнения функции route производится обмен данными с сервером). Результат передается в функцию-обработчик в виде коллекции <ph id="1">[#$dp11]</ph>, которую можно разместить на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
	The route is calculated asynchronously (in other words, data is exchanged with the server while the route function is executing). The result is passed to the handler function as a <ph id="1">[#$dp11]</ph> collection that can be placed on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавим на карту схему проезда
 от улицы Крылатские холмы до станции метро "Кунцевская"
 через станцию "Молодежная" и затем до станции "Пионерская".
 Точки маршрута можно задавать 3 способами:
 как строка, как объект или как массив геокоординат.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding driving directions to the map from Krylatsky Hills street to the metro station "Kuntsevskaya" via the station "Molodezhnaya" and then to the metro station "Pionerskaya". Route points can be set in 3 ways: as a string, as an object, or as an array of geocoordinates.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> метро "Молодежная" - транзитная точка
 (проезжать через эту точку, но не останавливаться в ней).
</seg></tuv>
	<tuv xml:lang="en"><seg> Metro "Molodezhnaya" is a through point (passing through this point, but not stopping at it).
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Зададим содержание иконок начальной и конечной точкам маршрута.
 С помощью метода getWayPoints() получаем массив точек маршрута.
 Массив транзитных точек маршрута можно получить с помощью метода getViaPoints.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the contents of the icons for the start and end points of the route. Using the getWayPoints() method to get an array of waypoints. The getViaPoints method can be used for getting the route's through points.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Задаем стиль метки - иконки будут красного цвета, и
 их изображения будут растягиваться под контент.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the placemark style - icons will be red, and their images will stretch to fit the content.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Задаем контент меток в начальной и конечной точках.
</seg></tuv>
	<tuv xml:lang="en"><seg> Setting the placemark content in the start and end points.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Проанализируем маршрут по сегментам.
 Сегмент - участок маршрута, который нужно проехать до следующего
 изменения направления движения.
 Для того, чтобы получить сегменты маршрута, сначала необходимо получить
 отдельно каждый путь маршрута.
 Весь маршрут делится на два пути:
 1) от улицы Крылатские холмы до станции "Кунцевская";
 2) от станции "Кунцевская" до "Пионерская".
</seg></tuv>
	<tuv xml:lang="en"><seg> Analyzing the route by segments.
 A segment is a section of the route up to the next change of direction.
 In order to obtain the route segments, you first need to obtain each path of the route separately.
 The entire route is divided into two paths:
  1) from Krylatsky Hills street to the station "Kuntsevskaya";
  2) from "Kuntsevskaya" station to "Pionerskaya".
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Получаем массив путей.
</seg></tuv>
	<tuv xml:lang="en"><seg> Getting an array of paths.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Выводим маршрутный лист.
</seg></tuv>
	<tuv xml:lang="en"><seg> Outputting the route form.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Построение маршрута</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Route planning</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>,
    <ph id="7">[#$dp8]</ph>,
    <ph id="8">[#$dp9]</ph>,
    <ph id="9">[#$dp10]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>,
    <ph id="2">[#$dp3]</ph>,
    <ph id="3">[#$dp4]</ph>,
    <ph id="4">[#$dp5]</ph>,
    <ph id="5">[#$dp6]</ph>,
    <ph id="6">[#$dp7]</ph>,
    <ph id="7">[#$dp8]</ph>,
    <ph id="8">[#$dp9]</ph>,
    <ph id="9">[#$dp10]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Поиск объекта его названию реализуется с помощью функции <ph id="1">[#$dp12]</ph>. Однако, эта функция
    производит поиск среди объектов, размещенных на обычной или народной карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    Searching for an object by name is implemented using the <ph id="1">[#$dp12]</ph> function.
    However, this function searches among the objects placed on the regular or public map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    А что делать, если необходимо организовать поиск по собственным объектам
    и интегрировать его с API Яндекс.Карт? Написать собственный провайдер поиска,
    который можно использовать в функции <ph id="1">[#$dp15]</ph> и элементе управления
    <bpt id="2">[#$dp16]</bpt>Поиск по карте<ept id="2">&lt;/sa&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    What if you want to organize the search across custom objects
    and integrate it with the Yandex.Maps API? Write your own search provider,
    which can be used in the <ph id="1">[#$dp15]</ph> function and
    the <bpt id="2">[#$dp16]</bpt>"Search on map"<ept id="2">&lt;/sa&gt;</ept> control.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Провайдер поиска должен реализовывать интерфейс <ph id="1">[#$dp19]</ph>.
    Данный пример показывает, как написать собственный провайдер и подключить его
    стандартному элементу управления Поиск по карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The search provider must implement the <ph id="1">[#$dp19]</ph> interface.
    This example shows how to write your own provider and connect it
    to the standard "Search on map" control.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Обсуждение этого примера можно посмотреть в <bpt id="1">[#$dp22]</bpt>клубе<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The example is discussed in more detail in the <bpt id="1">[#$dp22]</bpt>club<ept id="1">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем коллекцию.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating a collection.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем массив с данными.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating an array with the data.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Заполняем коллекцию данными.
</seg></tuv>
	<tuv xml:lang="en"><seg> Populating the collection with data.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем коллекцию меток на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding a collection of placemarks to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создаем экземпляр класса ymaps.control.SearchControl
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating an instance of the ymaps.control.SearchControl class.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Заменяем стандартный провайдер данных (геокодер) нашим собственным.
</seg></tuv>
	<tuv xml:lang="en"><seg> Replacing the standard data provider (geocoder) with our own.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Не будем показывать еще одну метку при выборе результата поиска,
 т.к. метки коллекции myCollection уже добавлены на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> We won't show another placemark when selecting a search result, because the placemarks in the myCollection collection have already been added to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем контрол в верхний правый угол,
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding the control in the upper right corner,
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Провайдер данных для элемента управления ymaps.control.SearchControl.
 Осуществляет поиск геообъектов в по массиву points.
 Реализует интерфейс IGeocodeProvider.
</seg></tuv>
	<tuv xml:lang="en"><seg> The data provider for ymaps.control.SearchControl. Performs a search for geo objects in the "points" array. Implements the IGeocodeProvider interface.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Провайдер ищет по полю text стандартным методом String.ptototype.indexOf.
</seg></tuv>
	<tuv xml:lang="en"><seg> The provider searches the "text" field using the standard method String.ptototype.indexOf.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Сколько результатов нужно пропустить.
</seg></tuv>
	<tuv xml:lang="en"><seg> How many results to skip.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Количество возвращаемых результатов.
</seg></tuv>
	<tuv xml:lang="en"><seg> The number of results to return.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Ищем в свойстве text каждого элемента массива.
</seg></tuv>
	<tuv xml:lang="en"><seg> Searching in the "text" property of each item in the array.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> При формировании ответа можно учитывать offset и limit.
</seg></tuv>
	<tuv xml:lang="en"><seg> When forming the response, "offset" and "limit" can be taken into account.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавляем точки в результирующую коллекцию.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding points to the resulting collection.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Геообъекты поисковой выдачи.
</seg></tuv>
	<tuv xml:lang="en"><seg> Geo objects in search results.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Метаинформация ответа.
</seg></tuv>
	<tuv xml:lang="en"><seg> Response metainformation.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Строка обработанного запроса.
</seg></tuv>
	<tuv xml:lang="en"><seg> String with the processed request.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Количество найденных результатов.
</seg></tuv>
	<tuv xml:lang="en"><seg> The number of found results.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Количество возвращенных результатов.
</seg></tuv>
	<tuv xml:lang="en"><seg> The number of returned results.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Количество пропущенных результатов.
</seg></tuv>
	<tuv xml:lang="en"><seg> The number of skipped results.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Возвращаем объект-обещание.
</seg></tuv>
	<tuv xml:lang="en"><seg> Returning a promise object.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры. Поиск по своим объектам</seg></tuv>
	<tuv xml:lang="en"><seg>Examples. Searching across your own objects</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <ph id="1">[#$dp2]</ph>, <ph id="2">[#$dp3]</ph>, <ph id="3">[#$dp4]</ph>, <ph id="4">[#$dp5]</ph>, <ph id="5">[#$dp6]</ph>
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    <bpt id="1">[#$dp8]</bpt>YMapsML<ept id="1">&lt;/a&gt;</ept> - язык описания географических объектов.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    <bpt id="1">[#$dp8]</bpt>YMapsML<ept id="1">&lt;/a&gt;</ept> is a language for describing geographical objects.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Каждому географическому объекту в YMapsML ставятся в соответствие геометрическая фигура и геообъект, используемый для
    отображения этой фигуры на карте. Описание фигур и их привязка к географическим координатам задается
    в соответствующих YMapsML-элементах. Для фигуры "замкнутая линия" предназначен элемент <bpt id="1">[#$dp11]</bpt>gml:LinearRing<ept id="1">&lt;/a&gt;</ept>.
    Он содержит координаты вершин линии. Координаты первой и последней вершин должны совпадать.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    In YMapsML, each geographical object is associated with a geometric shape
	and a geo object that is used for displaying this shape on the map. The shape definitions and their anchors to geographical coordinates are set in
	corresponding YMapsML elements. The <bpt id="1">[#$dp11]</bpt>gml:LinearRing<ept id="1">&lt;/a&gt;</ept> element is designated for the "linear ring" shape.
	This element contains the coordinates of line endpoints. The coordinates of the first and last endpoints must match.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Внешний вид отображаемых объектов задается в элементе <bpt id="1">[#$dp14]</bpt>repr:Representation<ept id="1">&lt;/a&gt;</ept>.
    В <bpt id="2">[#$dp15]</bpt>документации<ept id="2">&lt;/a&gt;</ept> можно ознакомиться с подробной инструкцией по
    заданию стиля отображаемых объектов.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The visual appearance of displayed objects is set in the
	<bpt id="1">[#$dp14]</bpt>repr:Representation<ept id="1">&lt;/a&gt;</ept> element.
	For detailed instructions on setting styles for displayed objects,
	see the <bpt id="2">[#$dp15]</bpt>documentation<ept id="2">&lt;/a&gt;</ept>.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>
    Для загрузки YMapsML-данных предназначена функция <ph id="1">[#$dp18]</ph>. После того как данные загрузятся, функция преобразует их в
    <ph id="2">[#$dp19]</ph> и передает в качестве параметра функции-обработчику. Коллекцию геообъектов GeoObjectCollection можно отобразить
    на карте.
</seg></tuv>
	<tuv xml:lang="en"><seg>
    The <ph id="1">[#$dp18]</ph> function is for loading YMapsML data. After data has loaded, the function converts the data to
	<ph id="2">[#$dp19]</ph> and passes it to the handler function as a parameter. A GeoObjectCollection can be displayed
	on the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg>Примеры YMapsML. Ломаная.</seg></tuv>
	<tuv xml:lang="en"><seg>YMapsML examples. Polyline.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Если вы используете API локально, то в URL ресурса необходимо указывать протокол в стандартном виде (http://...)</seg></tuv>
	<tuv xml:lang="en"><seg> If you are using the API locally, you must specify the protocol in the standard form (http://...) in the resource URL.</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Создание экземпляра карты.
</seg></tuv>
	<tuv xml:lang="en"><seg> Creating an instance of the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Загрузка YMapsML-файла.
</seg></tuv>
	<tuv xml:lang="en"><seg> Loading a YMapsML file.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Добавление геообъектов на карту.
</seg></tuv>
	<tuv xml:lang="en"><seg> Adding geo objects to the map.
</seg></tuv></tu><tu>
	<tuv xml:lang="ru"><seg> Вызывается в случае неудачной загрузки YMapsML-файла.
</seg></tuv>
	<tuv xml:lang="en"><seg> Called if loading the YMapsML file was unsuccessful.
</seg></tuv></tu></body></tmx>
